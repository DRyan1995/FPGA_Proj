
r2030.elf:     file format elf32-littlenios2
r2030.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006fcc memsz 0x00006fcc flags r-x
    LOAD off    0x00007fec vaddr 0x00806fec paddr 0x00808af8 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x0000a604 vaddr 0x0080a604 paddr 0x0080a604 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ce4  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000154  00806e98  00806e98  00007e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  00806fec  00808af8  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  0080a604  0080a604  0000a604  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009af8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  00009b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000103b  00000000  00000000  0000a558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001ce76  00000000  00000000  0000b593  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b70  00000000  00000000  00028409  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e80d  00000000  00000000  0002df79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001454  00000000  00000000  0003c788  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001861  00000000  00000000  0003dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000047b7  00000000  00000000  0003f43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00043bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00043c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00046994  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00046997  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004699c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004699d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004699e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000469a2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000469a6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000469aa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000469b3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000469bc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000469c5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000017  00000000  00000000  000469c9  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00047b54  00000000  00000000  000469e0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00806e98 l    d  .rodata	00000000 .rodata
00806fec l    d  .rwdata	00000000 .rwdata
0080a604 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00806fec l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008026f0 l     F .text	00000058 std
008027fc l     F .text	00000008 __fp_lock
00802804 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
008037c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803824 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803924 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00803c04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803ce4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803e40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080406c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00808aec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00804338 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080799c l     O .rwdata	00001060 jtag_uart
008089fc l     O .rwdata	000000c4 RS232
00804430 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00804670 l     F .text	00000228 altera_avalon_jtag_uart_irq
00804898 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008050d4 l     F .text	0000009c altera_avalon_uart_irq
00805170 l     F .text	000000e0 altera_avalon_uart_rxirq
00805250 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080563c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00805864 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00805c5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00806080 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008061bc l     F .text	000000dc alt_file_locked
00806420 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00806b34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00806ce8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00806e34 l     F .text	00000040 alt_sim_halt
00800afc g     F .text	0000001c putchar
00803568 g     F .text	00000070 _isatty_r
00803ea0 g     F .text	0000006c alt_main
008002c8 g     F .text	00000050 Uart_ISR
00800b20 g     F .text	000000a0 _puts_r
0080a668 g     O .bss	00000100 alt_irq
008035d8 g     F .text	00000078 _lseek_r
00808af8 g       *ABS*	00000000 __flash_rwdata_start
00800264 g     F .text	00000064 Uart_send_n
0080a8f8 g       *ABS*	00000000 __alt_heap_start
008007a8 g     F .text	00000030 test_alarm_en
008031a4 g     F .text	00000068 __sseek
00802758 g     F .text	000000a4 __sinit
00802238 g     F .text	00000130 __swbuf_r
00802858 g     F .text	00000068 __sfmoreglue
00803f2c g     F .text	00000020 __malloc_unlock
00801908 g     F .text	000000e0 memmove
00802848 g     F .text	00000010 _cleanup
008008d0 g     F .text	00000124 Alarm
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800318 g     F .text	000000a0 movefifo
008034f4 g     F .text	00000074 _fstat_r
0080a624 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080a630 g     O .bss	00000004 alt_argv
00810ac0 g       *ABS*	00000000 _gp
008041e8 g     F .text	00000030 usleep
0080781c g     O .rwdata	00000180 alt_fd_list
00800b18 g     F .text	00000008 _putchar_r
00806644 g     F .text	00000094 alt_find_dev
00800a5c g     F .text	000000a0 memcpy
0080283c g     F .text	0000000c _cleanup_r
00806144 g     F .text	00000078 alt_io_redirect
00806e98 g       *ABS*	00000000 __DTOR_END__
00800bc0 g     F .text	00000014 puts
00804ab0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00806e24 g     F .text	00000008 __udivsi3
00803b44 g     F .text	000000c0 isatty
00800200 g     F .text	00000064 Uart_send
008068b0 g     F .text	00000090 alt_icache_flush
0080a618 g     O .bss	00000004 __malloc_top_pad
00800c48 g     F .text	0000049c __sfvwrite_r
008021c8 g     F .text	00000070 _sbrk_r
00803650 g     F .text	00000078 _read_r
00808ae0 g     O .rwdata	00000004 alt_max_fd
008033d0 g     F .text	00000110 _fclose_r
008026bc g     F .text	00000034 fflush
0080a61c g     O .bss	00000004 __malloc_max_sbrked_mem
00803984 g     F .text	000001c0 alt_irq_register
00803d50 g     F .text	000000f0 lseek
00808ac4 g     O .rwdata	00000004 _global_impure_ptr
00801bd4 g     F .text	000005f4 _realloc_r
0080a8f8 g       *ABS*	00000000 __bss_end
00805f88 g     F .text	000000f8 alt_iic_isr_register
00806518 g     F .text	0000010c alt_tick
0080500c g     F .text	000000c8 altera_avalon_uart_init
00802824 g     F .text	00000018 __fp_lock_all
00805f40 g     F .text	00000048 alt_ic_irq_enabled
0080a604 g     O .bss	00000004 alarm
00806480 g     F .text	00000098 alt_alarm_stop
0080a628 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
008077f4 g     O .rwdata	00000028 alt_dev_null
00805b64 g     F .text	00000044 alt_dcache_flush_all
00808af8 g       *ABS*	00000000 __ram_rwdata_end
00808ad8 g     O .rwdata	00000008 alt_dev_list
00804218 g     F .text	00000120 write
00801aec g     F .text	000000e8 _putc_r
00806fec g       *ABS*	00000000 __ram_rodata_end
00803850 g     F .text	000000d4 fstat
0080a608 g     O .bss	00000006 fifo
00806e2c g     F .text	00000008 __umodsi3
0080a8f8 g       *ABS*	00000000 end
0080569c g     F .text	000001c8 altera_avalon_uart_write
008045b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00806e94 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804f6c g     F .text	00000058 altera_avalon_uart_write_fd
00804fc4 g     F .text	00000048 altera_avalon_uart_close_fd
00804cd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00802748 g     F .text	00000004 __sfp_lock_acquire
00801824 g     F .text	000000e4 memchr
00802adc g     F .text	00000314 _free_r
00806b38 g     F .text	000001b0 __call_exitprocs
00808acc g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0080a638 g     O .bss	00000004 _alt_tick_rate
0080a63c g     O .bss	00000004 _alt_nticks
00803f4c g     F .text	00000120 read
008043cc g     F .text	00000064 alt_sys_init
00806a00 g     F .text	00000134 __register_exitproc
00804948 g     F .text	00000074 altera_avalon_jtag_uart_close
00806fec g       *ABS*	00000000 __ram_rwdata_start
00806e98 g       *ABS*	00000000 __ram_rodata_start
0080a640 g     O .bss	00000028 __malloc_current_mallinfo
00804468 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008067f8 g     F .text	000000b8 alt_get_fd
0080a610 g     O .bss	00000004 ringbell
00805a18 g     F .text	0000014c alt_busy_sleep
00803360 g     F .text	00000070 _close_r
0080698c g     F .text	00000074 memcmp
00804518 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080a8f8 g       *ABS*	00000000 __alt_stack_base
00804560 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802384 g     F .text	0000013c __swsetup_r
008028c0 g     F .text	000000f0 __sfp
008073ec g     O .rwdata	00000408 __malloc_av_
00802754 g     F .text	00000004 __sinit_lock_release
00803288 g     F .text	00000060 __sread
008066d8 g     F .text	00000120 alt_find_file
00805ba8 g     F .text	000000b4 alt_dev_llist_insert
00803f0c g     F .text	00000020 __malloc_lock
0080412c g     F .text	000000bc sbrk
008024c0 g     F .text	000001fc _fflush_r
0080a604 g       *ABS*	00000000 __bss_start
00803104 g     F .text	00000098 memset
008009f4 g     F .text	00000068 main
0080a634 g     O .bss	00000004 alt_envp
0080a620 g     O .bss	00000004 __malloc_max_total_mem
008044c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00802368 g     F .text	0000001c __swbuf
0080319c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008034e0 g     F .text	00000014 fclose
0080a768 g     O .bss	00000190 _atexit0
008010e4 g     F .text	00000740 _malloc_r
00808ae4 g     O .rwdata	00000004 alt_errno
00802eb8 g     F .text	000000b8 _fwalk
008019e8 g     F .text	00000104 putc
00806d64 g     F .text	00000060 __divsi3
008029b0 g     F .text	0000012c _malloc_trim_r
00806e98 g       *ABS*	00000000 __CTOR_END__
00806e98 g       *ABS*	00000000 __flash_rodata_start
00806e98 g       *ABS*	00000000 __DTOR_LIST__
00804398 g     F .text	00000034 alt_irq_init
008040cc g     F .text	00000060 alt_release_fd
00806940 g     F .text	00000014 atexit
008032e8 g     F .text	00000078 _write_r
00808ac0 g     O .rwdata	00000004 _impure_ptr
0080a62c g     O .bss	00000004 alt_argc
00805d20 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00800778 g     F .text	00000030 test_alarm
0080280c g     F .text	00000018 __fp_unlock_all
00808ad0 g     O .rwdata	00000008 alt_fs_list
00800748 g     F .text	00000030 test_key
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805db4 g     F .text	00000050 alt_ic_isr_register
00808af8 g       *ABS*	00000000 _edata
00804f14 g     F .text	00000058 altera_avalon_uart_read_fd
0080a8f8 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00800640 g     F .text	000000b4 wifi_init
008049bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00805ea0 g     F .text	000000a0 alt_ic_irq_disable
0080320c g     F .text	0000007c __swrite
00808ac8 g     O .rwdata	00000004 __malloc_trim_threshold
008003b8 g     F .text	00000288 judge
00806624 g     F .text	00000020 altera_nios2_qsys_irq_init
00806954 g     F .text	00000038 exit
00802df0 g     F .text	000000c8 _fwalk_reent
00806dc4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080274c g     F .text	00000004 __sfp_lock_release
008053ac g     F .text	00000060 altera_avalon_uart_close
00806e74 g     F .text	00000020 _exit
008058c4 g     F .text	00000154 alt_alarm_start
00802f70 g     F .text	00000194 __smakebuf_r
00800bd4 g     F .text	00000074 strlen
008006f4 g     F .text	00000054 Uart_init
00806298 g     F .text	00000188 open
00805d84 g     F .text	00000030 alt_icache_flush_all
00808ae8 g     O .rwdata	00000004 alt_priority_mask
00805e04 g     F .text	0000009c alt_ic_irq_enable
0080540c g     F .text	00000230 altera_avalon_uart_read
00808af0 g     O .rwdata	00000008 alt_alarm_list
008007d8 g     F .text	000000f8 welcome
00805cbc g     F .text	00000064 _do_ctors
0080a614 g     O .bss	00000004 alarm_en
008036c8 g     F .text	000000fc close
00803c64 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00802750 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18e99a04 	addi	r3,r3,-22936
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18e99a04 	addi	r3,r3,-22936
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d682b014 	ori	gp,gp,2752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a98114 	ori	r2,r2,42500

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18ea3e14 	ori	r3,r3,43256

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0803c640 	call	803c64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0803ea00 	call	803ea0 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <Uart_send>:
unsigned char fifo[6];
unsigned int ringbell;
unsigned int alarm;
unsigned int alarm_en;
void Uart_send(unsigned char data)
{
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff05 	stb	r4,-4(fp)
	alt_u16 status;
	status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
  800210:	00804034 	movhi	r2,256
  800214:	10840204 	addi	r2,r2,4104
  800218:	10800037 	ldwio	r2,0(r2)
  80021c:	e0bffe0d 	sth	r2,-8(fp)
	while(!(status&0x0040))//waiting the tx_done
  800220:	00000406 	br	800234 <Uart_send+0x34>
	{
		status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
  800224:	00804034 	movhi	r2,256
  800228:	10840204 	addi	r2,r2,4104
  80022c:	10800037 	ldwio	r2,0(r2)
  800230:	e0bffe0d 	sth	r2,-8(fp)
unsigned int alarm_en;
void Uart_send(unsigned char data)
{
	alt_u16 status;
	status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
	while(!(status&0x0040))//waiting the tx_done
  800234:	e0bffe0b 	ldhu	r2,-8(fp)
  800238:	1080100c 	andi	r2,r2,64
  80023c:	1005003a 	cmpeq	r2,r2,zero
  800240:	103ff81e 	bne	r2,zero,800224 <Uart_send+0x24>
	{
		status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE,data);
  800244:	e0ffff03 	ldbu	r3,-4(fp)
  800248:	00804034 	movhi	r2,256
  80024c:	10840104 	addi	r2,r2,4100
  800250:	10c00035 	stwio	r3,0(r2)

}
  800254:	e037883a 	mov	sp,fp
  800258:	df000017 	ldw	fp,0(sp)
  80025c:	dec00104 	addi	sp,sp,4
  800260:	f800283a 	ret

00800264 <Uart_send_n>:
void Uart_send_n(unsigned char *ptr,unsigned char n)//send rx232
{
  800264:	defffc04 	addi	sp,sp,-16
  800268:	dfc00315 	stw	ra,12(sp)
  80026c:	df000215 	stw	fp,8(sp)
  800270:	df000204 	addi	fp,sp,8
  800274:	e13ffe15 	stw	r4,-8(fp)
  800278:	e17fff05 	stb	r5,-4(fp)
	for(;n>0;n--)
  80027c:	00000a06 	br	8002a8 <Uart_send_n+0x44>
	{
		Uart_send(*ptr);
  800280:	e0bffe17 	ldw	r2,-8(fp)
  800284:	10800003 	ldbu	r2,0(r2)
  800288:	11003fcc 	andi	r4,r2,255
  80028c:	08002000 	call	800200 <Uart_send>
		ptr++;
  800290:	e0bffe17 	ldw	r2,-8(fp)
  800294:	10800044 	addi	r2,r2,1
  800298:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE,data);

}
void Uart_send_n(unsigned char *ptr,unsigned char n)//send rx232
{
	for(;n>0;n--)
  80029c:	e0bfff03 	ldbu	r2,-4(fp)
  8002a0:	10bfffc4 	addi	r2,r2,-1
  8002a4:	e0bfff05 	stb	r2,-4(fp)
  8002a8:	e0bfff03 	ldbu	r2,-4(fp)
  8002ac:	1004c03a 	cmpne	r2,r2,zero
  8002b0:	103ff31e 	bne	r2,zero,800280 <Uart_send_n+0x1c>
	{
		Uart_send(*ptr);
		ptr++;

	}
}
  8002b4:	e037883a 	mov	sp,fp
  8002b8:	dfc00117 	ldw	ra,4(sp)
  8002bc:	df000017 	ldw	fp,0(sp)
  8002c0:	dec00204 	addi	sp,sp,8
  8002c4:	f800283a 	ret

008002c8 <Uart_ISR>:
void Uart_ISR(void *context,alt_u32 id)//receive rx232 isr
{
  8002c8:	defffb04 	addi	sp,sp,-20
  8002cc:	dfc00415 	stw	ra,16(sp)
  8002d0:	df000315 	stw	fp,12(sp)
  8002d4:	df000304 	addi	fp,sp,12
  8002d8:	e13ffe15 	stw	r4,-8(fp)
  8002dc:	e17fff15 	stw	r5,-4(fp)
	unsigned char temp;
	temp =  IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
  8002e0:	00804034 	movhi	r2,256
  8002e4:	10840004 	addi	r2,r2,4096
  8002e8:	10800037 	ldwio	r2,0(r2)
  8002ec:	e0bffd05 	stb	r2,-12(fp)

	movefifo(temp);
  8002f0:	e13ffd03 	ldbu	r4,-12(fp)
  8002f4:	08003180 	call	800318 <movefifo>
	judge();
  8002f8:	08003b80 	call	8003b8 <judge>
	printf("%c",temp);
  8002fc:	e13ffd03 	ldbu	r4,-12(fp)
  800300:	0800afc0 	call	800afc <putchar>
}
  800304:	e037883a 	mov	sp,fp
  800308:	dfc00117 	ldw	ra,4(sp)
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00204 	addi	sp,sp,8
  800314:	f800283a 	ret

00800318 <movefifo>:
void movefifo(unsigned char last)
{
  800318:	defffe04 	addi	sp,sp,-8
  80031c:	df000115 	stw	fp,4(sp)
  800320:	df000104 	addi	fp,sp,4
  800324:	e13fff05 	stb	r4,-4(fp)
	fifo[0]=fifo[1];
  800328:	00802074 	movhi	r2,129
  80032c:	10a98244 	addi	r2,r2,-23031
  800330:	10800003 	ldbu	r2,0(r2)
  800334:	d0a6d205 	stb	r2,-25784(gp)
	fifo[1]=fifo[2];
  800338:	00802074 	movhi	r2,129
  80033c:	10a98284 	addi	r2,r2,-23030
  800340:	10c00003 	ldbu	r3,0(r2)
  800344:	00802074 	movhi	r2,129
  800348:	10a98244 	addi	r2,r2,-23031
  80034c:	10c00005 	stb	r3,0(r2)
	fifo[2]=fifo[3];
  800350:	00802074 	movhi	r2,129
  800354:	10a982c4 	addi	r2,r2,-23029
  800358:	10c00003 	ldbu	r3,0(r2)
  80035c:	00802074 	movhi	r2,129
  800360:	10a98284 	addi	r2,r2,-23030
  800364:	10c00005 	stb	r3,0(r2)
	fifo[3]=fifo[4];
  800368:	00802074 	movhi	r2,129
  80036c:	10a98304 	addi	r2,r2,-23028
  800370:	10c00003 	ldbu	r3,0(r2)
  800374:	00802074 	movhi	r2,129
  800378:	10a982c4 	addi	r2,r2,-23029
  80037c:	10c00005 	stb	r3,0(r2)
	fifo[4]=fifo[5];
  800380:	00802074 	movhi	r2,129
  800384:	10a98344 	addi	r2,r2,-23027
  800388:	10c00003 	ldbu	r3,0(r2)
  80038c:	00802074 	movhi	r2,129
  800390:	10a98304 	addi	r2,r2,-23028
  800394:	10c00005 	stb	r3,0(r2)
	fifo[5]=last;
  800398:	00c02074 	movhi	r3,129
  80039c:	18e98344 	addi	r3,r3,-23027
  8003a0:	e0bfff03 	ldbu	r2,-4(fp)
  8003a4:	18800005 	stb	r2,0(r3)
}
  8003a8:	e037883a 	mov	sp,fp
  8003ac:	df000017 	ldw	fp,0(sp)
  8003b0:	dec00104 	addi	sp,sp,4
  8003b4:	f800283a 	ret

008003b8 <judge>:
void judge()//decoding the instructions
{
  8003b8:	defff604 	addi	sp,sp,-40
  8003bc:	dfc00915 	stw	ra,36(sp)
  8003c0:	df000815 	stw	fp,32(sp)
  8003c4:	df000804 	addi	fp,sp,32
	unsigned char message[30];
	if(fifo[0]=='*'&&fifo[5]=='*')
  8003c8:	d0a6d203 	ldbu	r2,-25784(gp)
  8003cc:	10803fcc 	andi	r2,r2,255
  8003d0:	10800a98 	cmpnei	r2,r2,42
  8003d4:	1000951e 	bne	r2,zero,80062c <judge+0x274>
  8003d8:	00802074 	movhi	r2,129
  8003dc:	10a98344 	addi	r2,r2,-23027
  8003e0:	10800003 	ldbu	r2,0(r2)
  8003e4:	10803fcc 	andi	r2,r2,255
  8003e8:	10800a98 	cmpnei	r2,r2,42
  8003ec:	10008f1e 	bne	r2,zero,80062c <judge+0x274>
	{
		if(fifo[1]=='L'&&fifo[2]=='E'&&fifo[3]=='D')
  8003f0:	00802074 	movhi	r2,129
  8003f4:	10a98244 	addi	r2,r2,-23031
  8003f8:	10800003 	ldbu	r2,0(r2)
  8003fc:	10803fcc 	andi	r2,r2,255
  800400:	10801318 	cmpnei	r2,r2,76
  800404:	10002a1e 	bne	r2,zero,8004b0 <judge+0xf8>
  800408:	00802074 	movhi	r2,129
  80040c:	10a98284 	addi	r2,r2,-23030
  800410:	10800003 	ldbu	r2,0(r2)
  800414:	10803fcc 	andi	r2,r2,255
  800418:	10801158 	cmpnei	r2,r2,69
  80041c:	1000241e 	bne	r2,zero,8004b0 <judge+0xf8>
  800420:	00802074 	movhi	r2,129
  800424:	10a982c4 	addi	r2,r2,-23029
  800428:	10800003 	ldbu	r2,0(r2)
  80042c:	10803fcc 	andi	r2,r2,255
  800430:	10801118 	cmpnei	r2,r2,68
  800434:	10001e1e 	bne	r2,zero,8004b0 <judge+0xf8>
		{
			if(fifo[4]=='0')
  800438:	00802074 	movhi	r2,129
  80043c:	10a98304 	addi	r2,r2,-23028
  800440:	10800003 	ldbu	r2,0(r2)
  800444:	10803fcc 	andi	r2,r2,255
  800448:	10800c18 	cmpnei	r2,r2,48
  80044c:	1000041e 	bne	r2,zero,800460 <judge+0xa8>
			{
				puts("LED OFF!\n");
  800450:	01002034 	movhi	r4,128
  800454:	211ba604 	addi	r4,r4,28312
  800458:	0800bc00 	call	800bc0 <puts>
  80045c:	00007306 	br	80062c <judge+0x274>
			}
			else if(fifo[4]=='1')
  800460:	00802074 	movhi	r2,129
  800464:	10a98304 	addi	r2,r2,-23028
  800468:	10800003 	ldbu	r2,0(r2)
  80046c:	10803fcc 	andi	r2,r2,255
  800470:	10800c58 	cmpnei	r2,r2,49
  800474:	1000041e 	bne	r2,zero,800488 <judge+0xd0>
			{
				puts("LED HELLO!\n");
  800478:	01002034 	movhi	r4,128
  80047c:	211ba904 	addi	r4,r4,28324
  800480:	0800bc00 	call	800bc0 <puts>
  800484:	00006906 	br	80062c <judge+0x274>
			}
			else if(fifo[4]=='2')
  800488:	00802074 	movhi	r2,129
  80048c:	10a98304 	addi	r2,r2,-23028
  800490:	10800003 	ldbu	r2,0(r2)
  800494:	10803fcc 	andi	r2,r2,255
  800498:	10800c98 	cmpnei	r2,r2,50
  80049c:	1000631e 	bne	r2,zero,80062c <judge+0x274>
			{
				puts("LED ALARM!\n");
  8004a0:	01002034 	movhi	r4,128
  8004a4:	211bac04 	addi	r4,r4,28336
  8004a8:	0800bc00 	call	800bc0 <puts>
void judge()//decoding the instructions
{
	unsigned char message[30];
	if(fifo[0]=='*'&&fifo[5]=='*')
	{
		if(fifo[1]=='L'&&fifo[2]=='E'&&fifo[3]=='D')
  8004ac:	00005f06 	br	80062c <judge+0x274>
			else if(fifo[4]=='2')
			{
				puts("LED ALARM!\n");
			}
		}
		else if(fifo[1]=='F'&&fifo[2]=='A'&&fifo[3]=='N')
  8004b0:	00802074 	movhi	r2,129
  8004b4:	10a98244 	addi	r2,r2,-23031
  8004b8:	10800003 	ldbu	r2,0(r2)
  8004bc:	10803fcc 	andi	r2,r2,255
  8004c0:	10801198 	cmpnei	r2,r2,70
  8004c4:	1000201e 	bne	r2,zero,800548 <judge+0x190>
  8004c8:	00802074 	movhi	r2,129
  8004cc:	10a98284 	addi	r2,r2,-23030
  8004d0:	10800003 	ldbu	r2,0(r2)
  8004d4:	10803fcc 	andi	r2,r2,255
  8004d8:	10801058 	cmpnei	r2,r2,65
  8004dc:	10001a1e 	bne	r2,zero,800548 <judge+0x190>
  8004e0:	00802074 	movhi	r2,129
  8004e4:	10a982c4 	addi	r2,r2,-23029
  8004e8:	10800003 	ldbu	r2,0(r2)
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	10801398 	cmpnei	r2,r2,78
  8004f4:	1000141e 	bne	r2,zero,800548 <judge+0x190>
		{
			if(fifo[4]=='0')
  8004f8:	00802074 	movhi	r2,129
  8004fc:	10a98304 	addi	r2,r2,-23028
  800500:	10800003 	ldbu	r2,0(r2)
  800504:	10803fcc 	andi	r2,r2,255
  800508:	10800c18 	cmpnei	r2,r2,48
  80050c:	1000041e 	bne	r2,zero,800520 <judge+0x168>
			{
				puts("FAN OFF!\n");
  800510:	01002034 	movhi	r4,128
  800514:	211baf04 	addi	r4,r4,28348
  800518:	0800bc00 	call	800bc0 <puts>
  80051c:	00004306 	br	80062c <judge+0x274>
			}
			else if(fifo[4]=='1')
  800520:	00802074 	movhi	r2,129
  800524:	10a98304 	addi	r2,r2,-23028
  800528:	10800003 	ldbu	r2,0(r2)
  80052c:	10803fcc 	andi	r2,r2,255
  800530:	10800c58 	cmpnei	r2,r2,49
  800534:	10003d1e 	bne	r2,zero,80062c <judge+0x274>
			{
				puts("FAN ON!\n");
  800538:	01002034 	movhi	r4,128
  80053c:	211bb204 	addi	r4,r4,28360
  800540:	0800bc00 	call	800bc0 <puts>
			else if(fifo[4]=='2')
			{
				puts("LED ALARM!\n");
			}
		}
		else if(fifo[1]=='F'&&fifo[2]=='A'&&fifo[3]=='N')
  800544:	00003906 	br	80062c <judge+0x274>
			{
				puts("FAN ON!\n");
			}
		}

		else if(fifo[1]=='T'&&fifo[2]=='E'&&fifo[3]=='M')
  800548:	00802074 	movhi	r2,129
  80054c:	10a98244 	addi	r2,r2,-23031
  800550:	10800003 	ldbu	r2,0(r2)
  800554:	10803fcc 	andi	r2,r2,255
  800558:	10801518 	cmpnei	r2,r2,84
  80055c:	1000331e 	bne	r2,zero,80062c <judge+0x274>
  800560:	00802074 	movhi	r2,129
  800564:	10a98284 	addi	r2,r2,-23030
  800568:	10800003 	ldbu	r2,0(r2)
  80056c:	10803fcc 	andi	r2,r2,255
  800570:	10801158 	cmpnei	r2,r2,69
  800574:	10002d1e 	bne	r2,zero,80062c <judge+0x274>
  800578:	00802074 	movhi	r2,129
  80057c:	10a982c4 	addi	r2,r2,-23029
  800580:	10800003 	ldbu	r2,0(r2)
  800584:	10803fcc 	andi	r2,r2,255
  800588:	10801358 	cmpnei	r2,r2,77
  80058c:	1000271e 	bne	r2,zero,80062c <judge+0x274>
		{
			if(fifo[4]=='0')
  800590:	00802074 	movhi	r2,129
  800594:	10a98304 	addi	r2,r2,-23028
  800598:	10800003 	ldbu	r2,0(r2)
  80059c:	10803fcc 	andi	r2,r2,255
  8005a0:	10800c18 	cmpnei	r2,r2,48
  8005a4:	10000e1e 	bne	r2,zero,8005e0 <judge+0x228>
			{
				puts("Temperature sent!!!\n");
  8005a8:	01002034 	movhi	r4,128
  8005ac:	211bb504 	addi	r4,r4,28372
  8005b0:	0800bc00 	call	800bc0 <puts>
				strcpy(message,"The Temperature is xx degree!");
  8005b4:	e0bff804 	addi	r2,fp,-32
  8005b8:	00c02034 	movhi	r3,128
  8005bc:	18dbbb04 	addi	r3,r3,28396
  8005c0:	1009883a 	mov	r4,r2
  8005c4:	180b883a 	mov	r5,r3
  8005c8:	01800784 	movi	r6,30
  8005cc:	0800a5c0 	call	800a5c <memcpy>
				Uart_send_n(message,29);
  8005d0:	e13ff804 	addi	r4,fp,-32
  8005d4:	01400744 	movi	r5,29
  8005d8:	08002640 	call	800264 <Uart_send_n>
  8005dc:	00001306 	br	80062c <judge+0x274>
			}
			else if(fifo[4]=='1')
  8005e0:	00802074 	movhi	r2,129
  8005e4:	10a98304 	addi	r2,r2,-23028
  8005e8:	10800003 	ldbu	r2,0(r2)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	10800c58 	cmpnei	r2,r2,49
  8005f4:	10000d1e 	bne	r2,zero,80062c <judge+0x274>
			{
				puts("Humidity sent!!!\n");
  8005f8:	01002034 	movhi	r4,128
  8005fc:	211bc304 	addi	r4,r4,28428
  800600:	0800bc00 	call	800bc0 <puts>
				strcpy(message,"The Humidity is xx percent!");
  800604:	e0bff804 	addi	r2,fp,-32
  800608:	00c02034 	movhi	r3,128
  80060c:	18dbc804 	addi	r3,r3,28448
  800610:	1009883a 	mov	r4,r2
  800614:	180b883a 	mov	r5,r3
  800618:	01800704 	movi	r6,28
  80061c:	0800a5c0 	call	800a5c <memcpy>
				Uart_send_n(message,27);
  800620:	e13ff804 	addi	r4,fp,-32
  800624:	014006c4 	movi	r5,27
  800628:	08002640 	call	800264 <Uart_send_n>
			}
		}
	}

}
  80062c:	e037883a 	mov	sp,fp
  800630:	dfc00117 	ldw	ra,4(sp)
  800634:	df000017 	ldw	fp,0(sp)
  800638:	dec00204 	addi	sp,sp,8
  80063c:	f800283a 	ret

00800640 <wifi_init>:

void wifi_init()
{
  800640:	defffe04 	addi	sp,sp,-8
  800644:	dfc00115 	stw	ra,4(sp)
  800648:	df000015 	stw	fp,0(sp)
  80064c:	d839883a 	mov	fp,sp

	usleep(3000000);//3s
  800650:	01000bb4 	movhi	r4,46
  800654:	2131b004 	addi	r4,r4,-14656
  800658:	08041e80 	call	8041e8 <usleep>

	Uart_send_n("AT+RST",6);
  80065c:	01002034 	movhi	r4,128
  800660:	211bcf04 	addi	r4,r4,28476
  800664:	01400184 	movi	r5,6
  800668:	08002640 	call	800264 <Uart_send_n>
	Uart_send(0x0d);
  80066c:	01000344 	movi	r4,13
  800670:	08002000 	call	800200 <Uart_send>
    Uart_send(0x0a);
  800674:	01000284 	movi	r4,10
  800678:	08002000 	call	800200 <Uart_send>
	usleep(1000000);//1000ms
  80067c:	010003f4 	movhi	r4,15
  800680:	21109004 	addi	r4,r4,16960
  800684:	08041e80 	call	8041e8 <usleep>
	Uart_send_n("AT+CIPMUX=1",11);
  800688:	01002034 	movhi	r4,128
  80068c:	211bd104 	addi	r4,r4,28484
  800690:	014002c4 	movi	r5,11
  800694:	08002640 	call	800264 <Uart_send_n>
	Uart_send(0x0d);
  800698:	01000344 	movi	r4,13
  80069c:	08002000 	call	800200 <Uart_send>
	Uart_send(0x0a);
  8006a0:	01000284 	movi	r4,10
  8006a4:	08002000 	call	800200 <Uart_send>
	usleep(200000);//200ms
  8006a8:	010000f4 	movhi	r4,3
  8006ac:	21035004 	addi	r4,r4,3392
  8006b0:	08041e80 	call	8041e8 <usleep>
	Uart_send_n("AT+CIPSERVER=1",14);
  8006b4:	01002034 	movhi	r4,128
  8006b8:	211bd404 	addi	r4,r4,28496
  8006bc:	01400384 	movi	r5,14
  8006c0:	08002640 	call	800264 <Uart_send_n>
	Uart_send(0x0d);
  8006c4:	01000344 	movi	r4,13
  8006c8:	08002000 	call	800200 <Uart_send>
	Uart_send(0x0a);
  8006cc:	01000284 	movi	r4,10
  8006d0:	08002000 	call	800200 <Uart_send>
	usleep(200000);//200ms
  8006d4:	010000f4 	movhi	r4,3
  8006d8:	21035004 	addi	r4,r4,3392
  8006dc:	08041e80 	call	8041e8 <usleep>
}
  8006e0:	e037883a 	mov	sp,fp
  8006e4:	dfc00117 	ldw	ra,4(sp)
  8006e8:	df000017 	ldw	fp,0(sp)
  8006ec:	dec00204 	addi	sp,sp,8
  8006f0:	f800283a 	ret

008006f4 <Uart_init>:

void Uart_init()
{
  8006f4:	defffe04 	addi	sp,sp,-8
  8006f8:	dfc00115 	stw	ra,4(sp)
  8006fc:	df000015 	stw	fp,0(sp)
  800700:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_UART_CONTROL(RS232_BASE,0x80);
  800704:	00804034 	movhi	r2,256
  800708:	10840304 	addi	r2,r2,4108
  80070c:	00c02004 	movi	r3,128
  800710:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_STATUS(RS232_BASE,0x0);
  800714:	00804034 	movhi	r2,256
  800718:	10840204 	addi	r2,r2,4104
  80071c:	10000035 	stwio	zero,0(r2)
	alt_irq_register(RS232_IRQ,NULL,Uart_ISR);
  800720:	0009883a 	mov	r4,zero
  800724:	000b883a 	mov	r5,zero
  800728:	01802034 	movhi	r6,128
  80072c:	3180b204 	addi	r6,r6,712
  800730:	08039840 	call	803984 <alt_irq_register>

}
  800734:	e037883a 	mov	sp,fp
  800738:	dfc00117 	ldw	ra,4(sp)
  80073c:	df000017 	ldw	fp,0(sp)
  800740:	dec00204 	addi	sp,sp,8
  800744:	f800283a 	ret

00800748 <test_key>:
		}

}
*/
void test_key()//refreshing the key val
{
  800748:	deffff04 	addi	sp,sp,-4
  80074c:	df000015 	stw	fp,0(sp)
  800750:	d839883a 	mov	fp,sp

	ringbell = IORD_ALTERA_AVALON_PIO_DATA(SIGTAP_BASE)&0x01;
  800754:	00804034 	movhi	r2,256
  800758:	10841404 	addi	r2,r2,4176
  80075c:	10800037 	ldwio	r2,0(r2)
  800760:	1080004c 	andi	r2,r2,1
  800764:	d0a6d415 	stw	r2,-25776(gp)
}
  800768:	e037883a 	mov	sp,fp
  80076c:	df000017 	ldw	fp,0(sp)
  800770:	dec00104 	addi	sp,sp,4
  800774:	f800283a 	ret

00800778 <test_alarm>:
void test_alarm()
{
  800778:	deffff04 	addi	sp,sp,-4
  80077c:	df000015 	stw	fp,0(sp)
  800780:	d839883a 	mov	fp,sp

	alarm = IORD_ALTERA_AVALON_PIO_DATA(ALARM_BASE)&0x01;
  800784:	00804034 	movhi	r2,256
  800788:	10840c04 	addi	r2,r2,4144
  80078c:	10800037 	ldwio	r2,0(r2)
  800790:	1080004c 	andi	r2,r2,1
  800794:	d0a6d115 	stw	r2,-25788(gp)
}
  800798:	e037883a 	mov	sp,fp
  80079c:	df000017 	ldw	fp,0(sp)
  8007a0:	dec00104 	addi	sp,sp,4
  8007a4:	f800283a 	ret

008007a8 <test_alarm_en>:

void test_alarm_en()
{
  8007a8:	deffff04 	addi	sp,sp,-4
  8007ac:	df000015 	stw	fp,0(sp)
  8007b0:	d839883a 	mov	fp,sp

	alarm_en = IORD_ALTERA_AVALON_PIO_DATA(ALARM_EN_BASE)&0x01;
  8007b4:	00804034 	movhi	r2,256
  8007b8:	10840804 	addi	r2,r2,4128
  8007bc:	10800037 	ldwio	r2,0(r2)
  8007c0:	1080004c 	andi	r2,r2,1
  8007c4:	d0a6d515 	stw	r2,-25772(gp)
}
  8007c8:	e037883a 	mov	sp,fp
  8007cc:	df000017 	ldw	fp,0(sp)
  8007d0:	dec00104 	addi	sp,sp,4
  8007d4:	f800283a 	ret

008007d8 <welcome>:
void welcome()//led welcum
{
  8007d8:	defff704 	addi	sp,sp,-36
  8007dc:	dfc00815 	stw	ra,32(sp)
  8007e0:	df000715 	stw	fp,28(sp)
  8007e4:	df000704 	addi	fp,sp,28
	char message[22];
	if(ringbell == 0x01)
  8007e8:	d0a6d417 	ldw	r2,-25776(gp)
  8007ec:	10800058 	cmpnei	r2,r2,1
  8007f0:	1000291e 	bne	r2,zero,800898 <welcome+0xc0>
	{
		Uart_send_n("AT+CIPSEND=0,21",15);
  8007f4:	01002034 	movhi	r4,128
  8007f8:	211bd804 	addi	r4,r4,28512
  8007fc:	014003c4 	movi	r5,15
  800800:	08002640 	call	800264 <Uart_send_n>
		Uart_send(0x0d);
  800804:	01000344 	movi	r4,13
  800808:	08002000 	call	800200 <Uart_send>
    	Uart_send(0x0a);
  80080c:	01000284 	movi	r4,10
  800810:	08002000 	call	800200 <Uart_send>
    	usleep(1000000);
  800814:	010003f4 	movhi	r4,15
  800818:	21109004 	addi	r4,r4,16960
  80081c:	08041e80 	call	8041e8 <usleep>
		strcpy(message,"You'v Got A Visitor!!");
  800820:	e0fffa04 	addi	r3,fp,-24
  800824:	0089dd74 	movhi	r2,10101
  800828:	109bd644 	addi	r2,r2,28505
  80082c:	18800015 	stw	r2,0(r3)
  800830:	009bd1f4 	movhi	r2,28487
  800834:	10881d84 	addi	r2,r2,8310
  800838:	18800115 	stw	r2,4(r3)
  80083c:	00881074 	movhi	r2,8257
  800840:	10881d04 	addi	r2,r2,8308
  800844:	18800215 	stw	r2,8(r3)
  800848:	009a5cf4 	movhi	r2,26995
  80084c:	109a5584 	addi	r2,r2,26966
  800850:	18800315 	stw	r2,12(r3)
  800854:	00885cb4 	movhi	r2,8562
  800858:	109bdd04 	addi	r2,r2,28532
  80085c:	18800415 	stw	r2,16(r3)
  800860:	00800844 	movi	r2,33
  800864:	1880050d 	sth	r2,20(r3)
		Uart_send_n(message,21);
  800868:	e13ffa04 	addi	r4,fp,-24
  80086c:	01400544 	movi	r5,21
  800870:	08002640 	call	800264 <Uart_send_n>
		Uart_send(0x0d);
  800874:	01000344 	movi	r4,13
  800878:	08002000 	call	800200 <Uart_send>
		Uart_send(0x0a);
  80087c:	01000284 	movi	r4,10
  800880:	08002000 	call	800200 <Uart_send>


		IOWR_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE, 0x03);
  800884:	00c04034 	movhi	r3,256
  800888:	18c41004 	addi	r3,r3,4160
  80088c:	008000c4 	movi	r2,3
  800890:	18800035 	stwio	r2,0(r3)
  800894:	00000906 	br	8008bc <welcome+0xe4>
	}
	else
	{
		unsigned int status = IORD_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE);
  800898:	00804034 	movhi	r2,256
  80089c:	10841004 	addi	r2,r2,4160
  8008a0:	10800037 	ldwio	r2,0(r2)
  8008a4:	e0bff915 	stw	r2,-28(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE, status&0x02);
  8008a8:	e0bff917 	ldw	r2,-28(fp)
  8008ac:	10c0008c 	andi	r3,r2,2
  8008b0:	00804034 	movhi	r2,256
  8008b4:	10841004 	addi	r2,r2,4160
  8008b8:	10c00035 	stwio	r3,0(r2)
	}
}
  8008bc:	e037883a 	mov	sp,fp
  8008c0:	dfc00117 	ldw	ra,4(sp)
  8008c4:	df000017 	ldw	fp,0(sp)
  8008c8:	dec00204 	addi	sp,sp,8
  8008cc:	f800283a 	ret

008008d0 <Alarm>:

void Alarm()
{
  8008d0:	defff704 	addi	sp,sp,-36
  8008d4:	dfc00815 	stw	ra,32(sp)
  8008d8:	df000715 	stw	fp,28(sp)
  8008dc:	df000704 	addi	fp,sp,28
	char message[24];
	if(alarm == 0x01&& alarm_en == 0x01)
  8008e0:	d0a6d117 	ldw	r2,-25788(gp)
  8008e4:	10800058 	cmpnei	r2,r2,1
  8008e8:	1000311e 	bne	r2,zero,8009b0 <Alarm+0xe0>
  8008ec:	d0a6d517 	ldw	r2,-25772(gp)
  8008f0:	10800058 	cmpnei	r2,r2,1
  8008f4:	10002e1e 	bne	r2,zero,8009b0 <Alarm+0xe0>
	{
		Uart_send_n("AT+CIPSEND=0,24",15);
  8008f8:	01002034 	movhi	r4,128
  8008fc:	211bdc04 	addi	r4,r4,28528
  800900:	014003c4 	movi	r5,15
  800904:	08002640 	call	800264 <Uart_send_n>
		Uart_send(0x0d);
  800908:	01000344 	movi	r4,13
  80090c:	08002000 	call	800200 <Uart_send>
    	Uart_send(0x0a);
  800910:	01000284 	movi	r4,10
  800914:	08002000 	call	800200 <Uart_send>
    	usleep(1000000);
  800918:	010003f4 	movhi	r4,15
  80091c:	21109004 	addi	r4,r4,16960
  800920:	08041e80 	call	8041e8 <usleep>
		strcpy(message,"Someone Has Broken In!!!");
  800924:	e0fffa04 	addi	r3,fp,-24
  800928:	00995b74 	movhi	r2,25965
  80092c:	109bd4c4 	addi	r2,r2,28499
  800930:	18800015 	stw	r2,0(r3)
  800934:	00881974 	movhi	r2,8293
  800938:	109b9bc4 	addi	r2,r2,28271
  80093c:	18800115 	stw	r2,4(r3)
  800940:	00881cf4 	movhi	r2,8307
  800944:	10985204 	addi	r2,r2,24904
  800948:	18800215 	stw	r2,8(r3)
  80094c:	009adbf4 	movhi	r2,27503
  800950:	109c9084 	addi	r2,r2,29250
  800954:	18800315 	stw	r2,12(r3)
  800958:	00924834 	movhi	r2,18720
  80095c:	109b9944 	addi	r2,r2,28261
  800960:	18800415 	stw	r2,16(r3)
  800964:	00884874 	movhi	r2,8481
  800968:	10885b84 	addi	r2,r2,8558
  80096c:	18800515 	stw	r2,20(r3)
  800970:	18000605 	stb	zero,24(r3)
		Uart_send_n(message,24);
  800974:	e13ffa04 	addi	r4,fp,-24
  800978:	01400604 	movi	r5,24
  80097c:	08002640 	call	800264 <Uart_send_n>
		Uart_send(0x0d);
  800980:	01000344 	movi	r4,13
  800984:	08002000 	call	800200 <Uart_send>
		Uart_send(0x0a);
  800988:	01000284 	movi	r4,10
  80098c:	08002000 	call	800200 <Uart_send>
		puts("fuck!!\n");
  800990:	01002034 	movhi	r4,128
  800994:	211be004 	addi	r4,r4,28544
  800998:	0800bc00 	call	800bc0 <puts>

		IOWR_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE,0x03);
  80099c:	00c04034 	movhi	r3,256
  8009a0:	18c41004 	addi	r3,r3,4160
  8009a4:	008000c4 	movi	r2,3
  8009a8:	18800035 	stwio	r2,0(r3)
}

void Alarm()
{
	char message[24];
	if(alarm == 0x01&& alarm_en == 0x01)
  8009ac:	00000c06 	br	8009e0 <Alarm+0x110>

		IOWR_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE,0x03);
	}
	else
	{
		unsigned int status = IORD_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE);
  8009b0:	00804034 	movhi	r2,256
  8009b4:	10841004 	addi	r2,r2,4160
  8009b8:	10800037 	ldwio	r2,0(r2)
  8009bc:	e0bff915 	stw	r2,-28(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDMODE_BASE, status&0x01);
  8009c0:	e0bff917 	ldw	r2,-28(fp)
  8009c4:	10c0004c 	andi	r3,r2,1
  8009c8:	00804034 	movhi	r2,256
  8009cc:	10841004 	addi	r2,r2,4160
  8009d0:	10c00035 	stwio	r3,0(r2)
		puts("nothing!\n");
  8009d4:	01002034 	movhi	r4,128
  8009d8:	211be204 	addi	r4,r4,28552
  8009dc:	0800bc00 	call	800bc0 <puts>

	}
}
  8009e0:	e037883a 	mov	sp,fp
  8009e4:	dfc00117 	ldw	ra,4(sp)
  8009e8:	df000017 	ldw	fp,0(sp)
  8009ec:	dec00204 	addi	sp,sp,8
  8009f0:	f800283a 	ret

008009f4 <main>:

int main()
{
  8009f4:	defffe04 	addi	sp,sp,-8
  8009f8:	dfc00115 	stw	ra,4(sp)
  8009fc:	df000015 	stw	fp,0(sp)
  800a00:	d839883a 	mov	fp,sp
  printf("System Restarted!!!\n");
  800a04:	01002034 	movhi	r4,128
  800a08:	211be504 	addi	r4,r4,28564
  800a0c:	0800bc00 	call	800bc0 <puts>
  //unsigned char mydata[8];

  //strcpy(fifo,"######");

  Uart_init();//Register RS232_RXD
  800a10:	08006f40 	call	8006f4 <Uart_init>
  wifi_init();//initialize the wifi module
  800a14:	08006400 	call	800640 <wifi_init>


  while(1)
  {
	  //led_init();
	 test_key();
  800a18:	08007480 	call	800748 <test_key>
	 test_alarm();
  800a1c:	08007780 	call	800778 <test_alarm>
	 test_alarm_en();
  800a20:	08007a80 	call	8007a8 <test_alarm_en>
	  welcome();
  800a24:	08007d80 	call	8007d8 <welcome>
	  Alarm();
  800a28:	08008d00 	call	8008d0 <Alarm>
	  //printf("%X\n",ringbell);
	  //printf("%x",IORD_ALTERA_AVALON_PIO_DATA(MYINPUT_BASE));

	  Uart_send_n("AT",2);
  800a2c:	01002034 	movhi	r4,128
  800a30:	211bea04 	addi	r4,r4,28584
  800a34:	01400084 	movi	r5,2
  800a38:	08002640 	call	800264 <Uart_send_n>
	  Uart_send(0x0d);
  800a3c:	01000344 	movi	r4,13
  800a40:	08002000 	call	800200 <Uart_send>
	  Uart_send(0x0a);
  800a44:	01000284 	movi	r4,10
  800a48:	08002000 	call	800200 <Uart_send>

	  usleep(2000000);//2s
  800a4c:	010007f4 	movhi	r4,31
  800a50:	21212004 	addi	r4,r4,-31616
  800a54:	08041e80 	call	8041e8 <usleep>
  }
  800a58:	003fef06 	br	800a18 <main+0x24>

00800a5c <memcpy>:
  800a5c:	01c003c4 	movi	r7,15
  800a60:	2007883a 	mov	r3,r4
  800a64:	3980032e 	bgeu	r7,r6,800a74 <memcpy+0x18>
  800a68:	2904b03a 	or	r2,r5,r4
  800a6c:	108000cc 	andi	r2,r2,3
  800a70:	10000926 	beq	r2,zero,800a98 <memcpy+0x3c>
  800a74:	30000626 	beq	r6,zero,800a90 <memcpy+0x34>
  800a78:	30cd883a 	add	r6,r6,r3
  800a7c:	28800003 	ldbu	r2,0(r5)
  800a80:	29400044 	addi	r5,r5,1
  800a84:	18800005 	stb	r2,0(r3)
  800a88:	18c00044 	addi	r3,r3,1
  800a8c:	30fffb1e 	bne	r6,r3,800a7c <memcpy+0x20>
  800a90:	2005883a 	mov	r2,r4
  800a94:	f800283a 	ret
  800a98:	3811883a 	mov	r8,r7
  800a9c:	200f883a 	mov	r7,r4
  800aa0:	28c00017 	ldw	r3,0(r5)
  800aa4:	31bffc04 	addi	r6,r6,-16
  800aa8:	38c00015 	stw	r3,0(r7)
  800aac:	28800117 	ldw	r2,4(r5)
  800ab0:	38800115 	stw	r2,4(r7)
  800ab4:	28c00217 	ldw	r3,8(r5)
  800ab8:	38c00215 	stw	r3,8(r7)
  800abc:	28800317 	ldw	r2,12(r5)
  800ac0:	29400404 	addi	r5,r5,16
  800ac4:	38800315 	stw	r2,12(r7)
  800ac8:	39c00404 	addi	r7,r7,16
  800acc:	41bff436 	bltu	r8,r6,800aa0 <memcpy+0x44>
  800ad0:	008000c4 	movi	r2,3
  800ad4:	1180072e 	bgeu	r2,r6,800af4 <memcpy+0x98>
  800ad8:	1007883a 	mov	r3,r2
  800adc:	28800017 	ldw	r2,0(r5)
  800ae0:	31bfff04 	addi	r6,r6,-4
  800ae4:	29400104 	addi	r5,r5,4
  800ae8:	38800015 	stw	r2,0(r7)
  800aec:	39c00104 	addi	r7,r7,4
  800af0:	19bffa36 	bltu	r3,r6,800adc <memcpy+0x80>
  800af4:	3807883a 	mov	r3,r7
  800af8:	003fde06 	br	800a74 <memcpy+0x18>

00800afc <putchar>:
  800afc:	00802074 	movhi	r2,129
  800b00:	10a2b004 	addi	r2,r2,-30016
  800b04:	11800017 	ldw	r6,0(r2)
  800b08:	200b883a 	mov	r5,r4
  800b0c:	3009883a 	mov	r4,r6
  800b10:	31800217 	ldw	r6,8(r6)
  800b14:	0801aec1 	jmpi	801aec <_putc_r>

00800b18 <_putchar_r>:
  800b18:	21800217 	ldw	r6,8(r4)
  800b1c:	0801aec1 	jmpi	801aec <_putc_r>

00800b20 <_puts_r>:
  800b20:	defff604 	addi	sp,sp,-40
  800b24:	dc400715 	stw	r17,28(sp)
  800b28:	2023883a 	mov	r17,r4
  800b2c:	2809883a 	mov	r4,r5
  800b30:	dfc00915 	stw	ra,36(sp)
  800b34:	dcc00815 	stw	r19,32(sp)
  800b38:	2827883a 	mov	r19,r5
  800b3c:	0800bd40 	call	800bd4 <strlen>
  800b40:	89400217 	ldw	r5,8(r17)
  800b44:	00c02034 	movhi	r3,128
  800b48:	18dbeb04 	addi	r3,r3,28588
  800b4c:	01c00044 	movi	r7,1
  800b50:	12000044 	addi	r8,r2,1
  800b54:	d8c00515 	stw	r3,20(sp)
  800b58:	d9c00615 	stw	r7,24(sp)
  800b5c:	d8c00304 	addi	r3,sp,12
  800b60:	01c00084 	movi	r7,2
  800b64:	8809883a 	mov	r4,r17
  800b68:	d80d883a 	mov	r6,sp
  800b6c:	d8c00015 	stw	r3,0(sp)
  800b70:	dcc00315 	stw	r19,12(sp)
  800b74:	da000215 	stw	r8,8(sp)
  800b78:	d9c00115 	stw	r7,4(sp)
  800b7c:	d8800415 	stw	r2,16(sp)
  800b80:	0800c480 	call	800c48 <__sfvwrite_r>
  800b84:	00ffffc4 	movi	r3,-1
  800b88:	10000626 	beq	r2,zero,800ba4 <_puts_r+0x84>
  800b8c:	1805883a 	mov	r2,r3
  800b90:	dfc00917 	ldw	ra,36(sp)
  800b94:	dcc00817 	ldw	r19,32(sp)
  800b98:	dc400717 	ldw	r17,28(sp)
  800b9c:	dec00a04 	addi	sp,sp,40
  800ba0:	f800283a 	ret
  800ba4:	00c00284 	movi	r3,10
  800ba8:	1805883a 	mov	r2,r3
  800bac:	dfc00917 	ldw	ra,36(sp)
  800bb0:	dcc00817 	ldw	r19,32(sp)
  800bb4:	dc400717 	ldw	r17,28(sp)
  800bb8:	dec00a04 	addi	sp,sp,40
  800bbc:	f800283a 	ret

00800bc0 <puts>:
  800bc0:	00802074 	movhi	r2,129
  800bc4:	10a2b004 	addi	r2,r2,-30016
  800bc8:	200b883a 	mov	r5,r4
  800bcc:	11000017 	ldw	r4,0(r2)
  800bd0:	0800b201 	jmpi	800b20 <_puts_r>

00800bd4 <strlen>:
  800bd4:	208000cc 	andi	r2,r4,3
  800bd8:	2011883a 	mov	r8,r4
  800bdc:	1000161e 	bne	r2,zero,800c38 <strlen+0x64>
  800be0:	20c00017 	ldw	r3,0(r4)
  800be4:	017fbff4 	movhi	r5,65279
  800be8:	297fbfc4 	addi	r5,r5,-257
  800bec:	01e02074 	movhi	r7,32897
  800bf0:	39e02004 	addi	r7,r7,-32640
  800bf4:	1945883a 	add	r2,r3,r5
  800bf8:	11c4703a 	and	r2,r2,r7
  800bfc:	00c6303a 	nor	r3,zero,r3
  800c00:	1886703a 	and	r3,r3,r2
  800c04:	18000c1e 	bne	r3,zero,800c38 <strlen+0x64>
  800c08:	280d883a 	mov	r6,r5
  800c0c:	380b883a 	mov	r5,r7
  800c10:	21000104 	addi	r4,r4,4
  800c14:	20800017 	ldw	r2,0(r4)
  800c18:	1187883a 	add	r3,r2,r6
  800c1c:	1946703a 	and	r3,r3,r5
  800c20:	0084303a 	nor	r2,zero,r2
  800c24:	10c4703a 	and	r2,r2,r3
  800c28:	103ff926 	beq	r2,zero,800c10 <strlen+0x3c>
  800c2c:	20800007 	ldb	r2,0(r4)
  800c30:	10000326 	beq	r2,zero,800c40 <strlen+0x6c>
  800c34:	21000044 	addi	r4,r4,1
  800c38:	20800007 	ldb	r2,0(r4)
  800c3c:	103ffd1e 	bne	r2,zero,800c34 <strlen+0x60>
  800c40:	2205c83a 	sub	r2,r4,r8
  800c44:	f800283a 	ret

00800c48 <__sfvwrite_r>:
  800c48:	30800217 	ldw	r2,8(r6)
  800c4c:	defff504 	addi	sp,sp,-44
  800c50:	df000915 	stw	fp,36(sp)
  800c54:	dd800715 	stw	r22,28(sp)
  800c58:	dc800315 	stw	r18,12(sp)
  800c5c:	dfc00a15 	stw	ra,40(sp)
  800c60:	ddc00815 	stw	r23,32(sp)
  800c64:	dd400615 	stw	r21,24(sp)
  800c68:	dd000515 	stw	r20,20(sp)
  800c6c:	dcc00415 	stw	r19,16(sp)
  800c70:	dc400215 	stw	r17,8(sp)
  800c74:	dc000115 	stw	r16,4(sp)
  800c78:	302d883a 	mov	r22,r6
  800c7c:	2039883a 	mov	fp,r4
  800c80:	2825883a 	mov	r18,r5
  800c84:	10001c26 	beq	r2,zero,800cf8 <__sfvwrite_r+0xb0>
  800c88:	29c0030b 	ldhu	r7,12(r5)
  800c8c:	3880020c 	andi	r2,r7,8
  800c90:	10002726 	beq	r2,zero,800d30 <__sfvwrite_r+0xe8>
  800c94:	28800417 	ldw	r2,16(r5)
  800c98:	10002526 	beq	r2,zero,800d30 <__sfvwrite_r+0xe8>
  800c9c:	3880008c 	andi	r2,r7,2
  800ca0:	b5400017 	ldw	r21,0(r22)
  800ca4:	10002826 	beq	r2,zero,800d48 <__sfvwrite_r+0x100>
  800ca8:	0021883a 	mov	r16,zero
  800cac:	0023883a 	mov	r17,zero
  800cb0:	880d883a 	mov	r6,r17
  800cb4:	e009883a 	mov	r4,fp
  800cb8:	00810004 	movi	r2,1024
  800cbc:	80006e26 	beq	r16,zero,800e78 <__sfvwrite_r+0x230>
  800cc0:	800f883a 	mov	r7,r16
  800cc4:	91400717 	ldw	r5,28(r18)
  800cc8:	1400012e 	bgeu	r2,r16,800cd0 <__sfvwrite_r+0x88>
  800ccc:	100f883a 	mov	r7,r2
  800cd0:	90c00917 	ldw	r3,36(r18)
  800cd4:	183ee83a 	callr	r3
  800cd8:	1007883a 	mov	r3,r2
  800cdc:	80a1c83a 	sub	r16,r16,r2
  800ce0:	88a3883a 	add	r17,r17,r2
  800ce4:	00806d0e 	bge	zero,r2,800e9c <__sfvwrite_r+0x254>
  800ce8:	b0800217 	ldw	r2,8(r22)
  800cec:	10c5c83a 	sub	r2,r2,r3
  800cf0:	b0800215 	stw	r2,8(r22)
  800cf4:	103fee1e 	bne	r2,zero,800cb0 <__sfvwrite_r+0x68>
  800cf8:	0009883a 	mov	r4,zero
  800cfc:	2005883a 	mov	r2,r4
  800d00:	dfc00a17 	ldw	ra,40(sp)
  800d04:	df000917 	ldw	fp,36(sp)
  800d08:	ddc00817 	ldw	r23,32(sp)
  800d0c:	dd800717 	ldw	r22,28(sp)
  800d10:	dd400617 	ldw	r21,24(sp)
  800d14:	dd000517 	ldw	r20,20(sp)
  800d18:	dcc00417 	ldw	r19,16(sp)
  800d1c:	dc800317 	ldw	r18,12(sp)
  800d20:	dc400217 	ldw	r17,8(sp)
  800d24:	dc000117 	ldw	r16,4(sp)
  800d28:	dec00b04 	addi	sp,sp,44
  800d2c:	f800283a 	ret
  800d30:	08023840 	call	802384 <__swsetup_r>
  800d34:	1000e41e 	bne	r2,zero,8010c8 <__sfvwrite_r+0x480>
  800d38:	91c0030b 	ldhu	r7,12(r18)
  800d3c:	b5400017 	ldw	r21,0(r22)
  800d40:	3880008c 	andi	r2,r7,2
  800d44:	103fd81e 	bne	r2,zero,800ca8 <__sfvwrite_r+0x60>
  800d48:	3880004c 	andi	r2,r7,1
  800d4c:	1005003a 	cmpeq	r2,r2,zero
  800d50:	10005726 	beq	r2,zero,800eb0 <__sfvwrite_r+0x268>
  800d54:	0029883a 	mov	r20,zero
  800d58:	002f883a 	mov	r23,zero
  800d5c:	a0004226 	beq	r20,zero,800e68 <__sfvwrite_r+0x220>
  800d60:	3880800c 	andi	r2,r7,512
  800d64:	94000217 	ldw	r16,8(r18)
  800d68:	10008b26 	beq	r2,zero,800f98 <__sfvwrite_r+0x350>
  800d6c:	800d883a 	mov	r6,r16
  800d70:	a400a536 	bltu	r20,r16,801008 <__sfvwrite_r+0x3c0>
  800d74:	3881200c 	andi	r2,r7,1152
  800d78:	10002726 	beq	r2,zero,800e18 <__sfvwrite_r+0x1d0>
  800d7c:	90800517 	ldw	r2,20(r18)
  800d80:	92000417 	ldw	r8,16(r18)
  800d84:	91400017 	ldw	r5,0(r18)
  800d88:	1087883a 	add	r3,r2,r2
  800d8c:	1887883a 	add	r3,r3,r2
  800d90:	1808d7fa 	srli	r4,r3,31
  800d94:	2a21c83a 	sub	r16,r5,r8
  800d98:	80800044 	addi	r2,r16,1
  800d9c:	20c9883a 	add	r4,r4,r3
  800da0:	2027d07a 	srai	r19,r4,1
  800da4:	a085883a 	add	r2,r20,r2
  800da8:	980d883a 	mov	r6,r19
  800dac:	9880022e 	bgeu	r19,r2,800db8 <__sfvwrite_r+0x170>
  800db0:	1027883a 	mov	r19,r2
  800db4:	100d883a 	mov	r6,r2
  800db8:	3881000c 	andi	r2,r7,1024
  800dbc:	1000b826 	beq	r2,zero,8010a0 <__sfvwrite_r+0x458>
  800dc0:	300b883a 	mov	r5,r6
  800dc4:	e009883a 	mov	r4,fp
  800dc8:	08010e40 	call	8010e4 <_malloc_r>
  800dcc:	10003126 	beq	r2,zero,800e94 <__sfvwrite_r+0x24c>
  800dd0:	91400417 	ldw	r5,16(r18)
  800dd4:	1009883a 	mov	r4,r2
  800dd8:	800d883a 	mov	r6,r16
  800ddc:	1023883a 	mov	r17,r2
  800de0:	0800a5c0 	call	800a5c <memcpy>
  800de4:	90c0030b 	ldhu	r3,12(r18)
  800de8:	00beffc4 	movi	r2,-1025
  800dec:	1886703a 	and	r3,r3,r2
  800df0:	18c02014 	ori	r3,r3,128
  800df4:	90c0030d 	sth	r3,12(r18)
  800df8:	9c07c83a 	sub	r3,r19,r16
  800dfc:	8c05883a 	add	r2,r17,r16
  800e00:	a00d883a 	mov	r6,r20
  800e04:	a021883a 	mov	r16,r20
  800e08:	90800015 	stw	r2,0(r18)
  800e0c:	90c00215 	stw	r3,8(r18)
  800e10:	94400415 	stw	r17,16(r18)
  800e14:	94c00515 	stw	r19,20(r18)
  800e18:	91000017 	ldw	r4,0(r18)
  800e1c:	b80b883a 	mov	r5,r23
  800e20:	a023883a 	mov	r17,r20
  800e24:	08019080 	call	801908 <memmove>
  800e28:	90c00217 	ldw	r3,8(r18)
  800e2c:	90800017 	ldw	r2,0(r18)
  800e30:	a027883a 	mov	r19,r20
  800e34:	1c07c83a 	sub	r3,r3,r16
  800e38:	1405883a 	add	r2,r2,r16
  800e3c:	90c00215 	stw	r3,8(r18)
  800e40:	a021883a 	mov	r16,r20
  800e44:	90800015 	stw	r2,0(r18)
  800e48:	b0800217 	ldw	r2,8(r22)
  800e4c:	1405c83a 	sub	r2,r2,r16
  800e50:	b0800215 	stw	r2,8(r22)
  800e54:	103fa826 	beq	r2,zero,800cf8 <__sfvwrite_r+0xb0>
  800e58:	a469c83a 	sub	r20,r20,r17
  800e5c:	91c0030b 	ldhu	r7,12(r18)
  800e60:	bcef883a 	add	r23,r23,r19
  800e64:	a03fbe1e 	bne	r20,zero,800d60 <__sfvwrite_r+0x118>
  800e68:	adc00017 	ldw	r23,0(r21)
  800e6c:	ad000117 	ldw	r20,4(r21)
  800e70:	ad400204 	addi	r21,r21,8
  800e74:	003fb906 	br	800d5c <__sfvwrite_r+0x114>
  800e78:	ac400017 	ldw	r17,0(r21)
  800e7c:	ac000117 	ldw	r16,4(r21)
  800e80:	ad400204 	addi	r21,r21,8
  800e84:	003f8a06 	br	800cb0 <__sfvwrite_r+0x68>
  800e88:	91400417 	ldw	r5,16(r18)
  800e8c:	e009883a 	mov	r4,fp
  800e90:	0802adc0 	call	802adc <_free_r>
  800e94:	00800304 	movi	r2,12
  800e98:	e0800015 	stw	r2,0(fp)
  800e9c:	9080030b 	ldhu	r2,12(r18)
  800ea0:	013fffc4 	movi	r4,-1
  800ea4:	10801014 	ori	r2,r2,64
  800ea8:	9080030d 	sth	r2,12(r18)
  800eac:	003f9306 	br	800cfc <__sfvwrite_r+0xb4>
  800eb0:	0027883a 	mov	r19,zero
  800eb4:	002f883a 	mov	r23,zero
  800eb8:	d8000015 	stw	zero,0(sp)
  800ebc:	0029883a 	mov	r20,zero
  800ec0:	98001e26 	beq	r19,zero,800f3c <__sfvwrite_r+0x2f4>
  800ec4:	d8c00017 	ldw	r3,0(sp)
  800ec8:	1804c03a 	cmpne	r2,r3,zero
  800ecc:	10005e26 	beq	r2,zero,801048 <__sfvwrite_r+0x400>
  800ed0:	9821883a 	mov	r16,r19
  800ed4:	a4c0012e 	bgeu	r20,r19,800edc <__sfvwrite_r+0x294>
  800ed8:	a021883a 	mov	r16,r20
  800edc:	91000017 	ldw	r4,0(r18)
  800ee0:	90800417 	ldw	r2,16(r18)
  800ee4:	91800217 	ldw	r6,8(r18)
  800ee8:	91c00517 	ldw	r7,20(r18)
  800eec:	1100022e 	bgeu	r2,r4,800ef8 <__sfvwrite_r+0x2b0>
  800ef0:	31e3883a 	add	r17,r6,r7
  800ef4:	8c001616 	blt	r17,r16,800f50 <__sfvwrite_r+0x308>
  800ef8:	81c03816 	blt	r16,r7,800fdc <__sfvwrite_r+0x394>
  800efc:	90c00917 	ldw	r3,36(r18)
  800f00:	91400717 	ldw	r5,28(r18)
  800f04:	e009883a 	mov	r4,fp
  800f08:	b80d883a 	mov	r6,r23
  800f0c:	183ee83a 	callr	r3
  800f10:	1023883a 	mov	r17,r2
  800f14:	00bfe10e 	bge	zero,r2,800e9c <__sfvwrite_r+0x254>
  800f18:	a469c83a 	sub	r20,r20,r17
  800f1c:	a0001826 	beq	r20,zero,800f80 <__sfvwrite_r+0x338>
  800f20:	b0800217 	ldw	r2,8(r22)
  800f24:	1445c83a 	sub	r2,r2,r17
  800f28:	b0800215 	stw	r2,8(r22)
  800f2c:	103f7226 	beq	r2,zero,800cf8 <__sfvwrite_r+0xb0>
  800f30:	9c67c83a 	sub	r19,r19,r17
  800f34:	bc6f883a 	add	r23,r23,r17
  800f38:	983fe21e 	bne	r19,zero,800ec4 <__sfvwrite_r+0x27c>
  800f3c:	adc00017 	ldw	r23,0(r21)
  800f40:	acc00117 	ldw	r19,4(r21)
  800f44:	ad400204 	addi	r21,r21,8
  800f48:	d8000015 	stw	zero,0(sp)
  800f4c:	003fdc06 	br	800ec0 <__sfvwrite_r+0x278>
  800f50:	b80b883a 	mov	r5,r23
  800f54:	880d883a 	mov	r6,r17
  800f58:	08019080 	call	801908 <memmove>
  800f5c:	90c00017 	ldw	r3,0(r18)
  800f60:	e009883a 	mov	r4,fp
  800f64:	900b883a 	mov	r5,r18
  800f68:	1c47883a 	add	r3,r3,r17
  800f6c:	90c00015 	stw	r3,0(r18)
  800f70:	08024c00 	call	8024c0 <_fflush_r>
  800f74:	103fc91e 	bne	r2,zero,800e9c <__sfvwrite_r+0x254>
  800f78:	a469c83a 	sub	r20,r20,r17
  800f7c:	a03fe81e 	bne	r20,zero,800f20 <__sfvwrite_r+0x2d8>
  800f80:	e009883a 	mov	r4,fp
  800f84:	900b883a 	mov	r5,r18
  800f88:	08024c00 	call	8024c0 <_fflush_r>
  800f8c:	103fc31e 	bne	r2,zero,800e9c <__sfvwrite_r+0x254>
  800f90:	d8000015 	stw	zero,0(sp)
  800f94:	003fe206 	br	800f20 <__sfvwrite_r+0x2d8>
  800f98:	91000017 	ldw	r4,0(r18)
  800f9c:	90800417 	ldw	r2,16(r18)
  800fa0:	1100022e 	bgeu	r2,r4,800fac <__sfvwrite_r+0x364>
  800fa4:	8023883a 	mov	r17,r16
  800fa8:	85003136 	bltu	r16,r20,801070 <__sfvwrite_r+0x428>
  800fac:	91c00517 	ldw	r7,20(r18)
  800fb0:	a1c01836 	bltu	r20,r7,801014 <__sfvwrite_r+0x3cc>
  800fb4:	90c00917 	ldw	r3,36(r18)
  800fb8:	91400717 	ldw	r5,28(r18)
  800fbc:	e009883a 	mov	r4,fp
  800fc0:	b80d883a 	mov	r6,r23
  800fc4:	183ee83a 	callr	r3
  800fc8:	1021883a 	mov	r16,r2
  800fcc:	00bfb30e 	bge	zero,r2,800e9c <__sfvwrite_r+0x254>
  800fd0:	1023883a 	mov	r17,r2
  800fd4:	1027883a 	mov	r19,r2
  800fd8:	003f9b06 	br	800e48 <__sfvwrite_r+0x200>
  800fdc:	b80b883a 	mov	r5,r23
  800fe0:	800d883a 	mov	r6,r16
  800fe4:	08019080 	call	801908 <memmove>
  800fe8:	90c00217 	ldw	r3,8(r18)
  800fec:	90800017 	ldw	r2,0(r18)
  800ff0:	8023883a 	mov	r17,r16
  800ff4:	1c07c83a 	sub	r3,r3,r16
  800ff8:	1405883a 	add	r2,r2,r16
  800ffc:	90c00215 	stw	r3,8(r18)
  801000:	90800015 	stw	r2,0(r18)
  801004:	003fc406 	br	800f18 <__sfvwrite_r+0x2d0>
  801008:	a00d883a 	mov	r6,r20
  80100c:	a021883a 	mov	r16,r20
  801010:	003f8106 	br	800e18 <__sfvwrite_r+0x1d0>
  801014:	b80b883a 	mov	r5,r23
  801018:	a00d883a 	mov	r6,r20
  80101c:	08019080 	call	801908 <memmove>
  801020:	90c00217 	ldw	r3,8(r18)
  801024:	90800017 	ldw	r2,0(r18)
  801028:	a021883a 	mov	r16,r20
  80102c:	1d07c83a 	sub	r3,r3,r20
  801030:	1505883a 	add	r2,r2,r20
  801034:	a023883a 	mov	r17,r20
  801038:	a027883a 	mov	r19,r20
  80103c:	90c00215 	stw	r3,8(r18)
  801040:	90800015 	stw	r2,0(r18)
  801044:	003f8006 	br	800e48 <__sfvwrite_r+0x200>
  801048:	b809883a 	mov	r4,r23
  80104c:	01400284 	movi	r5,10
  801050:	980d883a 	mov	r6,r19
  801054:	08018240 	call	801824 <memchr>
  801058:	10001726 	beq	r2,zero,8010b8 <__sfvwrite_r+0x470>
  80105c:	15c5c83a 	sub	r2,r2,r23
  801060:	15000044 	addi	r20,r2,1
  801064:	00800044 	movi	r2,1
  801068:	d8800015 	stw	r2,0(sp)
  80106c:	003f9806 	br	800ed0 <__sfvwrite_r+0x288>
  801070:	b80b883a 	mov	r5,r23
  801074:	800d883a 	mov	r6,r16
  801078:	08019080 	call	801908 <memmove>
  80107c:	90c00017 	ldw	r3,0(r18)
  801080:	e009883a 	mov	r4,fp
  801084:	900b883a 	mov	r5,r18
  801088:	1c07883a 	add	r3,r3,r16
  80108c:	90c00015 	stw	r3,0(r18)
  801090:	8027883a 	mov	r19,r16
  801094:	08024c00 	call	8024c0 <_fflush_r>
  801098:	103f6b26 	beq	r2,zero,800e48 <__sfvwrite_r+0x200>
  80109c:	003f7f06 	br	800e9c <__sfvwrite_r+0x254>
  8010a0:	400b883a 	mov	r5,r8
  8010a4:	e009883a 	mov	r4,fp
  8010a8:	0801bd40 	call	801bd4 <_realloc_r>
  8010ac:	103f7626 	beq	r2,zero,800e88 <__sfvwrite_r+0x240>
  8010b0:	1023883a 	mov	r17,r2
  8010b4:	003f5006 	br	800df8 <__sfvwrite_r+0x1b0>
  8010b8:	00c00044 	movi	r3,1
  8010bc:	9d000044 	addi	r20,r19,1
  8010c0:	d8c00015 	stw	r3,0(sp)
  8010c4:	003f8206 	br	800ed0 <__sfvwrite_r+0x288>
  8010c8:	9080030b 	ldhu	r2,12(r18)
  8010cc:	00c00244 	movi	r3,9
  8010d0:	013fffc4 	movi	r4,-1
  8010d4:	10801014 	ori	r2,r2,64
  8010d8:	9080030d 	sth	r2,12(r18)
  8010dc:	e0c00015 	stw	r3,0(fp)
  8010e0:	003f0606 	br	800cfc <__sfvwrite_r+0xb4>

008010e4 <_malloc_r>:
  8010e4:	defff604 	addi	sp,sp,-40
  8010e8:	28c002c4 	addi	r3,r5,11
  8010ec:	00800584 	movi	r2,22
  8010f0:	dc800215 	stw	r18,8(sp)
  8010f4:	dfc00915 	stw	ra,36(sp)
  8010f8:	df000815 	stw	fp,32(sp)
  8010fc:	ddc00715 	stw	r23,28(sp)
  801100:	dd800615 	stw	r22,24(sp)
  801104:	dd400515 	stw	r21,20(sp)
  801108:	dd000415 	stw	r20,16(sp)
  80110c:	dcc00315 	stw	r19,12(sp)
  801110:	dc400115 	stw	r17,4(sp)
  801114:	dc000015 	stw	r16,0(sp)
  801118:	2025883a 	mov	r18,r4
  80111c:	10c01236 	bltu	r2,r3,801168 <_malloc_r+0x84>
  801120:	04400404 	movi	r17,16
  801124:	8940142e 	bgeu	r17,r5,801178 <_malloc_r+0x94>
  801128:	00800304 	movi	r2,12
  80112c:	0007883a 	mov	r3,zero
  801130:	90800015 	stw	r2,0(r18)
  801134:	1805883a 	mov	r2,r3
  801138:	dfc00917 	ldw	ra,36(sp)
  80113c:	df000817 	ldw	fp,32(sp)
  801140:	ddc00717 	ldw	r23,28(sp)
  801144:	dd800617 	ldw	r22,24(sp)
  801148:	dd400517 	ldw	r21,20(sp)
  80114c:	dd000417 	ldw	r20,16(sp)
  801150:	dcc00317 	ldw	r19,12(sp)
  801154:	dc800217 	ldw	r18,8(sp)
  801158:	dc400117 	ldw	r17,4(sp)
  80115c:	dc000017 	ldw	r16,0(sp)
  801160:	dec00a04 	addi	sp,sp,40
  801164:	f800283a 	ret
  801168:	00bffe04 	movi	r2,-8
  80116c:	18a2703a 	and	r17,r3,r2
  801170:	883fed16 	blt	r17,zero,801128 <_malloc_r+0x44>
  801174:	897fec36 	bltu	r17,r5,801128 <_malloc_r+0x44>
  801178:	9009883a 	mov	r4,r18
  80117c:	0803f0c0 	call	803f0c <__malloc_lock>
  801180:	00807dc4 	movi	r2,503
  801184:	14402b2e 	bgeu	r2,r17,801234 <_malloc_r+0x150>
  801188:	8806d27a 	srli	r3,r17,9
  80118c:	18003f1e 	bne	r3,zero,80128c <_malloc_r+0x1a8>
  801190:	880cd0fa 	srli	r6,r17,3
  801194:	300490fa 	slli	r2,r6,3
  801198:	02c02034 	movhi	r11,128
  80119c:	5adcfb04 	addi	r11,r11,29676
  8011a0:	12cb883a 	add	r5,r2,r11
  8011a4:	2c000317 	ldw	r16,12(r5)
  8011a8:	580f883a 	mov	r7,r11
  8011ac:	2c00041e 	bne	r5,r16,8011c0 <_malloc_r+0xdc>
  8011b0:	00000a06 	br	8011dc <_malloc_r+0xf8>
  8011b4:	1800860e 	bge	r3,zero,8013d0 <_malloc_r+0x2ec>
  8011b8:	84000317 	ldw	r16,12(r16)
  8011bc:	2c000726 	beq	r5,r16,8011dc <_malloc_r+0xf8>
  8011c0:	80800117 	ldw	r2,4(r16)
  8011c4:	00ffff04 	movi	r3,-4
  8011c8:	10c8703a 	and	r4,r2,r3
  8011cc:	2447c83a 	sub	r3,r4,r17
  8011d0:	008003c4 	movi	r2,15
  8011d4:	10fff70e 	bge	r2,r3,8011b4 <_malloc_r+0xd0>
  8011d8:	31bfffc4 	addi	r6,r6,-1
  8011dc:	32400044 	addi	r9,r6,1
  8011e0:	02802034 	movhi	r10,128
  8011e4:	529cfd04 	addi	r10,r10,29684
  8011e8:	54000217 	ldw	r16,8(r10)
  8011ec:	8280a026 	beq	r16,r10,801470 <_malloc_r+0x38c>
  8011f0:	80800117 	ldw	r2,4(r16)
  8011f4:	00ffff04 	movi	r3,-4
  8011f8:	10ca703a 	and	r5,r2,r3
  8011fc:	2c4dc83a 	sub	r6,r5,r17
  801200:	008003c4 	movi	r2,15
  801204:	11808316 	blt	r2,r6,801414 <_malloc_r+0x330>
  801208:	52800315 	stw	r10,12(r10)
  80120c:	52800215 	stw	r10,8(r10)
  801210:	30002916 	blt	r6,zero,8012b8 <_malloc_r+0x1d4>
  801214:	8147883a 	add	r3,r16,r5
  801218:	18800117 	ldw	r2,4(r3)
  80121c:	9009883a 	mov	r4,r18
  801220:	10800054 	ori	r2,r2,1
  801224:	18800115 	stw	r2,4(r3)
  801228:	0803f2c0 	call	803f2c <__malloc_unlock>
  80122c:	80c00204 	addi	r3,r16,8
  801230:	003fc006 	br	801134 <_malloc_r+0x50>
  801234:	02c02034 	movhi	r11,128
  801238:	5adcfb04 	addi	r11,r11,29676
  80123c:	8ac5883a 	add	r2,r17,r11
  801240:	14000317 	ldw	r16,12(r2)
  801244:	580f883a 	mov	r7,r11
  801248:	8806d0fa 	srli	r3,r17,3
  80124c:	14006c26 	beq	r2,r16,801400 <_malloc_r+0x31c>
  801250:	80c00117 	ldw	r3,4(r16)
  801254:	00bfff04 	movi	r2,-4
  801258:	81800317 	ldw	r6,12(r16)
  80125c:	1886703a 	and	r3,r3,r2
  801260:	80c7883a 	add	r3,r16,r3
  801264:	18800117 	ldw	r2,4(r3)
  801268:	81400217 	ldw	r5,8(r16)
  80126c:	9009883a 	mov	r4,r18
  801270:	10800054 	ori	r2,r2,1
  801274:	18800115 	stw	r2,4(r3)
  801278:	31400215 	stw	r5,8(r6)
  80127c:	29800315 	stw	r6,12(r5)
  801280:	0803f2c0 	call	803f2c <__malloc_unlock>
  801284:	80c00204 	addi	r3,r16,8
  801288:	003faa06 	br	801134 <_malloc_r+0x50>
  80128c:	00800104 	movi	r2,4
  801290:	10c0052e 	bgeu	r2,r3,8012a8 <_malloc_r+0x1c4>
  801294:	00800504 	movi	r2,20
  801298:	10c07836 	bltu	r2,r3,80147c <_malloc_r+0x398>
  80129c:	198016c4 	addi	r6,r3,91
  8012a0:	300490fa 	slli	r2,r6,3
  8012a4:	003fbc06 	br	801198 <_malloc_r+0xb4>
  8012a8:	8804d1ba 	srli	r2,r17,6
  8012ac:	11800e04 	addi	r6,r2,56
  8012b0:	300490fa 	slli	r2,r6,3
  8012b4:	003fb806 	br	801198 <_malloc_r+0xb4>
  8012b8:	00807fc4 	movi	r2,511
  8012bc:	1140bb36 	bltu	r2,r5,8015ac <_malloc_r+0x4c8>
  8012c0:	2806d0fa 	srli	r3,r5,3
  8012c4:	573ffe04 	addi	fp,r10,-8
  8012c8:	00800044 	movi	r2,1
  8012cc:	180890fa 	slli	r4,r3,3
  8012d0:	1807d0ba 	srai	r3,r3,2
  8012d4:	e1c00117 	ldw	r7,4(fp)
  8012d8:	5909883a 	add	r4,r11,r4
  8012dc:	21400217 	ldw	r5,8(r4)
  8012e0:	10c4983a 	sll	r2,r2,r3
  8012e4:	81000315 	stw	r4,12(r16)
  8012e8:	81400215 	stw	r5,8(r16)
  8012ec:	388eb03a 	or	r7,r7,r2
  8012f0:	2c000315 	stw	r16,12(r5)
  8012f4:	24000215 	stw	r16,8(r4)
  8012f8:	e1c00115 	stw	r7,4(fp)
  8012fc:	4807883a 	mov	r3,r9
  801300:	4800cd16 	blt	r9,zero,801638 <_malloc_r+0x554>
  801304:	1807d0ba 	srai	r3,r3,2
  801308:	00800044 	movi	r2,1
  80130c:	10c8983a 	sll	r4,r2,r3
  801310:	39004436 	bltu	r7,r4,801424 <_malloc_r+0x340>
  801314:	21c4703a 	and	r2,r4,r7
  801318:	10000a1e 	bne	r2,zero,801344 <_malloc_r+0x260>
  80131c:	2109883a 	add	r4,r4,r4
  801320:	00bfff04 	movi	r2,-4
  801324:	4884703a 	and	r2,r9,r2
  801328:	3906703a 	and	r3,r7,r4
  80132c:	12400104 	addi	r9,r2,4
  801330:	1800041e 	bne	r3,zero,801344 <_malloc_r+0x260>
  801334:	2109883a 	add	r4,r4,r4
  801338:	3904703a 	and	r2,r7,r4
  80133c:	4a400104 	addi	r9,r9,4
  801340:	103ffc26 	beq	r2,zero,801334 <_malloc_r+0x250>
  801344:	480490fa 	slli	r2,r9,3
  801348:	4819883a 	mov	r12,r9
  80134c:	023fff04 	movi	r8,-4
  801350:	589b883a 	add	r13,r11,r2
  801354:	6807883a 	mov	r3,r13
  801358:	014003c4 	movi	r5,15
  80135c:	1c000317 	ldw	r16,12(r3)
  801360:	1c00041e 	bne	r3,r16,801374 <_malloc_r+0x290>
  801364:	0000a706 	br	801604 <_malloc_r+0x520>
  801368:	3000ab0e 	bge	r6,zero,801618 <_malloc_r+0x534>
  80136c:	84000317 	ldw	r16,12(r16)
  801370:	1c00a426 	beq	r3,r16,801604 <_malloc_r+0x520>
  801374:	80800117 	ldw	r2,4(r16)
  801378:	1204703a 	and	r2,r2,r8
  80137c:	144dc83a 	sub	r6,r2,r17
  801380:	29bff90e 	bge	r5,r6,801368 <_malloc_r+0x284>
  801384:	81000317 	ldw	r4,12(r16)
  801388:	80c00217 	ldw	r3,8(r16)
  80138c:	89400054 	ori	r5,r17,1
  801390:	8445883a 	add	r2,r16,r17
  801394:	20c00215 	stw	r3,8(r4)
  801398:	19000315 	stw	r4,12(r3)
  80139c:	81400115 	stw	r5,4(r16)
  8013a0:	1187883a 	add	r3,r2,r6
  8013a4:	31000054 	ori	r4,r6,1
  8013a8:	50800315 	stw	r2,12(r10)
  8013ac:	50800215 	stw	r2,8(r10)
  8013b0:	19800015 	stw	r6,0(r3)
  8013b4:	11000115 	stw	r4,4(r2)
  8013b8:	12800215 	stw	r10,8(r2)
  8013bc:	12800315 	stw	r10,12(r2)
  8013c0:	9009883a 	mov	r4,r18
  8013c4:	0803f2c0 	call	803f2c <__malloc_unlock>
  8013c8:	80c00204 	addi	r3,r16,8
  8013cc:	003f5906 	br	801134 <_malloc_r+0x50>
  8013d0:	8109883a 	add	r4,r16,r4
  8013d4:	20800117 	ldw	r2,4(r4)
  8013d8:	80c00217 	ldw	r3,8(r16)
  8013dc:	81400317 	ldw	r5,12(r16)
  8013e0:	10800054 	ori	r2,r2,1
  8013e4:	20800115 	stw	r2,4(r4)
  8013e8:	28c00215 	stw	r3,8(r5)
  8013ec:	19400315 	stw	r5,12(r3)
  8013f0:	9009883a 	mov	r4,r18
  8013f4:	0803f2c0 	call	803f2c <__malloc_unlock>
  8013f8:	80c00204 	addi	r3,r16,8
  8013fc:	003f4d06 	br	801134 <_malloc_r+0x50>
  801400:	80800204 	addi	r2,r16,8
  801404:	14000317 	ldw	r16,12(r2)
  801408:	143f911e 	bne	r2,r16,801250 <_malloc_r+0x16c>
  80140c:	1a400084 	addi	r9,r3,2
  801410:	003f7306 	br	8011e0 <_malloc_r+0xfc>
  801414:	88c00054 	ori	r3,r17,1
  801418:	8445883a 	add	r2,r16,r17
  80141c:	80c00115 	stw	r3,4(r16)
  801420:	003fdf06 	br	8013a0 <_malloc_r+0x2bc>
  801424:	e4000217 	ldw	r16,8(fp)
  801428:	00bfff04 	movi	r2,-4
  80142c:	80c00117 	ldw	r3,4(r16)
  801430:	802d883a 	mov	r22,r16
  801434:	18aa703a 	and	r21,r3,r2
  801438:	ac401636 	bltu	r21,r17,801494 <_malloc_r+0x3b0>
  80143c:	ac49c83a 	sub	r4,r21,r17
  801440:	008003c4 	movi	r2,15
  801444:	1100130e 	bge	r2,r4,801494 <_malloc_r+0x3b0>
  801448:	88800054 	ori	r2,r17,1
  80144c:	8447883a 	add	r3,r16,r17
  801450:	80800115 	stw	r2,4(r16)
  801454:	20800054 	ori	r2,r4,1
  801458:	18800115 	stw	r2,4(r3)
  80145c:	e0c00215 	stw	r3,8(fp)
  801460:	9009883a 	mov	r4,r18
  801464:	0803f2c0 	call	803f2c <__malloc_unlock>
  801468:	80c00204 	addi	r3,r16,8
  80146c:	003f3106 	br	801134 <_malloc_r+0x50>
  801470:	39c00117 	ldw	r7,4(r7)
  801474:	573ffe04 	addi	fp,r10,-8
  801478:	003fa006 	br	8012fc <_malloc_r+0x218>
  80147c:	00801504 	movi	r2,84
  801480:	10c06736 	bltu	r2,r3,801620 <_malloc_r+0x53c>
  801484:	8804d33a 	srli	r2,r17,12
  801488:	11801b84 	addi	r6,r2,110
  80148c:	300490fa 	slli	r2,r6,3
  801490:	003f4106 	br	801198 <_malloc_r+0xb4>
  801494:	d0a6d617 	ldw	r2,-25768(gp)
  801498:	d0e00317 	ldw	r3,-32756(gp)
  80149c:	053fffc4 	movi	r20,-1
  8014a0:	10800404 	addi	r2,r2,16
  8014a4:	88a7883a 	add	r19,r17,r2
  8014a8:	1d000326 	beq	r3,r20,8014b8 <_malloc_r+0x3d4>
  8014ac:	98c3ffc4 	addi	r3,r19,4095
  8014b0:	00bc0004 	movi	r2,-4096
  8014b4:	18a6703a 	and	r19,r3,r2
  8014b8:	9009883a 	mov	r4,r18
  8014bc:	980b883a 	mov	r5,r19
  8014c0:	08021c80 	call	8021c8 <_sbrk_r>
  8014c4:	1009883a 	mov	r4,r2
  8014c8:	15000426 	beq	r2,r20,8014dc <_malloc_r+0x3f8>
  8014cc:	854b883a 	add	r5,r16,r21
  8014d0:	1029883a 	mov	r20,r2
  8014d4:	11405a2e 	bgeu	r2,r5,801640 <_malloc_r+0x55c>
  8014d8:	87000c26 	beq	r16,fp,80150c <_malloc_r+0x428>
  8014dc:	e4000217 	ldw	r16,8(fp)
  8014e0:	80c00117 	ldw	r3,4(r16)
  8014e4:	00bfff04 	movi	r2,-4
  8014e8:	1884703a 	and	r2,r3,r2
  8014ec:	14400336 	bltu	r2,r17,8014fc <_malloc_r+0x418>
  8014f0:	1449c83a 	sub	r4,r2,r17
  8014f4:	008003c4 	movi	r2,15
  8014f8:	113fd316 	blt	r2,r4,801448 <_malloc_r+0x364>
  8014fc:	9009883a 	mov	r4,r18
  801500:	0803f2c0 	call	803f2c <__malloc_unlock>
  801504:	0007883a 	mov	r3,zero
  801508:	003f0a06 	br	801134 <_malloc_r+0x50>
  80150c:	05c02074 	movhi	r23,129
  801510:	bde99004 	addi	r23,r23,-22976
  801514:	b8800017 	ldw	r2,0(r23)
  801518:	988d883a 	add	r6,r19,r2
  80151c:	b9800015 	stw	r6,0(r23)
  801520:	d0e00317 	ldw	r3,-32756(gp)
  801524:	00bfffc4 	movi	r2,-1
  801528:	18808e26 	beq	r3,r2,801764 <_malloc_r+0x680>
  80152c:	2145c83a 	sub	r2,r4,r5
  801530:	3085883a 	add	r2,r6,r2
  801534:	b8800015 	stw	r2,0(r23)
  801538:	20c001cc 	andi	r3,r4,7
  80153c:	18005f1e 	bne	r3,zero,8016bc <_malloc_r+0x5d8>
  801540:	000b883a 	mov	r5,zero
  801544:	a4c5883a 	add	r2,r20,r19
  801548:	1083ffcc 	andi	r2,r2,4095
  80154c:	00c40004 	movi	r3,4096
  801550:	1887c83a 	sub	r3,r3,r2
  801554:	28e7883a 	add	r19,r5,r3
  801558:	9009883a 	mov	r4,r18
  80155c:	980b883a 	mov	r5,r19
  801560:	08021c80 	call	8021c8 <_sbrk_r>
  801564:	1007883a 	mov	r3,r2
  801568:	00bfffc4 	movi	r2,-1
  80156c:	18807a26 	beq	r3,r2,801758 <_malloc_r+0x674>
  801570:	1d05c83a 	sub	r2,r3,r20
  801574:	9885883a 	add	r2,r19,r2
  801578:	10c00054 	ori	r3,r2,1
  80157c:	b8800017 	ldw	r2,0(r23)
  801580:	a021883a 	mov	r16,r20
  801584:	a0c00115 	stw	r3,4(r20)
  801588:	9885883a 	add	r2,r19,r2
  80158c:	b8800015 	stw	r2,0(r23)
  801590:	e5000215 	stw	r20,8(fp)
  801594:	b7003626 	beq	r22,fp,801670 <_malloc_r+0x58c>
  801598:	018003c4 	movi	r6,15
  80159c:	35404b36 	bltu	r6,r21,8016cc <_malloc_r+0x5e8>
  8015a0:	00800044 	movi	r2,1
  8015a4:	a0800115 	stw	r2,4(r20)
  8015a8:	003fcd06 	br	8014e0 <_malloc_r+0x3fc>
  8015ac:	2808d27a 	srli	r4,r5,9
  8015b0:	2000371e 	bne	r4,zero,801690 <_malloc_r+0x5ac>
  8015b4:	2808d0fa 	srli	r4,r5,3
  8015b8:	200690fa 	slli	r3,r4,3
  8015bc:	1ad1883a 	add	r8,r3,r11
  8015c0:	41800217 	ldw	r6,8(r8)
  8015c4:	41805b26 	beq	r8,r6,801734 <_malloc_r+0x650>
  8015c8:	30800117 	ldw	r2,4(r6)
  8015cc:	00ffff04 	movi	r3,-4
  8015d0:	10c4703a 	and	r2,r2,r3
  8015d4:	2880022e 	bgeu	r5,r2,8015e0 <_malloc_r+0x4fc>
  8015d8:	31800217 	ldw	r6,8(r6)
  8015dc:	41bffa1e 	bne	r8,r6,8015c8 <_malloc_r+0x4e4>
  8015e0:	32000317 	ldw	r8,12(r6)
  8015e4:	39c00117 	ldw	r7,4(r7)
  8015e8:	82000315 	stw	r8,12(r16)
  8015ec:	81800215 	stw	r6,8(r16)
  8015f0:	07002034 	movhi	fp,128
  8015f4:	e71cfb04 	addi	fp,fp,29676
  8015f8:	34000315 	stw	r16,12(r6)
  8015fc:	44000215 	stw	r16,8(r8)
  801600:	003f3e06 	br	8012fc <_malloc_r+0x218>
  801604:	63000044 	addi	r12,r12,1
  801608:	608000cc 	andi	r2,r12,3
  80160c:	10005d26 	beq	r2,zero,801784 <_malloc_r+0x6a0>
  801610:	18c00204 	addi	r3,r3,8
  801614:	003f5106 	br	80135c <_malloc_r+0x278>
  801618:	8089883a 	add	r4,r16,r2
  80161c:	003f6d06 	br	8013d4 <_malloc_r+0x2f0>
  801620:	00805504 	movi	r2,340
  801624:	10c02036 	bltu	r2,r3,8016a8 <_malloc_r+0x5c4>
  801628:	8804d3fa 	srli	r2,r17,15
  80162c:	11801dc4 	addi	r6,r2,119
  801630:	300490fa 	slli	r2,r6,3
  801634:	003ed806 	br	801198 <_malloc_r+0xb4>
  801638:	48c000c4 	addi	r3,r9,3
  80163c:	003f3106 	br	801304 <_malloc_r+0x220>
  801640:	05c02074 	movhi	r23,129
  801644:	bde99004 	addi	r23,r23,-22976
  801648:	b8800017 	ldw	r2,0(r23)
  80164c:	988d883a 	add	r6,r19,r2
  801650:	b9800015 	stw	r6,0(r23)
  801654:	293fb21e 	bne	r5,r4,801520 <_malloc_r+0x43c>
  801658:	2083ffcc 	andi	r2,r4,4095
  80165c:	103fb01e 	bne	r2,zero,801520 <_malloc_r+0x43c>
  801660:	e4000217 	ldw	r16,8(fp)
  801664:	9d45883a 	add	r2,r19,r21
  801668:	10800054 	ori	r2,r2,1
  80166c:	80800115 	stw	r2,4(r16)
  801670:	b8c00017 	ldw	r3,0(r23)
  801674:	d0a6d717 	ldw	r2,-25764(gp)
  801678:	10c0012e 	bgeu	r2,r3,801680 <_malloc_r+0x59c>
  80167c:	d0e6d715 	stw	r3,-25764(gp)
  801680:	d0a6d817 	ldw	r2,-25760(gp)
  801684:	10ff962e 	bgeu	r2,r3,8014e0 <_malloc_r+0x3fc>
  801688:	d0e6d815 	stw	r3,-25760(gp)
  80168c:	003f9406 	br	8014e0 <_malloc_r+0x3fc>
  801690:	00800104 	movi	r2,4
  801694:	11001e36 	bltu	r2,r4,801710 <_malloc_r+0x62c>
  801698:	2804d1ba 	srli	r2,r5,6
  80169c:	11000e04 	addi	r4,r2,56
  8016a0:	200690fa 	slli	r3,r4,3
  8016a4:	003fc506 	br	8015bc <_malloc_r+0x4d8>
  8016a8:	00815504 	movi	r2,1364
  8016ac:	10c01d2e 	bgeu	r2,r3,801724 <_malloc_r+0x640>
  8016b0:	01801f84 	movi	r6,126
  8016b4:	0080fc04 	movi	r2,1008
  8016b8:	003eb706 	br	801198 <_malloc_r+0xb4>
  8016bc:	00800204 	movi	r2,8
  8016c0:	10cbc83a 	sub	r5,r2,r3
  8016c4:	2169883a 	add	r20,r4,r5
  8016c8:	003f9e06 	br	801544 <_malloc_r+0x460>
  8016cc:	00bffe04 	movi	r2,-8
  8016d0:	a93ffd04 	addi	r4,r21,-12
  8016d4:	2088703a 	and	r4,r4,r2
  8016d8:	b10b883a 	add	r5,r22,r4
  8016dc:	00c00144 	movi	r3,5
  8016e0:	28c00215 	stw	r3,8(r5)
  8016e4:	28c00115 	stw	r3,4(r5)
  8016e8:	b0800117 	ldw	r2,4(r22)
  8016ec:	1080004c 	andi	r2,r2,1
  8016f0:	2084b03a 	or	r2,r4,r2
  8016f4:	b0800115 	stw	r2,4(r22)
  8016f8:	313fdd2e 	bgeu	r6,r4,801670 <_malloc_r+0x58c>
  8016fc:	b1400204 	addi	r5,r22,8
  801700:	9009883a 	mov	r4,r18
  801704:	0802adc0 	call	802adc <_free_r>
  801708:	e4000217 	ldw	r16,8(fp)
  80170c:	003fd806 	br	801670 <_malloc_r+0x58c>
  801710:	00800504 	movi	r2,20
  801714:	11001536 	bltu	r2,r4,80176c <_malloc_r+0x688>
  801718:	210016c4 	addi	r4,r4,91
  80171c:	200690fa 	slli	r3,r4,3
  801720:	003fa606 	br	8015bc <_malloc_r+0x4d8>
  801724:	8804d4ba 	srli	r2,r17,18
  801728:	11801f04 	addi	r6,r2,124
  80172c:	300490fa 	slli	r2,r6,3
  801730:	003e9906 	br	801198 <_malloc_r+0xb4>
  801734:	2009d0ba 	srai	r4,r4,2
  801738:	01402034 	movhi	r5,128
  80173c:	295cfb04 	addi	r5,r5,29676
  801740:	00c00044 	movi	r3,1
  801744:	28800117 	ldw	r2,4(r5)
  801748:	1906983a 	sll	r3,r3,r4
  80174c:	10c4b03a 	or	r2,r2,r3
  801750:	28800115 	stw	r2,4(r5)
  801754:	003fa306 	br	8015e4 <_malloc_r+0x500>
  801758:	0027883a 	mov	r19,zero
  80175c:	00c00044 	movi	r3,1
  801760:	003f8606 	br	80157c <_malloc_r+0x498>
  801764:	d1200315 	stw	r4,-32756(gp)
  801768:	003f7306 	br	801538 <_malloc_r+0x454>
  80176c:	00801504 	movi	r2,84
  801770:	11001936 	bltu	r2,r4,8017d8 <_malloc_r+0x6f4>
  801774:	2804d33a 	srli	r2,r5,12
  801778:	11001b84 	addi	r4,r2,110
  80177c:	200690fa 	slli	r3,r4,3
  801780:	003f8e06 	br	8015bc <_malloc_r+0x4d8>
  801784:	480b883a 	mov	r5,r9
  801788:	6807883a 	mov	r3,r13
  80178c:	288000cc 	andi	r2,r5,3
  801790:	18fffe04 	addi	r3,r3,-8
  801794:	297fffc4 	addi	r5,r5,-1
  801798:	10001526 	beq	r2,zero,8017f0 <_malloc_r+0x70c>
  80179c:	18800217 	ldw	r2,8(r3)
  8017a0:	10fffa26 	beq	r2,r3,80178c <_malloc_r+0x6a8>
  8017a4:	2109883a 	add	r4,r4,r4
  8017a8:	393f1e36 	bltu	r7,r4,801424 <_malloc_r+0x340>
  8017ac:	203f1d26 	beq	r4,zero,801424 <_malloc_r+0x340>
  8017b0:	21c4703a 	and	r2,r4,r7
  8017b4:	10000226 	beq	r2,zero,8017c0 <_malloc_r+0x6dc>
  8017b8:	6013883a 	mov	r9,r12
  8017bc:	003ee106 	br	801344 <_malloc_r+0x260>
  8017c0:	2109883a 	add	r4,r4,r4
  8017c4:	3904703a 	and	r2,r7,r4
  8017c8:	63000104 	addi	r12,r12,4
  8017cc:	103ffc26 	beq	r2,zero,8017c0 <_malloc_r+0x6dc>
  8017d0:	6013883a 	mov	r9,r12
  8017d4:	003edb06 	br	801344 <_malloc_r+0x260>
  8017d8:	00805504 	movi	r2,340
  8017dc:	11000836 	bltu	r2,r4,801800 <_malloc_r+0x71c>
  8017e0:	2804d3fa 	srli	r2,r5,15
  8017e4:	11001dc4 	addi	r4,r2,119
  8017e8:	200690fa 	slli	r3,r4,3
  8017ec:	003f7306 	br	8015bc <_malloc_r+0x4d8>
  8017f0:	0104303a 	nor	r2,zero,r4
  8017f4:	388e703a 	and	r7,r7,r2
  8017f8:	e1c00115 	stw	r7,4(fp)
  8017fc:	003fe906 	br	8017a4 <_malloc_r+0x6c0>
  801800:	00815504 	movi	r2,1364
  801804:	1100032e 	bgeu	r2,r4,801814 <_malloc_r+0x730>
  801808:	01001f84 	movi	r4,126
  80180c:	00c0fc04 	movi	r3,1008
  801810:	003f6a06 	br	8015bc <_malloc_r+0x4d8>
  801814:	2804d4ba 	srli	r2,r5,18
  801818:	11001f04 	addi	r4,r2,124
  80181c:	200690fa 	slli	r3,r4,3
  801820:	003f6606 	br	8015bc <_malloc_r+0x4d8>

00801824 <memchr>:
  801824:	008000c4 	movi	r2,3
  801828:	29403fcc 	andi	r5,r5,255
  80182c:	2007883a 	mov	r3,r4
  801830:	1180022e 	bgeu	r2,r6,80183c <memchr+0x18>
  801834:	2084703a 	and	r2,r4,r2
  801838:	10000b26 	beq	r2,zero,801868 <memchr+0x44>
  80183c:	313fffc4 	addi	r4,r6,-1
  801840:	3000051e 	bne	r6,zero,801858 <memchr+0x34>
  801844:	00002c06 	br	8018f8 <memchr+0xd4>
  801848:	213fffc4 	addi	r4,r4,-1
  80184c:	00bfffc4 	movi	r2,-1
  801850:	18c00044 	addi	r3,r3,1
  801854:	20802826 	beq	r4,r2,8018f8 <memchr+0xd4>
  801858:	18800003 	ldbu	r2,0(r3)
  80185c:	28bffa1e 	bne	r5,r2,801848 <memchr+0x24>
  801860:	1805883a 	mov	r2,r3
  801864:	f800283a 	ret
  801868:	0011883a 	mov	r8,zero
  80186c:	0007883a 	mov	r3,zero
  801870:	01c00104 	movi	r7,4
  801874:	4004923a 	slli	r2,r8,8
  801878:	18c00044 	addi	r3,r3,1
  80187c:	1151883a 	add	r8,r2,r5
  801880:	19fffc1e 	bne	r3,r7,801874 <memchr+0x50>
  801884:	02bfbff4 	movhi	r10,65279
  801888:	52bfbfc4 	addi	r10,r10,-257
  80188c:	02602074 	movhi	r9,32897
  801890:	4a602004 	addi	r9,r9,-32640
  801894:	02c000c4 	movi	r11,3
  801898:	20800017 	ldw	r2,0(r4)
  80189c:	31bfff04 	addi	r6,r6,-4
  8018a0:	200f883a 	mov	r7,r4
  8018a4:	1204f03a 	xor	r2,r2,r8
  8018a8:	1287883a 	add	r3,r2,r10
  8018ac:	1a46703a 	and	r3,r3,r9
  8018b0:	0084303a 	nor	r2,zero,r2
  8018b4:	10c4703a 	and	r2,r2,r3
  8018b8:	10000b26 	beq	r2,zero,8018e8 <memchr+0xc4>
  8018bc:	20800003 	ldbu	r2,0(r4)
  8018c0:	28800f26 	beq	r5,r2,801900 <memchr+0xdc>
  8018c4:	20800043 	ldbu	r2,1(r4)
  8018c8:	21c00044 	addi	r7,r4,1
  8018cc:	28800c26 	beq	r5,r2,801900 <memchr+0xdc>
  8018d0:	20800083 	ldbu	r2,2(r4)
  8018d4:	21c00084 	addi	r7,r4,2
  8018d8:	28800926 	beq	r5,r2,801900 <memchr+0xdc>
  8018dc:	208000c3 	ldbu	r2,3(r4)
  8018e0:	21c000c4 	addi	r7,r4,3
  8018e4:	28800626 	beq	r5,r2,801900 <memchr+0xdc>
  8018e8:	21000104 	addi	r4,r4,4
  8018ec:	59bfea36 	bltu	r11,r6,801898 <memchr+0x74>
  8018f0:	2007883a 	mov	r3,r4
  8018f4:	003fd106 	br	80183c <memchr+0x18>
  8018f8:	0005883a 	mov	r2,zero
  8018fc:	f800283a 	ret
  801900:	3805883a 	mov	r2,r7
  801904:	f800283a 	ret

00801908 <memmove>:
  801908:	2807883a 	mov	r3,r5
  80190c:	2011883a 	mov	r8,r4
  801910:	29000c2e 	bgeu	r5,r4,801944 <memmove+0x3c>
  801914:	298f883a 	add	r7,r5,r6
  801918:	21c00a2e 	bgeu	r4,r7,801944 <memmove+0x3c>
  80191c:	30000726 	beq	r6,zero,80193c <memmove+0x34>
  801920:	2187883a 	add	r3,r4,r6
  801924:	198dc83a 	sub	r6,r3,r6
  801928:	39ffffc4 	addi	r7,r7,-1
  80192c:	38800003 	ldbu	r2,0(r7)
  801930:	18ffffc4 	addi	r3,r3,-1
  801934:	18800005 	stb	r2,0(r3)
  801938:	19bffb1e 	bne	r3,r6,801928 <memmove+0x20>
  80193c:	2005883a 	mov	r2,r4
  801940:	f800283a 	ret
  801944:	01c003c4 	movi	r7,15
  801948:	39800a36 	bltu	r7,r6,801974 <memmove+0x6c>
  80194c:	303ffb26 	beq	r6,zero,80193c <memmove+0x34>
  801950:	400f883a 	mov	r7,r8
  801954:	320d883a 	add	r6,r6,r8
  801958:	28800003 	ldbu	r2,0(r5)
  80195c:	29400044 	addi	r5,r5,1
  801960:	38800005 	stb	r2,0(r7)
  801964:	39c00044 	addi	r7,r7,1
  801968:	39bffb1e 	bne	r7,r6,801958 <memmove+0x50>
  80196c:	2005883a 	mov	r2,r4
  801970:	f800283a 	ret
  801974:	1904b03a 	or	r2,r3,r4
  801978:	108000cc 	andi	r2,r2,3
  80197c:	103ff31e 	bne	r2,zero,80194c <memmove+0x44>
  801980:	3811883a 	mov	r8,r7
  801984:	180b883a 	mov	r5,r3
  801988:	200f883a 	mov	r7,r4
  80198c:	28c00017 	ldw	r3,0(r5)
  801990:	31bffc04 	addi	r6,r6,-16
  801994:	38c00015 	stw	r3,0(r7)
  801998:	28800117 	ldw	r2,4(r5)
  80199c:	38800115 	stw	r2,4(r7)
  8019a0:	28c00217 	ldw	r3,8(r5)
  8019a4:	38c00215 	stw	r3,8(r7)
  8019a8:	28800317 	ldw	r2,12(r5)
  8019ac:	29400404 	addi	r5,r5,16
  8019b0:	38800315 	stw	r2,12(r7)
  8019b4:	39c00404 	addi	r7,r7,16
  8019b8:	41bff436 	bltu	r8,r6,80198c <memmove+0x84>
  8019bc:	008000c4 	movi	r2,3
  8019c0:	1180072e 	bgeu	r2,r6,8019e0 <memmove+0xd8>
  8019c4:	1007883a 	mov	r3,r2
  8019c8:	28800017 	ldw	r2,0(r5)
  8019cc:	31bfff04 	addi	r6,r6,-4
  8019d0:	29400104 	addi	r5,r5,4
  8019d4:	38800015 	stw	r2,0(r7)
  8019d8:	39c00104 	addi	r7,r7,4
  8019dc:	19bffa36 	bltu	r3,r6,8019c8 <memmove+0xc0>
  8019e0:	3811883a 	mov	r8,r7
  8019e4:	003fd906 	br	80194c <memmove+0x44>

008019e8 <putc>:
  8019e8:	defffc04 	addi	sp,sp,-16
  8019ec:	dc800215 	stw	r18,8(sp)
  8019f0:	04802074 	movhi	r18,129
  8019f4:	94a2b004 	addi	r18,r18,-30016
  8019f8:	90c00017 	ldw	r3,0(r18)
  8019fc:	dc400115 	stw	r17,4(sp)
  801a00:	dc000015 	stw	r16,0(sp)
  801a04:	dfc00315 	stw	ra,12(sp)
  801a08:	2023883a 	mov	r17,r4
  801a0c:	2821883a 	mov	r16,r5
  801a10:	18000226 	beq	r3,zero,801a1c <putc+0x34>
  801a14:	18800e17 	ldw	r2,56(r3)
  801a18:	10001126 	beq	r2,zero,801a60 <putc+0x78>
  801a1c:	80800217 	ldw	r2,8(r16)
  801a20:	10ffffc4 	addi	r3,r2,-1
  801a24:	80c00215 	stw	r3,8(r16)
  801a28:	18001316 	blt	r3,zero,801a78 <putc+0x90>
  801a2c:	80800017 	ldw	r2,0(r16)
  801a30:	14400005 	stb	r17,0(r2)
  801a34:	80c00017 	ldw	r3,0(r16)
  801a38:	18800044 	addi	r2,r3,1
  801a3c:	18c00003 	ldbu	r3,0(r3)
  801a40:	80800015 	stw	r2,0(r16)
  801a44:	1805883a 	mov	r2,r3
  801a48:	dfc00317 	ldw	ra,12(sp)
  801a4c:	dc800217 	ldw	r18,8(sp)
  801a50:	dc400117 	ldw	r17,4(sp)
  801a54:	dc000017 	ldw	r16,0(sp)
  801a58:	dec00404 	addi	sp,sp,16
  801a5c:	f800283a 	ret
  801a60:	1809883a 	mov	r4,r3
  801a64:	08027580 	call	802758 <__sinit>
  801a68:	80800217 	ldw	r2,8(r16)
  801a6c:	10ffffc4 	addi	r3,r2,-1
  801a70:	80c00215 	stw	r3,8(r16)
  801a74:	183fed0e 	bge	r3,zero,801a2c <putc+0x44>
  801a78:	80800617 	ldw	r2,24(r16)
  801a7c:	18800f16 	blt	r3,r2,801abc <putc+0xd4>
  801a80:	80800017 	ldw	r2,0(r16)
  801a84:	14400005 	stb	r17,0(r2)
  801a88:	81000017 	ldw	r4,0(r16)
  801a8c:	00800284 	movi	r2,10
  801a90:	20c00003 	ldbu	r3,0(r4)
  801a94:	18801226 	beq	r3,r2,801ae0 <putc+0xf8>
  801a98:	20800044 	addi	r2,r4,1
  801a9c:	80800015 	stw	r2,0(r16)
  801aa0:	1805883a 	mov	r2,r3
  801aa4:	dfc00317 	ldw	ra,12(sp)
  801aa8:	dc800217 	ldw	r18,8(sp)
  801aac:	dc400117 	ldw	r17,4(sp)
  801ab0:	dc000017 	ldw	r16,0(sp)
  801ab4:	dec00404 	addi	sp,sp,16
  801ab8:	f800283a 	ret
  801abc:	91000017 	ldw	r4,0(r18)
  801ac0:	880b883a 	mov	r5,r17
  801ac4:	800d883a 	mov	r6,r16
  801ac8:	dfc00317 	ldw	ra,12(sp)
  801acc:	dc800217 	ldw	r18,8(sp)
  801ad0:	dc400117 	ldw	r17,4(sp)
  801ad4:	dc000017 	ldw	r16,0(sp)
  801ad8:	dec00404 	addi	sp,sp,16
  801adc:	08022381 	jmpi	802238 <__swbuf_r>
  801ae0:	91000017 	ldw	r4,0(r18)
  801ae4:	180b883a 	mov	r5,r3
  801ae8:	003ff606 	br	801ac4 <putc+0xdc>

00801aec <_putc_r>:
  801aec:	defffc04 	addi	sp,sp,-16
  801af0:	dc400215 	stw	r17,8(sp)
  801af4:	dc000115 	stw	r16,4(sp)
  801af8:	dfc00315 	stw	ra,12(sp)
  801afc:	2021883a 	mov	r16,r4
  801b00:	2823883a 	mov	r17,r5
  801b04:	20000226 	beq	r4,zero,801b10 <_putc_r+0x24>
  801b08:	20800e17 	ldw	r2,56(r4)
  801b0c:	10001026 	beq	r2,zero,801b50 <_putc_r+0x64>
  801b10:	30800217 	ldw	r2,8(r6)
  801b14:	10ffffc4 	addi	r3,r2,-1
  801b18:	30c00215 	stw	r3,8(r6)
  801b1c:	18001316 	blt	r3,zero,801b6c <_putc_r+0x80>
  801b20:	30800017 	ldw	r2,0(r6)
  801b24:	14400005 	stb	r17,0(r2)
  801b28:	30c00017 	ldw	r3,0(r6)
  801b2c:	18800044 	addi	r2,r3,1
  801b30:	18c00003 	ldbu	r3,0(r3)
  801b34:	30800015 	stw	r2,0(r6)
  801b38:	1805883a 	mov	r2,r3
  801b3c:	dfc00317 	ldw	ra,12(sp)
  801b40:	dc400217 	ldw	r17,8(sp)
  801b44:	dc000117 	ldw	r16,4(sp)
  801b48:	dec00404 	addi	sp,sp,16
  801b4c:	f800283a 	ret
  801b50:	d9800015 	stw	r6,0(sp)
  801b54:	08027580 	call	802758 <__sinit>
  801b58:	d9800017 	ldw	r6,0(sp)
  801b5c:	30800217 	ldw	r2,8(r6)
  801b60:	10ffffc4 	addi	r3,r2,-1
  801b64:	30c00215 	stw	r3,8(r6)
  801b68:	183fed0e 	bge	r3,zero,801b20 <_putc_r+0x34>
  801b6c:	30800617 	ldw	r2,24(r6)
  801b70:	18800e16 	blt	r3,r2,801bac <_putc_r+0xc0>
  801b74:	30800017 	ldw	r2,0(r6)
  801b78:	14400005 	stb	r17,0(r2)
  801b7c:	31000017 	ldw	r4,0(r6)
  801b80:	00800284 	movi	r2,10
  801b84:	20c00003 	ldbu	r3,0(r4)
  801b88:	18800f26 	beq	r3,r2,801bc8 <_putc_r+0xdc>
  801b8c:	20800044 	addi	r2,r4,1
  801b90:	30800015 	stw	r2,0(r6)
  801b94:	1805883a 	mov	r2,r3
  801b98:	dfc00317 	ldw	ra,12(sp)
  801b9c:	dc400217 	ldw	r17,8(sp)
  801ba0:	dc000117 	ldw	r16,4(sp)
  801ba4:	dec00404 	addi	sp,sp,16
  801ba8:	f800283a 	ret
  801bac:	8009883a 	mov	r4,r16
  801bb0:	880b883a 	mov	r5,r17
  801bb4:	dfc00317 	ldw	ra,12(sp)
  801bb8:	dc400217 	ldw	r17,8(sp)
  801bbc:	dc000117 	ldw	r16,4(sp)
  801bc0:	dec00404 	addi	sp,sp,16
  801bc4:	08022381 	jmpi	802238 <__swbuf_r>
  801bc8:	8009883a 	mov	r4,r16
  801bcc:	180b883a 	mov	r5,r3
  801bd0:	003ff806 	br	801bb4 <_putc_r+0xc8>

00801bd4 <_realloc_r>:
  801bd4:	defff404 	addi	sp,sp,-48
  801bd8:	dd800815 	stw	r22,32(sp)
  801bdc:	dc800415 	stw	r18,16(sp)
  801be0:	dc400315 	stw	r17,12(sp)
  801be4:	dfc00b15 	stw	ra,44(sp)
  801be8:	df000a15 	stw	fp,40(sp)
  801bec:	ddc00915 	stw	r23,36(sp)
  801bf0:	dd400715 	stw	r21,28(sp)
  801bf4:	dd000615 	stw	r20,24(sp)
  801bf8:	dcc00515 	stw	r19,20(sp)
  801bfc:	dc000215 	stw	r16,8(sp)
  801c00:	2825883a 	mov	r18,r5
  801c04:	3023883a 	mov	r17,r6
  801c08:	202d883a 	mov	r22,r4
  801c0c:	2800c926 	beq	r5,zero,801f34 <_realloc_r+0x360>
  801c10:	0803f0c0 	call	803f0c <__malloc_lock>
  801c14:	943ffe04 	addi	r16,r18,-8
  801c18:	88c002c4 	addi	r3,r17,11
  801c1c:	00800584 	movi	r2,22
  801c20:	82000117 	ldw	r8,4(r16)
  801c24:	10c01b2e 	bgeu	r2,r3,801c94 <_realloc_r+0xc0>
  801c28:	00bffe04 	movi	r2,-8
  801c2c:	188e703a 	and	r7,r3,r2
  801c30:	3839883a 	mov	fp,r7
  801c34:	38001a16 	blt	r7,zero,801ca0 <_realloc_r+0xcc>
  801c38:	e4401936 	bltu	fp,r17,801ca0 <_realloc_r+0xcc>
  801c3c:	013fff04 	movi	r4,-4
  801c40:	4126703a 	and	r19,r8,r4
  801c44:	99c02616 	blt	r19,r7,801ce0 <_realloc_r+0x10c>
  801c48:	802b883a 	mov	r21,r16
  801c4c:	9829883a 	mov	r20,r19
  801c50:	84000204 	addi	r16,r16,8
  801c54:	a80f883a 	mov	r7,r21
  801c58:	a70dc83a 	sub	r6,r20,fp
  801c5c:	008003c4 	movi	r2,15
  801c60:	1180c136 	bltu	r2,r6,801f68 <_realloc_r+0x394>
  801c64:	38800117 	ldw	r2,4(r7)
  801c68:	a549883a 	add	r4,r20,r21
  801c6c:	1080004c 	andi	r2,r2,1
  801c70:	a084b03a 	or	r2,r20,r2
  801c74:	38800115 	stw	r2,4(r7)
  801c78:	20c00117 	ldw	r3,4(r4)
  801c7c:	18c00054 	ori	r3,r3,1
  801c80:	20c00115 	stw	r3,4(r4)
  801c84:	b009883a 	mov	r4,r22
  801c88:	0803f2c0 	call	803f2c <__malloc_unlock>
  801c8c:	8023883a 	mov	r17,r16
  801c90:	00000606 	br	801cac <_realloc_r+0xd8>
  801c94:	01c00404 	movi	r7,16
  801c98:	3839883a 	mov	fp,r7
  801c9c:	e47fe72e 	bgeu	fp,r17,801c3c <_realloc_r+0x68>
  801ca0:	00800304 	movi	r2,12
  801ca4:	0023883a 	mov	r17,zero
  801ca8:	b0800015 	stw	r2,0(r22)
  801cac:	8805883a 	mov	r2,r17
  801cb0:	dfc00b17 	ldw	ra,44(sp)
  801cb4:	df000a17 	ldw	fp,40(sp)
  801cb8:	ddc00917 	ldw	r23,36(sp)
  801cbc:	dd800817 	ldw	r22,32(sp)
  801cc0:	dd400717 	ldw	r21,28(sp)
  801cc4:	dd000617 	ldw	r20,24(sp)
  801cc8:	dcc00517 	ldw	r19,20(sp)
  801ccc:	dc800417 	ldw	r18,16(sp)
  801cd0:	dc400317 	ldw	r17,12(sp)
  801cd4:	dc000217 	ldw	r16,8(sp)
  801cd8:	dec00c04 	addi	sp,sp,48
  801cdc:	f800283a 	ret
  801ce0:	00802034 	movhi	r2,128
  801ce4:	109cfb04 	addi	r2,r2,29676
  801ce8:	12400217 	ldw	r9,8(r2)
  801cec:	84cd883a 	add	r6,r16,r19
  801cf0:	802b883a 	mov	r21,r16
  801cf4:	3240b926 	beq	r6,r9,801fdc <_realloc_r+0x408>
  801cf8:	31400117 	ldw	r5,4(r6)
  801cfc:	00bfff84 	movi	r2,-2
  801d00:	2884703a 	and	r2,r5,r2
  801d04:	1185883a 	add	r2,r2,r6
  801d08:	10c00117 	ldw	r3,4(r2)
  801d0c:	18c0004c 	andi	r3,r3,1
  801d10:	1807003a 	cmpeq	r3,r3,zero
  801d14:	1800a326 	beq	r3,zero,801fa4 <_realloc_r+0x3d0>
  801d18:	2908703a 	and	r4,r5,r4
  801d1c:	9929883a 	add	r20,r19,r4
  801d20:	a1c0a30e 	bge	r20,r7,801fb0 <_realloc_r+0x3dc>
  801d24:	4080004c 	andi	r2,r8,1
  801d28:	1000551e 	bne	r2,zero,801e80 <_realloc_r+0x2ac>
  801d2c:	80800017 	ldw	r2,0(r16)
  801d30:	80afc83a 	sub	r23,r16,r2
  801d34:	b8c00117 	ldw	r3,4(r23)
  801d38:	00bfff04 	movi	r2,-4
  801d3c:	1884703a 	and	r2,r3,r2
  801d40:	30002e26 	beq	r6,zero,801dfc <_realloc_r+0x228>
  801d44:	3240b926 	beq	r6,r9,80202c <_realloc_r+0x458>
  801d48:	98a9883a 	add	r20,r19,r2
  801d4c:	2509883a 	add	r4,r4,r20
  801d50:	d9000015 	stw	r4,0(sp)
  801d54:	21c02a16 	blt	r4,r7,801e00 <_realloc_r+0x22c>
  801d58:	30800317 	ldw	r2,12(r6)
  801d5c:	30c00217 	ldw	r3,8(r6)
  801d60:	01400904 	movi	r5,36
  801d64:	99bfff04 	addi	r6,r19,-4
  801d68:	18800315 	stw	r2,12(r3)
  801d6c:	10c00215 	stw	r3,8(r2)
  801d70:	b9000317 	ldw	r4,12(r23)
  801d74:	b8800217 	ldw	r2,8(r23)
  801d78:	b82b883a 	mov	r21,r23
  801d7c:	bc000204 	addi	r16,r23,8
  801d80:	20800215 	stw	r2,8(r4)
  801d84:	11000315 	stw	r4,12(r2)
  801d88:	2980e436 	bltu	r5,r6,80211c <_realloc_r+0x548>
  801d8c:	008004c4 	movi	r2,19
  801d90:	9009883a 	mov	r4,r18
  801d94:	8011883a 	mov	r8,r16
  801d98:	11800f2e 	bgeu	r2,r6,801dd8 <_realloc_r+0x204>
  801d9c:	90800017 	ldw	r2,0(r18)
  801da0:	ba000404 	addi	r8,r23,16
  801da4:	91000204 	addi	r4,r18,8
  801da8:	b8800215 	stw	r2,8(r23)
  801dac:	90c00117 	ldw	r3,4(r18)
  801db0:	008006c4 	movi	r2,27
  801db4:	b8c00315 	stw	r3,12(r23)
  801db8:	1180072e 	bgeu	r2,r6,801dd8 <_realloc_r+0x204>
  801dbc:	90c00217 	ldw	r3,8(r18)
  801dc0:	ba000604 	addi	r8,r23,24
  801dc4:	91000404 	addi	r4,r18,16
  801dc8:	b8c00415 	stw	r3,16(r23)
  801dcc:	90800317 	ldw	r2,12(r18)
  801dd0:	b8800515 	stw	r2,20(r23)
  801dd4:	3140e726 	beq	r6,r5,802174 <_realloc_r+0x5a0>
  801dd8:	20800017 	ldw	r2,0(r4)
  801ddc:	dd000017 	ldw	r20,0(sp)
  801de0:	b80f883a 	mov	r7,r23
  801de4:	40800015 	stw	r2,0(r8)
  801de8:	20c00117 	ldw	r3,4(r4)
  801dec:	40c00115 	stw	r3,4(r8)
  801df0:	20800217 	ldw	r2,8(r4)
  801df4:	40800215 	stw	r2,8(r8)
  801df8:	003f9706 	br	801c58 <_realloc_r+0x84>
  801dfc:	98a9883a 	add	r20,r19,r2
  801e00:	a1c01f16 	blt	r20,r7,801e80 <_realloc_r+0x2ac>
  801e04:	b8c00317 	ldw	r3,12(r23)
  801e08:	b8800217 	ldw	r2,8(r23)
  801e0c:	99bfff04 	addi	r6,r19,-4
  801e10:	01400904 	movi	r5,36
  801e14:	b82b883a 	mov	r21,r23
  801e18:	18800215 	stw	r2,8(r3)
  801e1c:	10c00315 	stw	r3,12(r2)
  801e20:	bc000204 	addi	r16,r23,8
  801e24:	2980c336 	bltu	r5,r6,802134 <_realloc_r+0x560>
  801e28:	008004c4 	movi	r2,19
  801e2c:	9009883a 	mov	r4,r18
  801e30:	8011883a 	mov	r8,r16
  801e34:	11800f2e 	bgeu	r2,r6,801e74 <_realloc_r+0x2a0>
  801e38:	90800017 	ldw	r2,0(r18)
  801e3c:	ba000404 	addi	r8,r23,16
  801e40:	91000204 	addi	r4,r18,8
  801e44:	b8800215 	stw	r2,8(r23)
  801e48:	90c00117 	ldw	r3,4(r18)
  801e4c:	008006c4 	movi	r2,27
  801e50:	b8c00315 	stw	r3,12(r23)
  801e54:	1180072e 	bgeu	r2,r6,801e74 <_realloc_r+0x2a0>
  801e58:	90c00217 	ldw	r3,8(r18)
  801e5c:	ba000604 	addi	r8,r23,24
  801e60:	91000404 	addi	r4,r18,16
  801e64:	b8c00415 	stw	r3,16(r23)
  801e68:	90800317 	ldw	r2,12(r18)
  801e6c:	b8800515 	stw	r2,20(r23)
  801e70:	3140c726 	beq	r6,r5,802190 <_realloc_r+0x5bc>
  801e74:	20800017 	ldw	r2,0(r4)
  801e78:	b80f883a 	mov	r7,r23
  801e7c:	003fd906 	br	801de4 <_realloc_r+0x210>
  801e80:	880b883a 	mov	r5,r17
  801e84:	b009883a 	mov	r4,r22
  801e88:	08010e40 	call	8010e4 <_malloc_r>
  801e8c:	1023883a 	mov	r17,r2
  801e90:	10002526 	beq	r2,zero,801f28 <_realloc_r+0x354>
  801e94:	80800117 	ldw	r2,4(r16)
  801e98:	00ffff84 	movi	r3,-2
  801e9c:	893ffe04 	addi	r4,r17,-8
  801ea0:	10c4703a 	and	r2,r2,r3
  801ea4:	8085883a 	add	r2,r16,r2
  801ea8:	20809526 	beq	r4,r2,802100 <_realloc_r+0x52c>
  801eac:	99bfff04 	addi	r6,r19,-4
  801eb0:	01c00904 	movi	r7,36
  801eb4:	39804536 	bltu	r7,r6,801fcc <_realloc_r+0x3f8>
  801eb8:	008004c4 	movi	r2,19
  801ebc:	9009883a 	mov	r4,r18
  801ec0:	880b883a 	mov	r5,r17
  801ec4:	11800f2e 	bgeu	r2,r6,801f04 <_realloc_r+0x330>
  801ec8:	90800017 	ldw	r2,0(r18)
  801ecc:	89400204 	addi	r5,r17,8
  801ed0:	91000204 	addi	r4,r18,8
  801ed4:	88800015 	stw	r2,0(r17)
  801ed8:	90c00117 	ldw	r3,4(r18)
  801edc:	008006c4 	movi	r2,27
  801ee0:	88c00115 	stw	r3,4(r17)
  801ee4:	1180072e 	bgeu	r2,r6,801f04 <_realloc_r+0x330>
  801ee8:	90c00217 	ldw	r3,8(r18)
  801eec:	89400404 	addi	r5,r17,16
  801ef0:	91000404 	addi	r4,r18,16
  801ef4:	88c00215 	stw	r3,8(r17)
  801ef8:	90800317 	ldw	r2,12(r18)
  801efc:	88800315 	stw	r2,12(r17)
  801f00:	31c09126 	beq	r6,r7,802148 <_realloc_r+0x574>
  801f04:	20800017 	ldw	r2,0(r4)
  801f08:	28800015 	stw	r2,0(r5)
  801f0c:	20c00117 	ldw	r3,4(r4)
  801f10:	28c00115 	stw	r3,4(r5)
  801f14:	20800217 	ldw	r2,8(r4)
  801f18:	28800215 	stw	r2,8(r5)
  801f1c:	900b883a 	mov	r5,r18
  801f20:	b009883a 	mov	r4,r22
  801f24:	0802adc0 	call	802adc <_free_r>
  801f28:	b009883a 	mov	r4,r22
  801f2c:	0803f2c0 	call	803f2c <__malloc_unlock>
  801f30:	003f5e06 	br	801cac <_realloc_r+0xd8>
  801f34:	300b883a 	mov	r5,r6
  801f38:	dfc00b17 	ldw	ra,44(sp)
  801f3c:	df000a17 	ldw	fp,40(sp)
  801f40:	ddc00917 	ldw	r23,36(sp)
  801f44:	dd800817 	ldw	r22,32(sp)
  801f48:	dd400717 	ldw	r21,28(sp)
  801f4c:	dd000617 	ldw	r20,24(sp)
  801f50:	dcc00517 	ldw	r19,20(sp)
  801f54:	dc800417 	ldw	r18,16(sp)
  801f58:	dc400317 	ldw	r17,12(sp)
  801f5c:	dc000217 	ldw	r16,8(sp)
  801f60:	dec00c04 	addi	sp,sp,48
  801f64:	08010e41 	jmpi	8010e4 <_malloc_r>
  801f68:	38800117 	ldw	r2,4(r7)
  801f6c:	e54b883a 	add	r5,fp,r21
  801f70:	31000054 	ori	r4,r6,1
  801f74:	1080004c 	andi	r2,r2,1
  801f78:	1704b03a 	or	r2,r2,fp
  801f7c:	38800115 	stw	r2,4(r7)
  801f80:	29000115 	stw	r4,4(r5)
  801f84:	2987883a 	add	r3,r5,r6
  801f88:	18800117 	ldw	r2,4(r3)
  801f8c:	29400204 	addi	r5,r5,8
  801f90:	b009883a 	mov	r4,r22
  801f94:	10800054 	ori	r2,r2,1
  801f98:	18800115 	stw	r2,4(r3)
  801f9c:	0802adc0 	call	802adc <_free_r>
  801fa0:	003f3806 	br	801c84 <_realloc_r+0xb0>
  801fa4:	000d883a 	mov	r6,zero
  801fa8:	0009883a 	mov	r4,zero
  801fac:	003f5d06 	br	801d24 <_realloc_r+0x150>
  801fb0:	30c00217 	ldw	r3,8(r6)
  801fb4:	30800317 	ldw	r2,12(r6)
  801fb8:	800f883a 	mov	r7,r16
  801fbc:	84000204 	addi	r16,r16,8
  801fc0:	10c00215 	stw	r3,8(r2)
  801fc4:	18800315 	stw	r2,12(r3)
  801fc8:	003f2306 	br	801c58 <_realloc_r+0x84>
  801fcc:	8809883a 	mov	r4,r17
  801fd0:	900b883a 	mov	r5,r18
  801fd4:	08019080 	call	801908 <memmove>
  801fd8:	003fd006 	br	801f1c <_realloc_r+0x348>
  801fdc:	30800117 	ldw	r2,4(r6)
  801fe0:	e0c00404 	addi	r3,fp,16
  801fe4:	1108703a 	and	r4,r2,r4
  801fe8:	9905883a 	add	r2,r19,r4
  801fec:	10ff4d16 	blt	r2,r3,801d24 <_realloc_r+0x150>
  801ff0:	1705c83a 	sub	r2,r2,fp
  801ff4:	870b883a 	add	r5,r16,fp
  801ff8:	10800054 	ori	r2,r2,1
  801ffc:	28800115 	stw	r2,4(r5)
  802000:	80c00117 	ldw	r3,4(r16)
  802004:	00802034 	movhi	r2,128
  802008:	109cfb04 	addi	r2,r2,29676
  80200c:	b009883a 	mov	r4,r22
  802010:	18c0004c 	andi	r3,r3,1
  802014:	e0c6b03a 	or	r3,fp,r3
  802018:	11400215 	stw	r5,8(r2)
  80201c:	80c00115 	stw	r3,4(r16)
  802020:	0803f2c0 	call	803f2c <__malloc_unlock>
  802024:	84400204 	addi	r17,r16,8
  802028:	003f2006 	br	801cac <_realloc_r+0xd8>
  80202c:	98a9883a 	add	r20,r19,r2
  802030:	2509883a 	add	r4,r4,r20
  802034:	e0800404 	addi	r2,fp,16
  802038:	d9000115 	stw	r4,4(sp)
  80203c:	20bf7016 	blt	r4,r2,801e00 <_realloc_r+0x22c>
  802040:	b8c00317 	ldw	r3,12(r23)
  802044:	b8800217 	ldw	r2,8(r23)
  802048:	99bfff04 	addi	r6,r19,-4
  80204c:	01400904 	movi	r5,36
  802050:	18800215 	stw	r2,8(r3)
  802054:	10c00315 	stw	r3,12(r2)
  802058:	bc400204 	addi	r17,r23,8
  80205c:	29804136 	bltu	r5,r6,802164 <_realloc_r+0x590>
  802060:	008004c4 	movi	r2,19
  802064:	9009883a 	mov	r4,r18
  802068:	880f883a 	mov	r7,r17
  80206c:	11800f2e 	bgeu	r2,r6,8020ac <_realloc_r+0x4d8>
  802070:	90800017 	ldw	r2,0(r18)
  802074:	b9c00404 	addi	r7,r23,16
  802078:	91000204 	addi	r4,r18,8
  80207c:	b8800215 	stw	r2,8(r23)
  802080:	90c00117 	ldw	r3,4(r18)
  802084:	008006c4 	movi	r2,27
  802088:	b8c00315 	stw	r3,12(r23)
  80208c:	1180072e 	bgeu	r2,r6,8020ac <_realloc_r+0x4d8>
  802090:	90c00217 	ldw	r3,8(r18)
  802094:	b9c00604 	addi	r7,r23,24
  802098:	91000404 	addi	r4,r18,16
  80209c:	b8c00415 	stw	r3,16(r23)
  8020a0:	90800317 	ldw	r2,12(r18)
  8020a4:	b8800515 	stw	r2,20(r23)
  8020a8:	31404026 	beq	r6,r5,8021ac <_realloc_r+0x5d8>
  8020ac:	20800017 	ldw	r2,0(r4)
  8020b0:	38800015 	stw	r2,0(r7)
  8020b4:	20c00117 	ldw	r3,4(r4)
  8020b8:	38c00115 	stw	r3,4(r7)
  8020bc:	20800217 	ldw	r2,8(r4)
  8020c0:	38800215 	stw	r2,8(r7)
  8020c4:	d8c00117 	ldw	r3,4(sp)
  8020c8:	bf0b883a 	add	r5,r23,fp
  8020cc:	b009883a 	mov	r4,r22
  8020d0:	1f05c83a 	sub	r2,r3,fp
  8020d4:	10800054 	ori	r2,r2,1
  8020d8:	28800115 	stw	r2,4(r5)
  8020dc:	b8c00117 	ldw	r3,4(r23)
  8020e0:	00802034 	movhi	r2,128
  8020e4:	109cfb04 	addi	r2,r2,29676
  8020e8:	11400215 	stw	r5,8(r2)
  8020ec:	18c0004c 	andi	r3,r3,1
  8020f0:	e0c6b03a 	or	r3,fp,r3
  8020f4:	b8c00115 	stw	r3,4(r23)
  8020f8:	0803f2c0 	call	803f2c <__malloc_unlock>
  8020fc:	003eeb06 	br	801cac <_realloc_r+0xd8>
  802100:	20800117 	ldw	r2,4(r4)
  802104:	00ffff04 	movi	r3,-4
  802108:	800f883a 	mov	r7,r16
  80210c:	10c4703a 	and	r2,r2,r3
  802110:	98a9883a 	add	r20,r19,r2
  802114:	84000204 	addi	r16,r16,8
  802118:	003ecf06 	br	801c58 <_realloc_r+0x84>
  80211c:	900b883a 	mov	r5,r18
  802120:	8009883a 	mov	r4,r16
  802124:	08019080 	call	801908 <memmove>
  802128:	dd000017 	ldw	r20,0(sp)
  80212c:	b80f883a 	mov	r7,r23
  802130:	003ec906 	br	801c58 <_realloc_r+0x84>
  802134:	900b883a 	mov	r5,r18
  802138:	8009883a 	mov	r4,r16
  80213c:	08019080 	call	801908 <memmove>
  802140:	b80f883a 	mov	r7,r23
  802144:	003ec406 	br	801c58 <_realloc_r+0x84>
  802148:	90c00417 	ldw	r3,16(r18)
  80214c:	89400604 	addi	r5,r17,24
  802150:	91000604 	addi	r4,r18,24
  802154:	88c00415 	stw	r3,16(r17)
  802158:	90800517 	ldw	r2,20(r18)
  80215c:	88800515 	stw	r2,20(r17)
  802160:	003f6806 	br	801f04 <_realloc_r+0x330>
  802164:	900b883a 	mov	r5,r18
  802168:	8809883a 	mov	r4,r17
  80216c:	08019080 	call	801908 <memmove>
  802170:	003fd406 	br	8020c4 <_realloc_r+0x4f0>
  802174:	90c00417 	ldw	r3,16(r18)
  802178:	91000604 	addi	r4,r18,24
  80217c:	ba000804 	addi	r8,r23,32
  802180:	b8c00615 	stw	r3,24(r23)
  802184:	90800517 	ldw	r2,20(r18)
  802188:	b8800715 	stw	r2,28(r23)
  80218c:	003f1206 	br	801dd8 <_realloc_r+0x204>
  802190:	90c00417 	ldw	r3,16(r18)
  802194:	91000604 	addi	r4,r18,24
  802198:	ba000804 	addi	r8,r23,32
  80219c:	b8c00615 	stw	r3,24(r23)
  8021a0:	90800517 	ldw	r2,20(r18)
  8021a4:	b8800715 	stw	r2,28(r23)
  8021a8:	003f3206 	br	801e74 <_realloc_r+0x2a0>
  8021ac:	90c00417 	ldw	r3,16(r18)
  8021b0:	91000604 	addi	r4,r18,24
  8021b4:	b9c00804 	addi	r7,r23,32
  8021b8:	b8c00615 	stw	r3,24(r23)
  8021bc:	90800517 	ldw	r2,20(r18)
  8021c0:	b8800715 	stw	r2,28(r23)
  8021c4:	003fb906 	br	8020ac <_realloc_r+0x4d8>

008021c8 <_sbrk_r>:
  8021c8:	defffd04 	addi	sp,sp,-12
  8021cc:	dc000015 	stw	r16,0(sp)
  8021d0:	04002074 	movhi	r16,129
  8021d4:	84298904 	addi	r16,r16,-23004
  8021d8:	dc400115 	stw	r17,4(sp)
  8021dc:	80000015 	stw	zero,0(r16)
  8021e0:	2023883a 	mov	r17,r4
  8021e4:	2809883a 	mov	r4,r5
  8021e8:	dfc00215 	stw	ra,8(sp)
  8021ec:	080412c0 	call	80412c <sbrk>
  8021f0:	1007883a 	mov	r3,r2
  8021f4:	00bfffc4 	movi	r2,-1
  8021f8:	18800626 	beq	r3,r2,802214 <_sbrk_r+0x4c>
  8021fc:	1805883a 	mov	r2,r3
  802200:	dfc00217 	ldw	ra,8(sp)
  802204:	dc400117 	ldw	r17,4(sp)
  802208:	dc000017 	ldw	r16,0(sp)
  80220c:	dec00304 	addi	sp,sp,12
  802210:	f800283a 	ret
  802214:	80800017 	ldw	r2,0(r16)
  802218:	103ff826 	beq	r2,zero,8021fc <_sbrk_r+0x34>
  80221c:	88800015 	stw	r2,0(r17)
  802220:	1805883a 	mov	r2,r3
  802224:	dfc00217 	ldw	ra,8(sp)
  802228:	dc400117 	ldw	r17,4(sp)
  80222c:	dc000017 	ldw	r16,0(sp)
  802230:	dec00304 	addi	sp,sp,12
  802234:	f800283a 	ret

00802238 <__swbuf_r>:
  802238:	defffc04 	addi	sp,sp,-16
  80223c:	dc400215 	stw	r17,8(sp)
  802240:	dc000115 	stw	r16,4(sp)
  802244:	dfc00315 	stw	ra,12(sp)
  802248:	2023883a 	mov	r17,r4
  80224c:	2821883a 	mov	r16,r5
  802250:	20000226 	beq	r4,zero,80225c <__swbuf_r+0x24>
  802254:	20800e17 	ldw	r2,56(r4)
  802258:	10002f26 	beq	r2,zero,802318 <__swbuf_r+0xe0>
  80225c:	3080030b 	ldhu	r2,12(r6)
  802260:	30c00617 	ldw	r3,24(r6)
  802264:	1080020c 	andi	r2,r2,8
  802268:	30c00215 	stw	r3,8(r6)
  80226c:	10002226 	beq	r2,zero,8022f8 <__swbuf_r+0xc0>
  802270:	30c00417 	ldw	r3,16(r6)
  802274:	18002026 	beq	r3,zero,8022f8 <__swbuf_r+0xc0>
  802278:	31000017 	ldw	r4,0(r6)
  80227c:	30800517 	ldw	r2,20(r6)
  802280:	20c7c83a 	sub	r3,r4,r3
  802284:	18802f0e 	bge	r3,r2,802344 <__swbuf_r+0x10c>
  802288:	19400044 	addi	r5,r3,1
  80228c:	30800217 	ldw	r2,8(r6)
  802290:	84003fcc 	andi	r16,r16,255
  802294:	20c00044 	addi	r3,r4,1
  802298:	10bfffc4 	addi	r2,r2,-1
  80229c:	30800215 	stw	r2,8(r6)
  8022a0:	24000005 	stb	r16,0(r4)
  8022a4:	30800517 	ldw	r2,20(r6)
  8022a8:	30c00015 	stw	r3,0(r6)
  8022ac:	11400c26 	beq	r2,r5,8022e0 <__swbuf_r+0xa8>
  8022b0:	3080030b 	ldhu	r2,12(r6)
  8022b4:	1080004c 	andi	r2,r2,1
  8022b8:	1005003a 	cmpeq	r2,r2,zero
  8022bc:	10000626 	beq	r2,zero,8022d8 <__swbuf_r+0xa0>
  8022c0:	8005883a 	mov	r2,r16
  8022c4:	dfc00317 	ldw	ra,12(sp)
  8022c8:	dc400217 	ldw	r17,8(sp)
  8022cc:	dc000117 	ldw	r16,4(sp)
  8022d0:	dec00404 	addi	sp,sp,16
  8022d4:	f800283a 	ret
  8022d8:	00800284 	movi	r2,10
  8022dc:	80bff81e 	bne	r16,r2,8022c0 <__swbuf_r+0x88>
  8022e0:	8809883a 	mov	r4,r17
  8022e4:	300b883a 	mov	r5,r6
  8022e8:	08024c00 	call	8024c0 <_fflush_r>
  8022ec:	103ff426 	beq	r2,zero,8022c0 <__swbuf_r+0x88>
  8022f0:	043fffc4 	movi	r16,-1
  8022f4:	003ff206 	br	8022c0 <__swbuf_r+0x88>
  8022f8:	300b883a 	mov	r5,r6
  8022fc:	8809883a 	mov	r4,r17
  802300:	d9800015 	stw	r6,0(sp)
  802304:	08023840 	call	802384 <__swsetup_r>
  802308:	d9800017 	ldw	r6,0(sp)
  80230c:	1000061e 	bne	r2,zero,802328 <__swbuf_r+0xf0>
  802310:	30c00417 	ldw	r3,16(r6)
  802314:	003fd806 	br	802278 <__swbuf_r+0x40>
  802318:	d9800015 	stw	r6,0(sp)
  80231c:	08027580 	call	802758 <__sinit>
  802320:	d9800017 	ldw	r6,0(sp)
  802324:	003fcd06 	br	80225c <__swbuf_r+0x24>
  802328:	3080030b 	ldhu	r2,12(r6)
  80232c:	00c00244 	movi	r3,9
  802330:	043fffc4 	movi	r16,-1
  802334:	10801014 	ori	r2,r2,64
  802338:	3080030d 	sth	r2,12(r6)
  80233c:	88c00015 	stw	r3,0(r17)
  802340:	003fdf06 	br	8022c0 <__swbuf_r+0x88>
  802344:	300b883a 	mov	r5,r6
  802348:	8809883a 	mov	r4,r17
  80234c:	d9800015 	stw	r6,0(sp)
  802350:	08024c00 	call	8024c0 <_fflush_r>
  802354:	d9800017 	ldw	r6,0(sp)
  802358:	103fe51e 	bne	r2,zero,8022f0 <__swbuf_r+0xb8>
  80235c:	31000017 	ldw	r4,0(r6)
  802360:	01400044 	movi	r5,1
  802364:	003fc906 	br	80228c <__swbuf_r+0x54>

00802368 <__swbuf>:
  802368:	01802074 	movhi	r6,129
  80236c:	31a2b004 	addi	r6,r6,-30016
  802370:	2007883a 	mov	r3,r4
  802374:	31000017 	ldw	r4,0(r6)
  802378:	280d883a 	mov	r6,r5
  80237c:	180b883a 	mov	r5,r3
  802380:	08022381 	jmpi	802238 <__swbuf_r>

00802384 <__swsetup_r>:
  802384:	00802074 	movhi	r2,129
  802388:	10a2b004 	addi	r2,r2,-30016
  80238c:	10c00017 	ldw	r3,0(r2)
  802390:	defffd04 	addi	sp,sp,-12
  802394:	dc400115 	stw	r17,4(sp)
  802398:	dc000015 	stw	r16,0(sp)
  80239c:	dfc00215 	stw	ra,8(sp)
  8023a0:	2023883a 	mov	r17,r4
  8023a4:	2821883a 	mov	r16,r5
  8023a8:	18000226 	beq	r3,zero,8023b4 <__swsetup_r+0x30>
  8023ac:	18800e17 	ldw	r2,56(r3)
  8023b0:	10001f26 	beq	r2,zero,802430 <__swsetup_r+0xac>
  8023b4:	8100030b 	ldhu	r4,12(r16)
  8023b8:	2080020c 	andi	r2,r4,8
  8023bc:	10002826 	beq	r2,zero,802460 <__swsetup_r+0xdc>
  8023c0:	81400417 	ldw	r5,16(r16)
  8023c4:	28001d26 	beq	r5,zero,80243c <__swsetup_r+0xb8>
  8023c8:	2080004c 	andi	r2,r4,1
  8023cc:	1005003a 	cmpeq	r2,r2,zero
  8023d0:	10000b26 	beq	r2,zero,802400 <__swsetup_r+0x7c>
  8023d4:	2080008c 	andi	r2,r4,2
  8023d8:	10001226 	beq	r2,zero,802424 <__swsetup_r+0xa0>
  8023dc:	0005883a 	mov	r2,zero
  8023e0:	80800215 	stw	r2,8(r16)
  8023e4:	28000b26 	beq	r5,zero,802414 <__swsetup_r+0x90>
  8023e8:	0005883a 	mov	r2,zero
  8023ec:	dfc00217 	ldw	ra,8(sp)
  8023f0:	dc400117 	ldw	r17,4(sp)
  8023f4:	dc000017 	ldw	r16,0(sp)
  8023f8:	dec00304 	addi	sp,sp,12
  8023fc:	f800283a 	ret
  802400:	80800517 	ldw	r2,20(r16)
  802404:	80000215 	stw	zero,8(r16)
  802408:	0085c83a 	sub	r2,zero,r2
  80240c:	80800615 	stw	r2,24(r16)
  802410:	283ff51e 	bne	r5,zero,8023e8 <__swsetup_r+0x64>
  802414:	2080200c 	andi	r2,r4,128
  802418:	103ff326 	beq	r2,zero,8023e8 <__swsetup_r+0x64>
  80241c:	00bfffc4 	movi	r2,-1
  802420:	003ff206 	br	8023ec <__swsetup_r+0x68>
  802424:	80800517 	ldw	r2,20(r16)
  802428:	80800215 	stw	r2,8(r16)
  80242c:	003fed06 	br	8023e4 <__swsetup_r+0x60>
  802430:	1809883a 	mov	r4,r3
  802434:	08027580 	call	802758 <__sinit>
  802438:	003fde06 	br	8023b4 <__swsetup_r+0x30>
  80243c:	20c0a00c 	andi	r3,r4,640
  802440:	00808004 	movi	r2,512
  802444:	18bfe026 	beq	r3,r2,8023c8 <__swsetup_r+0x44>
  802448:	8809883a 	mov	r4,r17
  80244c:	800b883a 	mov	r5,r16
  802450:	0802f700 	call	802f70 <__smakebuf_r>
  802454:	8100030b 	ldhu	r4,12(r16)
  802458:	81400417 	ldw	r5,16(r16)
  80245c:	003fda06 	br	8023c8 <__swsetup_r+0x44>
  802460:	2080040c 	andi	r2,r4,16
  802464:	103fed26 	beq	r2,zero,80241c <__swsetup_r+0x98>
  802468:	2080010c 	andi	r2,r4,4
  80246c:	10001226 	beq	r2,zero,8024b8 <__swsetup_r+0x134>
  802470:	81400c17 	ldw	r5,48(r16)
  802474:	28000526 	beq	r5,zero,80248c <__swsetup_r+0x108>
  802478:	80801004 	addi	r2,r16,64
  80247c:	28800226 	beq	r5,r2,802488 <__swsetup_r+0x104>
  802480:	8809883a 	mov	r4,r17
  802484:	0802adc0 	call	802adc <_free_r>
  802488:	80000c15 	stw	zero,48(r16)
  80248c:	8080030b 	ldhu	r2,12(r16)
  802490:	81400417 	ldw	r5,16(r16)
  802494:	80000115 	stw	zero,4(r16)
  802498:	10bff6cc 	andi	r2,r2,65499
  80249c:	8080030d 	sth	r2,12(r16)
  8024a0:	81400015 	stw	r5,0(r16)
  8024a4:	8080030b 	ldhu	r2,12(r16)
  8024a8:	10800214 	ori	r2,r2,8
  8024ac:	113fffcc 	andi	r4,r2,65535
  8024b0:	8080030d 	sth	r2,12(r16)
  8024b4:	003fc306 	br	8023c4 <__swsetup_r+0x40>
  8024b8:	81400417 	ldw	r5,16(r16)
  8024bc:	003ff906 	br	8024a4 <__swsetup_r+0x120>

008024c0 <_fflush_r>:
  8024c0:	defffb04 	addi	sp,sp,-20
  8024c4:	dcc00315 	stw	r19,12(sp)
  8024c8:	dc800215 	stw	r18,8(sp)
  8024cc:	dfc00415 	stw	ra,16(sp)
  8024d0:	dc400115 	stw	r17,4(sp)
  8024d4:	dc000015 	stw	r16,0(sp)
  8024d8:	2027883a 	mov	r19,r4
  8024dc:	2825883a 	mov	r18,r5
  8024e0:	20000226 	beq	r4,zero,8024ec <_fflush_r+0x2c>
  8024e4:	20800e17 	ldw	r2,56(r4)
  8024e8:	10005626 	beq	r2,zero,802644 <_fflush_r+0x184>
  8024ec:	9100030b 	ldhu	r4,12(r18)
  8024f0:	20ffffcc 	andi	r3,r4,65535
  8024f4:	18e0001c 	xori	r3,r3,32768
  8024f8:	18e00004 	addi	r3,r3,-32768
  8024fc:	1880020c 	andi	r2,r3,8
  802500:	1000261e 	bne	r2,zero,80259c <_fflush_r+0xdc>
  802504:	90c00117 	ldw	r3,4(r18)
  802508:	20820014 	ori	r2,r4,2048
  80250c:	9080030d 	sth	r2,12(r18)
  802510:	1009883a 	mov	r4,r2
  802514:	00c0400e 	bge	zero,r3,802618 <_fflush_r+0x158>
  802518:	92000a17 	ldw	r8,40(r18)
  80251c:	40004026 	beq	r8,zero,802620 <_fflush_r+0x160>
  802520:	2084000c 	andi	r2,r4,4096
  802524:	10005326 	beq	r2,zero,802674 <_fflush_r+0x1b4>
  802528:	94001417 	ldw	r16,80(r18)
  80252c:	9080030b 	ldhu	r2,12(r18)
  802530:	1080010c 	andi	r2,r2,4
  802534:	1000481e 	bne	r2,zero,802658 <_fflush_r+0x198>
  802538:	91400717 	ldw	r5,28(r18)
  80253c:	9809883a 	mov	r4,r19
  802540:	800d883a 	mov	r6,r16
  802544:	000f883a 	mov	r7,zero
  802548:	403ee83a 	callr	r8
  80254c:	8080261e 	bne	r16,r2,8025e8 <_fflush_r+0x128>
  802550:	9080030b 	ldhu	r2,12(r18)
  802554:	91000417 	ldw	r4,16(r18)
  802558:	90000115 	stw	zero,4(r18)
  80255c:	10bdffcc 	andi	r2,r2,63487
  802560:	10ffffcc 	andi	r3,r2,65535
  802564:	18c4000c 	andi	r3,r3,4096
  802568:	9080030d 	sth	r2,12(r18)
  80256c:	91000015 	stw	r4,0(r18)
  802570:	18002b26 	beq	r3,zero,802620 <_fflush_r+0x160>
  802574:	0007883a 	mov	r3,zero
  802578:	1805883a 	mov	r2,r3
  80257c:	94001415 	stw	r16,80(r18)
  802580:	dfc00417 	ldw	ra,16(sp)
  802584:	dcc00317 	ldw	r19,12(sp)
  802588:	dc800217 	ldw	r18,8(sp)
  80258c:	dc400117 	ldw	r17,4(sp)
  802590:	dc000017 	ldw	r16,0(sp)
  802594:	dec00504 	addi	sp,sp,20
  802598:	f800283a 	ret
  80259c:	94400417 	ldw	r17,16(r18)
  8025a0:	88001f26 	beq	r17,zero,802620 <_fflush_r+0x160>
  8025a4:	90800017 	ldw	r2,0(r18)
  8025a8:	18c000cc 	andi	r3,r3,3
  8025ac:	94400015 	stw	r17,0(r18)
  8025b0:	1461c83a 	sub	r16,r2,r17
  8025b4:	18002526 	beq	r3,zero,80264c <_fflush_r+0x18c>
  8025b8:	0005883a 	mov	r2,zero
  8025bc:	90800215 	stw	r2,8(r18)
  8025c0:	0400170e 	bge	zero,r16,802620 <_fflush_r+0x160>
  8025c4:	90c00917 	ldw	r3,36(r18)
  8025c8:	91400717 	ldw	r5,28(r18)
  8025cc:	880d883a 	mov	r6,r17
  8025d0:	800f883a 	mov	r7,r16
  8025d4:	9809883a 	mov	r4,r19
  8025d8:	183ee83a 	callr	r3
  8025dc:	88a3883a 	add	r17,r17,r2
  8025e0:	80a1c83a 	sub	r16,r16,r2
  8025e4:	00bff616 	blt	zero,r2,8025c0 <_fflush_r+0x100>
  8025e8:	9080030b 	ldhu	r2,12(r18)
  8025ec:	00ffffc4 	movi	r3,-1
  8025f0:	10801014 	ori	r2,r2,64
  8025f4:	9080030d 	sth	r2,12(r18)
  8025f8:	1805883a 	mov	r2,r3
  8025fc:	dfc00417 	ldw	ra,16(sp)
  802600:	dcc00317 	ldw	r19,12(sp)
  802604:	dc800217 	ldw	r18,8(sp)
  802608:	dc400117 	ldw	r17,4(sp)
  80260c:	dc000017 	ldw	r16,0(sp)
  802610:	dec00504 	addi	sp,sp,20
  802614:	f800283a 	ret
  802618:	90800f17 	ldw	r2,60(r18)
  80261c:	00bfbe16 	blt	zero,r2,802518 <_fflush_r+0x58>
  802620:	0007883a 	mov	r3,zero
  802624:	1805883a 	mov	r2,r3
  802628:	dfc00417 	ldw	ra,16(sp)
  80262c:	dcc00317 	ldw	r19,12(sp)
  802630:	dc800217 	ldw	r18,8(sp)
  802634:	dc400117 	ldw	r17,4(sp)
  802638:	dc000017 	ldw	r16,0(sp)
  80263c:	dec00504 	addi	sp,sp,20
  802640:	f800283a 	ret
  802644:	08027580 	call	802758 <__sinit>
  802648:	003fa806 	br	8024ec <_fflush_r+0x2c>
  80264c:	90800517 	ldw	r2,20(r18)
  802650:	90800215 	stw	r2,8(r18)
  802654:	003fda06 	br	8025c0 <_fflush_r+0x100>
  802658:	90800117 	ldw	r2,4(r18)
  80265c:	90c00c17 	ldw	r3,48(r18)
  802660:	80a1c83a 	sub	r16,r16,r2
  802664:	183fb426 	beq	r3,zero,802538 <_fflush_r+0x78>
  802668:	90800f17 	ldw	r2,60(r18)
  80266c:	80a1c83a 	sub	r16,r16,r2
  802670:	003fb106 	br	802538 <_fflush_r+0x78>
  802674:	91400717 	ldw	r5,28(r18)
  802678:	9809883a 	mov	r4,r19
  80267c:	000d883a 	mov	r6,zero
  802680:	01c00044 	movi	r7,1
  802684:	403ee83a 	callr	r8
  802688:	1021883a 	mov	r16,r2
  80268c:	00bfffc4 	movi	r2,-1
  802690:	80800226 	beq	r16,r2,80269c <_fflush_r+0x1dc>
  802694:	92000a17 	ldw	r8,40(r18)
  802698:	003fa406 	br	80252c <_fflush_r+0x6c>
  80269c:	98c00017 	ldw	r3,0(r19)
  8026a0:	00800744 	movi	r2,29
  8026a4:	18bfde26 	beq	r3,r2,802620 <_fflush_r+0x160>
  8026a8:	9080030b 	ldhu	r2,12(r18)
  8026ac:	8007883a 	mov	r3,r16
  8026b0:	10801014 	ori	r2,r2,64
  8026b4:	9080030d 	sth	r2,12(r18)
  8026b8:	003fcf06 	br	8025f8 <_fflush_r+0x138>

008026bc <fflush>:
  8026bc:	01402034 	movhi	r5,128
  8026c0:	29493004 	addi	r5,r5,9408
  8026c4:	2007883a 	mov	r3,r4
  8026c8:	20000526 	beq	r4,zero,8026e0 <fflush+0x24>
  8026cc:	00802074 	movhi	r2,129
  8026d0:	10a2b004 	addi	r2,r2,-30016
  8026d4:	11000017 	ldw	r4,0(r2)
  8026d8:	180b883a 	mov	r5,r3
  8026dc:	08024c01 	jmpi	8024c0 <_fflush_r>
  8026e0:	00802074 	movhi	r2,129
  8026e4:	10a2b104 	addi	r2,r2,-30012
  8026e8:	11000017 	ldw	r4,0(r2)
  8026ec:	0802df01 	jmpi	802df0 <_fwalk_reent>

008026f0 <std>:
  8026f0:	00802034 	movhi	r2,128
  8026f4:	108c6704 	addi	r2,r2,12700
  8026f8:	20800b15 	stw	r2,44(r4)
  8026fc:	00802034 	movhi	r2,128
  802700:	108ca204 	addi	r2,r2,12936
  802704:	20800815 	stw	r2,32(r4)
  802708:	00c02034 	movhi	r3,128
  80270c:	18cc8304 	addi	r3,r3,12812
  802710:	00802034 	movhi	r2,128
  802714:	108c6904 	addi	r2,r2,12708
  802718:	2140030d 	sth	r5,12(r4)
  80271c:	2180038d 	sth	r6,14(r4)
  802720:	20c00915 	stw	r3,36(r4)
  802724:	20800a15 	stw	r2,40(r4)
  802728:	20000015 	stw	zero,0(r4)
  80272c:	20000115 	stw	zero,4(r4)
  802730:	20000215 	stw	zero,8(r4)
  802734:	20000415 	stw	zero,16(r4)
  802738:	20000515 	stw	zero,20(r4)
  80273c:	20000615 	stw	zero,24(r4)
  802740:	21000715 	stw	r4,28(r4)
  802744:	f800283a 	ret

00802748 <__sfp_lock_acquire>:
  802748:	f800283a 	ret

0080274c <__sfp_lock_release>:
  80274c:	f800283a 	ret

00802750 <__sinit_lock_acquire>:
  802750:	f800283a 	ret

00802754 <__sinit_lock_release>:
  802754:	f800283a 	ret

00802758 <__sinit>:
  802758:	20800e17 	ldw	r2,56(r4)
  80275c:	defffd04 	addi	sp,sp,-12
  802760:	dc400115 	stw	r17,4(sp)
  802764:	dc000015 	stw	r16,0(sp)
  802768:	dfc00215 	stw	ra,8(sp)
  80276c:	04400044 	movi	r17,1
  802770:	01400104 	movi	r5,4
  802774:	000d883a 	mov	r6,zero
  802778:	2021883a 	mov	r16,r4
  80277c:	2200bb04 	addi	r8,r4,748
  802780:	200f883a 	mov	r7,r4
  802784:	10000526 	beq	r2,zero,80279c <__sinit+0x44>
  802788:	dfc00217 	ldw	ra,8(sp)
  80278c:	dc400117 	ldw	r17,4(sp)
  802790:	dc000017 	ldw	r16,0(sp)
  802794:	dec00304 	addi	sp,sp,12
  802798:	f800283a 	ret
  80279c:	21000117 	ldw	r4,4(r4)
  8027a0:	00802034 	movhi	r2,128
  8027a4:	108a0f04 	addi	r2,r2,10300
  8027a8:	00c000c4 	movi	r3,3
  8027ac:	80800f15 	stw	r2,60(r16)
  8027b0:	80c0b915 	stw	r3,740(r16)
  8027b4:	8200ba15 	stw	r8,744(r16)
  8027b8:	84400e15 	stw	r17,56(r16)
  8027bc:	8000b815 	stw	zero,736(r16)
  8027c0:	08026f00 	call	8026f0 <std>
  8027c4:	81000217 	ldw	r4,8(r16)
  8027c8:	880d883a 	mov	r6,r17
  8027cc:	800f883a 	mov	r7,r16
  8027d0:	01400284 	movi	r5,10
  8027d4:	08026f00 	call	8026f0 <std>
  8027d8:	81000317 	ldw	r4,12(r16)
  8027dc:	800f883a 	mov	r7,r16
  8027e0:	01400484 	movi	r5,18
  8027e4:	01800084 	movi	r6,2
  8027e8:	dfc00217 	ldw	ra,8(sp)
  8027ec:	dc400117 	ldw	r17,4(sp)
  8027f0:	dc000017 	ldw	r16,0(sp)
  8027f4:	dec00304 	addi	sp,sp,12
  8027f8:	08026f01 	jmpi	8026f0 <std>

008027fc <__fp_lock>:
  8027fc:	0005883a 	mov	r2,zero
  802800:	f800283a 	ret

00802804 <__fp_unlock>:
  802804:	0005883a 	mov	r2,zero
  802808:	f800283a 	ret

0080280c <__fp_unlock_all>:
  80280c:	00802074 	movhi	r2,129
  802810:	10a2b004 	addi	r2,r2,-30016
  802814:	11000017 	ldw	r4,0(r2)
  802818:	01402034 	movhi	r5,128
  80281c:	294a0104 	addi	r5,r5,10244
  802820:	0802eb81 	jmpi	802eb8 <_fwalk>

00802824 <__fp_lock_all>:
  802824:	00802074 	movhi	r2,129
  802828:	10a2b004 	addi	r2,r2,-30016
  80282c:	11000017 	ldw	r4,0(r2)
  802830:	01402034 	movhi	r5,128
  802834:	2949ff04 	addi	r5,r5,10236
  802838:	0802eb81 	jmpi	802eb8 <_fwalk>

0080283c <_cleanup_r>:
  80283c:	01402034 	movhi	r5,128
  802840:	294d3804 	addi	r5,r5,13536
  802844:	0802eb81 	jmpi	802eb8 <_fwalk>

00802848 <_cleanup>:
  802848:	00802074 	movhi	r2,129
  80284c:	10a2b104 	addi	r2,r2,-30012
  802850:	11000017 	ldw	r4,0(r2)
  802854:	080283c1 	jmpi	80283c <_cleanup_r>

00802858 <__sfmoreglue>:
  802858:	defffc04 	addi	sp,sp,-16
  80285c:	dc400115 	stw	r17,4(sp)
  802860:	2c401724 	muli	r17,r5,92
  802864:	dc800215 	stw	r18,8(sp)
  802868:	2825883a 	mov	r18,r5
  80286c:	89400304 	addi	r5,r17,12
  802870:	dc000015 	stw	r16,0(sp)
  802874:	dfc00315 	stw	ra,12(sp)
  802878:	08010e40 	call	8010e4 <_malloc_r>
  80287c:	0021883a 	mov	r16,zero
  802880:	880d883a 	mov	r6,r17
  802884:	000b883a 	mov	r5,zero
  802888:	10000626 	beq	r2,zero,8028a4 <__sfmoreglue+0x4c>
  80288c:	11000304 	addi	r4,r2,12
  802890:	14800115 	stw	r18,4(r2)
  802894:	10000015 	stw	zero,0(r2)
  802898:	11000215 	stw	r4,8(r2)
  80289c:	1021883a 	mov	r16,r2
  8028a0:	08031040 	call	803104 <memset>
  8028a4:	8005883a 	mov	r2,r16
  8028a8:	dfc00317 	ldw	ra,12(sp)
  8028ac:	dc800217 	ldw	r18,8(sp)
  8028b0:	dc400117 	ldw	r17,4(sp)
  8028b4:	dc000017 	ldw	r16,0(sp)
  8028b8:	dec00404 	addi	sp,sp,16
  8028bc:	f800283a 	ret

008028c0 <__sfp>:
  8028c0:	defffd04 	addi	sp,sp,-12
  8028c4:	00802074 	movhi	r2,129
  8028c8:	10a2b104 	addi	r2,r2,-30012
  8028cc:	dc000015 	stw	r16,0(sp)
  8028d0:	14000017 	ldw	r16,0(r2)
  8028d4:	dc400115 	stw	r17,4(sp)
  8028d8:	dfc00215 	stw	ra,8(sp)
  8028dc:	80800e17 	ldw	r2,56(r16)
  8028e0:	2023883a 	mov	r17,r4
  8028e4:	10002626 	beq	r2,zero,802980 <__sfp+0xc0>
  8028e8:	8400b804 	addi	r16,r16,736
  8028ec:	80800117 	ldw	r2,4(r16)
  8028f0:	81000217 	ldw	r4,8(r16)
  8028f4:	10ffffc4 	addi	r3,r2,-1
  8028f8:	18000916 	blt	r3,zero,802920 <__sfp+0x60>
  8028fc:	2080030f 	ldh	r2,12(r4)
  802900:	10000b26 	beq	r2,zero,802930 <__sfp+0x70>
  802904:	017fffc4 	movi	r5,-1
  802908:	00000206 	br	802914 <__sfp+0x54>
  80290c:	2080030f 	ldh	r2,12(r4)
  802910:	10000726 	beq	r2,zero,802930 <__sfp+0x70>
  802914:	18ffffc4 	addi	r3,r3,-1
  802918:	21001704 	addi	r4,r4,92
  80291c:	197ffb1e 	bne	r3,r5,80290c <__sfp+0x4c>
  802920:	80800017 	ldw	r2,0(r16)
  802924:	10001926 	beq	r2,zero,80298c <__sfp+0xcc>
  802928:	1021883a 	mov	r16,r2
  80292c:	003fef06 	br	8028ec <__sfp+0x2c>
  802930:	00bfffc4 	movi	r2,-1
  802934:	00c00044 	movi	r3,1
  802938:	2080038d 	sth	r2,14(r4)
  80293c:	20c0030d 	sth	r3,12(r4)
  802940:	20000015 	stw	zero,0(r4)
  802944:	20000215 	stw	zero,8(r4)
  802948:	20000115 	stw	zero,4(r4)
  80294c:	20000415 	stw	zero,16(r4)
  802950:	20000515 	stw	zero,20(r4)
  802954:	20000615 	stw	zero,24(r4)
  802958:	20000c15 	stw	zero,48(r4)
  80295c:	20000d15 	stw	zero,52(r4)
  802960:	20001115 	stw	zero,68(r4)
  802964:	20001215 	stw	zero,72(r4)
  802968:	2005883a 	mov	r2,r4
  80296c:	dfc00217 	ldw	ra,8(sp)
  802970:	dc400117 	ldw	r17,4(sp)
  802974:	dc000017 	ldw	r16,0(sp)
  802978:	dec00304 	addi	sp,sp,12
  80297c:	f800283a 	ret
  802980:	8009883a 	mov	r4,r16
  802984:	08027580 	call	802758 <__sinit>
  802988:	003fd706 	br	8028e8 <__sfp+0x28>
  80298c:	8809883a 	mov	r4,r17
  802990:	01400104 	movi	r5,4
  802994:	08028580 	call	802858 <__sfmoreglue>
  802998:	80800015 	stw	r2,0(r16)
  80299c:	103fe21e 	bne	r2,zero,802928 <__sfp+0x68>
  8029a0:	00800304 	movi	r2,12
  8029a4:	0009883a 	mov	r4,zero
  8029a8:	88800015 	stw	r2,0(r17)
  8029ac:	003fee06 	br	802968 <__sfp+0xa8>

008029b0 <_malloc_trim_r>:
  8029b0:	defffb04 	addi	sp,sp,-20
  8029b4:	dcc00315 	stw	r19,12(sp)
  8029b8:	04c02034 	movhi	r19,128
  8029bc:	9cdcfb04 	addi	r19,r19,29676
  8029c0:	dc800215 	stw	r18,8(sp)
  8029c4:	dc400115 	stw	r17,4(sp)
  8029c8:	dc000015 	stw	r16,0(sp)
  8029cc:	2823883a 	mov	r17,r5
  8029d0:	2025883a 	mov	r18,r4
  8029d4:	dfc00415 	stw	ra,16(sp)
  8029d8:	0803f0c0 	call	803f0c <__malloc_lock>
  8029dc:	98800217 	ldw	r2,8(r19)
  8029e0:	9009883a 	mov	r4,r18
  8029e4:	000b883a 	mov	r5,zero
  8029e8:	10c00117 	ldw	r3,4(r2)
  8029ec:	00bfff04 	movi	r2,-4
  8029f0:	18a0703a 	and	r16,r3,r2
  8029f4:	8463c83a 	sub	r17,r16,r17
  8029f8:	8c43fbc4 	addi	r17,r17,4079
  8029fc:	8822d33a 	srli	r17,r17,12
  802a00:	0083ffc4 	movi	r2,4095
  802a04:	8c7fffc4 	addi	r17,r17,-1
  802a08:	8822933a 	slli	r17,r17,12
  802a0c:	1440060e 	bge	r2,r17,802a28 <_malloc_trim_r+0x78>
  802a10:	08021c80 	call	8021c8 <_sbrk_r>
  802a14:	98c00217 	ldw	r3,8(r19)
  802a18:	9009883a 	mov	r4,r18
  802a1c:	044bc83a 	sub	r5,zero,r17
  802a20:	80c7883a 	add	r3,r16,r3
  802a24:	10c00926 	beq	r2,r3,802a4c <_malloc_trim_r+0x9c>
  802a28:	0803f2c0 	call	803f2c <__malloc_unlock>
  802a2c:	0005883a 	mov	r2,zero
  802a30:	dfc00417 	ldw	ra,16(sp)
  802a34:	dcc00317 	ldw	r19,12(sp)
  802a38:	dc800217 	ldw	r18,8(sp)
  802a3c:	dc400117 	ldw	r17,4(sp)
  802a40:	dc000017 	ldw	r16,0(sp)
  802a44:	dec00504 	addi	sp,sp,20
  802a48:	f800283a 	ret
  802a4c:	9009883a 	mov	r4,r18
  802a50:	08021c80 	call	8021c8 <_sbrk_r>
  802a54:	844dc83a 	sub	r6,r16,r17
  802a58:	00ffffc4 	movi	r3,-1
  802a5c:	9009883a 	mov	r4,r18
  802a60:	000b883a 	mov	r5,zero
  802a64:	01c02074 	movhi	r7,129
  802a68:	39e99004 	addi	r7,r7,-22976
  802a6c:	31800054 	ori	r6,r6,1
  802a70:	10c00926 	beq	r2,r3,802a98 <_malloc_trim_r+0xe8>
  802a74:	38800017 	ldw	r2,0(r7)
  802a78:	98c00217 	ldw	r3,8(r19)
  802a7c:	9009883a 	mov	r4,r18
  802a80:	1445c83a 	sub	r2,r2,r17
  802a84:	38800015 	stw	r2,0(r7)
  802a88:	19800115 	stw	r6,4(r3)
  802a8c:	0803f2c0 	call	803f2c <__malloc_unlock>
  802a90:	00800044 	movi	r2,1
  802a94:	003fe606 	br	802a30 <_malloc_trim_r+0x80>
  802a98:	08021c80 	call	8021c8 <_sbrk_r>
  802a9c:	99800217 	ldw	r6,8(r19)
  802aa0:	100f883a 	mov	r7,r2
  802aa4:	9009883a 	mov	r4,r18
  802aa8:	1187c83a 	sub	r3,r2,r6
  802aac:	008003c4 	movi	r2,15
  802ab0:	19400054 	ori	r5,r3,1
  802ab4:	10ffdc0e 	bge	r2,r3,802a28 <_malloc_trim_r+0x78>
  802ab8:	00802074 	movhi	r2,129
  802abc:	10a2b304 	addi	r2,r2,-30004
  802ac0:	10c00017 	ldw	r3,0(r2)
  802ac4:	00802074 	movhi	r2,129
  802ac8:	10a99004 	addi	r2,r2,-22976
  802acc:	31400115 	stw	r5,4(r6)
  802ad0:	38c7c83a 	sub	r3,r7,r3
  802ad4:	10c00015 	stw	r3,0(r2)
  802ad8:	003fd306 	br	802a28 <_malloc_trim_r+0x78>

00802adc <_free_r>:
  802adc:	defffd04 	addi	sp,sp,-12
  802ae0:	dc400115 	stw	r17,4(sp)
  802ae4:	dc000015 	stw	r16,0(sp)
  802ae8:	dfc00215 	stw	ra,8(sp)
  802aec:	2821883a 	mov	r16,r5
  802af0:	2023883a 	mov	r17,r4
  802af4:	28005a26 	beq	r5,zero,802c60 <_free_r+0x184>
  802af8:	0803f0c0 	call	803f0c <__malloc_lock>
  802afc:	823ffe04 	addi	r8,r16,-8
  802b00:	41400117 	ldw	r5,4(r8)
  802b04:	00bfff84 	movi	r2,-2
  802b08:	02802034 	movhi	r10,128
  802b0c:	529cfb04 	addi	r10,r10,29676
  802b10:	288e703a 	and	r7,r5,r2
  802b14:	41cd883a 	add	r6,r8,r7
  802b18:	30c00117 	ldw	r3,4(r6)
  802b1c:	51000217 	ldw	r4,8(r10)
  802b20:	00bfff04 	movi	r2,-4
  802b24:	1892703a 	and	r9,r3,r2
  802b28:	5017883a 	mov	r11,r10
  802b2c:	31006726 	beq	r6,r4,802ccc <_free_r+0x1f0>
  802b30:	2880004c 	andi	r2,r5,1
  802b34:	1005003a 	cmpeq	r2,r2,zero
  802b38:	32400115 	stw	r9,4(r6)
  802b3c:	10001a1e 	bne	r2,zero,802ba8 <_free_r+0xcc>
  802b40:	000b883a 	mov	r5,zero
  802b44:	3247883a 	add	r3,r6,r9
  802b48:	18800117 	ldw	r2,4(r3)
  802b4c:	1080004c 	andi	r2,r2,1
  802b50:	1000231e 	bne	r2,zero,802be0 <_free_r+0x104>
  802b54:	280ac03a 	cmpne	r5,r5,zero
  802b58:	3a4f883a 	add	r7,r7,r9
  802b5c:	2800451e 	bne	r5,zero,802c74 <_free_r+0x198>
  802b60:	31000217 	ldw	r4,8(r6)
  802b64:	00802034 	movhi	r2,128
  802b68:	109cfd04 	addi	r2,r2,29684
  802b6c:	20807b26 	beq	r4,r2,802d5c <_free_r+0x280>
  802b70:	30800317 	ldw	r2,12(r6)
  802b74:	3a07883a 	add	r3,r7,r8
  802b78:	19c00015 	stw	r7,0(r3)
  802b7c:	11000215 	stw	r4,8(r2)
  802b80:	20800315 	stw	r2,12(r4)
  802b84:	38800054 	ori	r2,r7,1
  802b88:	40800115 	stw	r2,4(r8)
  802b8c:	28001a26 	beq	r5,zero,802bf8 <_free_r+0x11c>
  802b90:	8809883a 	mov	r4,r17
  802b94:	dfc00217 	ldw	ra,8(sp)
  802b98:	dc400117 	ldw	r17,4(sp)
  802b9c:	dc000017 	ldw	r16,0(sp)
  802ba0:	dec00304 	addi	sp,sp,12
  802ba4:	0803f2c1 	jmpi	803f2c <__malloc_unlock>
  802ba8:	80bffe17 	ldw	r2,-8(r16)
  802bac:	50c00204 	addi	r3,r10,8
  802bb0:	4091c83a 	sub	r8,r8,r2
  802bb4:	41000217 	ldw	r4,8(r8)
  802bb8:	388f883a 	add	r7,r7,r2
  802bbc:	20c06126 	beq	r4,r3,802d44 <_free_r+0x268>
  802bc0:	40800317 	ldw	r2,12(r8)
  802bc4:	3247883a 	add	r3,r6,r9
  802bc8:	000b883a 	mov	r5,zero
  802bcc:	11000215 	stw	r4,8(r2)
  802bd0:	20800315 	stw	r2,12(r4)
  802bd4:	18800117 	ldw	r2,4(r3)
  802bd8:	1080004c 	andi	r2,r2,1
  802bdc:	103fdd26 	beq	r2,zero,802b54 <_free_r+0x78>
  802be0:	38800054 	ori	r2,r7,1
  802be4:	3a07883a 	add	r3,r7,r8
  802be8:	280ac03a 	cmpne	r5,r5,zero
  802bec:	40800115 	stw	r2,4(r8)
  802bf0:	19c00015 	stw	r7,0(r3)
  802bf4:	283fe61e 	bne	r5,zero,802b90 <_free_r+0xb4>
  802bf8:	00807fc4 	movi	r2,511
  802bfc:	11c01f2e 	bgeu	r2,r7,802c7c <_free_r+0x1a0>
  802c00:	3806d27a 	srli	r3,r7,9
  802c04:	1800481e 	bne	r3,zero,802d28 <_free_r+0x24c>
  802c08:	3804d0fa 	srli	r2,r7,3
  802c0c:	100690fa 	slli	r3,r2,3
  802c10:	1acd883a 	add	r6,r3,r11
  802c14:	31400217 	ldw	r5,8(r6)
  802c18:	31405926 	beq	r6,r5,802d80 <_free_r+0x2a4>
  802c1c:	28800117 	ldw	r2,4(r5)
  802c20:	00ffff04 	movi	r3,-4
  802c24:	10c4703a 	and	r2,r2,r3
  802c28:	3880022e 	bgeu	r7,r2,802c34 <_free_r+0x158>
  802c2c:	29400217 	ldw	r5,8(r5)
  802c30:	317ffa1e 	bne	r6,r5,802c1c <_free_r+0x140>
  802c34:	29800317 	ldw	r6,12(r5)
  802c38:	41800315 	stw	r6,12(r8)
  802c3c:	41400215 	stw	r5,8(r8)
  802c40:	8809883a 	mov	r4,r17
  802c44:	2a000315 	stw	r8,12(r5)
  802c48:	32000215 	stw	r8,8(r6)
  802c4c:	dfc00217 	ldw	ra,8(sp)
  802c50:	dc400117 	ldw	r17,4(sp)
  802c54:	dc000017 	ldw	r16,0(sp)
  802c58:	dec00304 	addi	sp,sp,12
  802c5c:	0803f2c1 	jmpi	803f2c <__malloc_unlock>
  802c60:	dfc00217 	ldw	ra,8(sp)
  802c64:	dc400117 	ldw	r17,4(sp)
  802c68:	dc000017 	ldw	r16,0(sp)
  802c6c:	dec00304 	addi	sp,sp,12
  802c70:	f800283a 	ret
  802c74:	31000217 	ldw	r4,8(r6)
  802c78:	003fbd06 	br	802b70 <_free_r+0x94>
  802c7c:	3806d0fa 	srli	r3,r7,3
  802c80:	00800044 	movi	r2,1
  802c84:	51400117 	ldw	r5,4(r10)
  802c88:	180890fa 	slli	r4,r3,3
  802c8c:	1807d0ba 	srai	r3,r3,2
  802c90:	22c9883a 	add	r4,r4,r11
  802c94:	21800217 	ldw	r6,8(r4)
  802c98:	10c4983a 	sll	r2,r2,r3
  802c9c:	41000315 	stw	r4,12(r8)
  802ca0:	41800215 	stw	r6,8(r8)
  802ca4:	288ab03a 	or	r5,r5,r2
  802ca8:	22000215 	stw	r8,8(r4)
  802cac:	8809883a 	mov	r4,r17
  802cb0:	51400115 	stw	r5,4(r10)
  802cb4:	32000315 	stw	r8,12(r6)
  802cb8:	dfc00217 	ldw	ra,8(sp)
  802cbc:	dc400117 	ldw	r17,4(sp)
  802cc0:	dc000017 	ldw	r16,0(sp)
  802cc4:	dec00304 	addi	sp,sp,12
  802cc8:	0803f2c1 	jmpi	803f2c <__malloc_unlock>
  802ccc:	2880004c 	andi	r2,r5,1
  802cd0:	3a4d883a 	add	r6,r7,r9
  802cd4:	1000071e 	bne	r2,zero,802cf4 <_free_r+0x218>
  802cd8:	80bffe17 	ldw	r2,-8(r16)
  802cdc:	4091c83a 	sub	r8,r8,r2
  802ce0:	41000317 	ldw	r4,12(r8)
  802ce4:	40c00217 	ldw	r3,8(r8)
  802ce8:	308d883a 	add	r6,r6,r2
  802cec:	20c00215 	stw	r3,8(r4)
  802cf0:	19000315 	stw	r4,12(r3)
  802cf4:	00802074 	movhi	r2,129
  802cf8:	10a2b204 	addi	r2,r2,-30008
  802cfc:	11000017 	ldw	r4,0(r2)
  802d00:	30c00054 	ori	r3,r6,1
  802d04:	52000215 	stw	r8,8(r10)
  802d08:	40c00115 	stw	r3,4(r8)
  802d0c:	313fa036 	bltu	r6,r4,802b90 <_free_r+0xb4>
  802d10:	00802074 	movhi	r2,129
  802d14:	10a98604 	addi	r2,r2,-23016
  802d18:	11400017 	ldw	r5,0(r2)
  802d1c:	8809883a 	mov	r4,r17
  802d20:	08029b00 	call	8029b0 <_malloc_trim_r>
  802d24:	003f9a06 	br	802b90 <_free_r+0xb4>
  802d28:	00800104 	movi	r2,4
  802d2c:	10c0072e 	bgeu	r2,r3,802d4c <_free_r+0x270>
  802d30:	00800504 	movi	r2,20
  802d34:	10c01936 	bltu	r2,r3,802d9c <_free_r+0x2c0>
  802d38:	188016c4 	addi	r2,r3,91
  802d3c:	100690fa 	slli	r3,r2,3
  802d40:	003fb306 	br	802c10 <_free_r+0x134>
  802d44:	01400044 	movi	r5,1
  802d48:	003f7e06 	br	802b44 <_free_r+0x68>
  802d4c:	3804d1ba 	srli	r2,r7,6
  802d50:	10800e04 	addi	r2,r2,56
  802d54:	100690fa 	slli	r3,r2,3
  802d58:	003fad06 	br	802c10 <_free_r+0x134>
  802d5c:	22000315 	stw	r8,12(r4)
  802d60:	22000215 	stw	r8,8(r4)
  802d64:	3a05883a 	add	r2,r7,r8
  802d68:	38c00054 	ori	r3,r7,1
  802d6c:	11c00015 	stw	r7,0(r2)
  802d70:	41000215 	stw	r4,8(r8)
  802d74:	40c00115 	stw	r3,4(r8)
  802d78:	41000315 	stw	r4,12(r8)
  802d7c:	003f8406 	br	802b90 <_free_r+0xb4>
  802d80:	1005d0ba 	srai	r2,r2,2
  802d84:	00c00044 	movi	r3,1
  802d88:	51000117 	ldw	r4,4(r10)
  802d8c:	1886983a 	sll	r3,r3,r2
  802d90:	20c8b03a 	or	r4,r4,r3
  802d94:	51000115 	stw	r4,4(r10)
  802d98:	003fa706 	br	802c38 <_free_r+0x15c>
  802d9c:	00801504 	movi	r2,84
  802da0:	10c00436 	bltu	r2,r3,802db4 <_free_r+0x2d8>
  802da4:	3804d33a 	srli	r2,r7,12
  802da8:	10801b84 	addi	r2,r2,110
  802dac:	100690fa 	slli	r3,r2,3
  802db0:	003f9706 	br	802c10 <_free_r+0x134>
  802db4:	00805504 	movi	r2,340
  802db8:	10c00436 	bltu	r2,r3,802dcc <_free_r+0x2f0>
  802dbc:	3804d3fa 	srli	r2,r7,15
  802dc0:	10801dc4 	addi	r2,r2,119
  802dc4:	100690fa 	slli	r3,r2,3
  802dc8:	003f9106 	br	802c10 <_free_r+0x134>
  802dcc:	00815504 	movi	r2,1364
  802dd0:	10c0032e 	bgeu	r2,r3,802de0 <_free_r+0x304>
  802dd4:	00801f84 	movi	r2,126
  802dd8:	00c0fc04 	movi	r3,1008
  802ddc:	003f8c06 	br	802c10 <_free_r+0x134>
  802de0:	3804d4ba 	srli	r2,r7,18
  802de4:	10801f04 	addi	r2,r2,124
  802de8:	100690fa 	slli	r3,r2,3
  802dec:	003f8806 	br	802c10 <_free_r+0x134>

00802df0 <_fwalk_reent>:
  802df0:	defff704 	addi	sp,sp,-36
  802df4:	dcc00315 	stw	r19,12(sp)
  802df8:	24c0b804 	addi	r19,r4,736
  802dfc:	dd800615 	stw	r22,24(sp)
  802e00:	dd400515 	stw	r21,20(sp)
  802e04:	dfc00815 	stw	ra,32(sp)
  802e08:	ddc00715 	stw	r23,28(sp)
  802e0c:	dd000415 	stw	r20,16(sp)
  802e10:	dc800215 	stw	r18,8(sp)
  802e14:	dc400115 	stw	r17,4(sp)
  802e18:	dc000015 	stw	r16,0(sp)
  802e1c:	202b883a 	mov	r21,r4
  802e20:	282d883a 	mov	r22,r5
  802e24:	08027480 	call	802748 <__sfp_lock_acquire>
  802e28:	98002126 	beq	r19,zero,802eb0 <_fwalk_reent+0xc0>
  802e2c:	002f883a 	mov	r23,zero
  802e30:	9c800117 	ldw	r18,4(r19)
  802e34:	9c000217 	ldw	r16,8(r19)
  802e38:	90bfffc4 	addi	r2,r18,-1
  802e3c:	10000d16 	blt	r2,zero,802e74 <_fwalk_reent+0x84>
  802e40:	0023883a 	mov	r17,zero
  802e44:	053fffc4 	movi	r20,-1
  802e48:	8080030f 	ldh	r2,12(r16)
  802e4c:	8c400044 	addi	r17,r17,1
  802e50:	10000626 	beq	r2,zero,802e6c <_fwalk_reent+0x7c>
  802e54:	8080038f 	ldh	r2,14(r16)
  802e58:	800b883a 	mov	r5,r16
  802e5c:	a809883a 	mov	r4,r21
  802e60:	15000226 	beq	r2,r20,802e6c <_fwalk_reent+0x7c>
  802e64:	b03ee83a 	callr	r22
  802e68:	b8aeb03a 	or	r23,r23,r2
  802e6c:	84001704 	addi	r16,r16,92
  802e70:	947ff51e 	bne	r18,r17,802e48 <_fwalk_reent+0x58>
  802e74:	9cc00017 	ldw	r19,0(r19)
  802e78:	983fed1e 	bne	r19,zero,802e30 <_fwalk_reent+0x40>
  802e7c:	080274c0 	call	80274c <__sfp_lock_release>
  802e80:	b805883a 	mov	r2,r23
  802e84:	dfc00817 	ldw	ra,32(sp)
  802e88:	ddc00717 	ldw	r23,28(sp)
  802e8c:	dd800617 	ldw	r22,24(sp)
  802e90:	dd400517 	ldw	r21,20(sp)
  802e94:	dd000417 	ldw	r20,16(sp)
  802e98:	dcc00317 	ldw	r19,12(sp)
  802e9c:	dc800217 	ldw	r18,8(sp)
  802ea0:	dc400117 	ldw	r17,4(sp)
  802ea4:	dc000017 	ldw	r16,0(sp)
  802ea8:	dec00904 	addi	sp,sp,36
  802eac:	f800283a 	ret
  802eb0:	002f883a 	mov	r23,zero
  802eb4:	003ff106 	br	802e7c <_fwalk_reent+0x8c>

00802eb8 <_fwalk>:
  802eb8:	defff804 	addi	sp,sp,-32
  802ebc:	dcc00315 	stw	r19,12(sp)
  802ec0:	24c0b804 	addi	r19,r4,736
  802ec4:	dd400515 	stw	r21,20(sp)
  802ec8:	dfc00715 	stw	ra,28(sp)
  802ecc:	dd800615 	stw	r22,24(sp)
  802ed0:	dd000415 	stw	r20,16(sp)
  802ed4:	dc800215 	stw	r18,8(sp)
  802ed8:	dc400115 	stw	r17,4(sp)
  802edc:	dc000015 	stw	r16,0(sp)
  802ee0:	282b883a 	mov	r21,r5
  802ee4:	08027480 	call	802748 <__sfp_lock_acquire>
  802ee8:	98001f26 	beq	r19,zero,802f68 <_fwalk+0xb0>
  802eec:	002d883a 	mov	r22,zero
  802ef0:	9c800117 	ldw	r18,4(r19)
  802ef4:	9c000217 	ldw	r16,8(r19)
  802ef8:	90bfffc4 	addi	r2,r18,-1
  802efc:	10000c16 	blt	r2,zero,802f30 <_fwalk+0x78>
  802f00:	0023883a 	mov	r17,zero
  802f04:	053fffc4 	movi	r20,-1
  802f08:	8080030f 	ldh	r2,12(r16)
  802f0c:	8c400044 	addi	r17,r17,1
  802f10:	10000526 	beq	r2,zero,802f28 <_fwalk+0x70>
  802f14:	8080038f 	ldh	r2,14(r16)
  802f18:	8009883a 	mov	r4,r16
  802f1c:	15000226 	beq	r2,r20,802f28 <_fwalk+0x70>
  802f20:	a83ee83a 	callr	r21
  802f24:	b0acb03a 	or	r22,r22,r2
  802f28:	84001704 	addi	r16,r16,92
  802f2c:	947ff61e 	bne	r18,r17,802f08 <_fwalk+0x50>
  802f30:	9cc00017 	ldw	r19,0(r19)
  802f34:	983fee1e 	bne	r19,zero,802ef0 <_fwalk+0x38>
  802f38:	080274c0 	call	80274c <__sfp_lock_release>
  802f3c:	b005883a 	mov	r2,r22
  802f40:	dfc00717 	ldw	ra,28(sp)
  802f44:	dd800617 	ldw	r22,24(sp)
  802f48:	dd400517 	ldw	r21,20(sp)
  802f4c:	dd000417 	ldw	r20,16(sp)
  802f50:	dcc00317 	ldw	r19,12(sp)
  802f54:	dc800217 	ldw	r18,8(sp)
  802f58:	dc400117 	ldw	r17,4(sp)
  802f5c:	dc000017 	ldw	r16,0(sp)
  802f60:	dec00804 	addi	sp,sp,32
  802f64:	f800283a 	ret
  802f68:	002d883a 	mov	r22,zero
  802f6c:	003ff206 	br	802f38 <_fwalk+0x80>

00802f70 <__smakebuf_r>:
  802f70:	2880030b 	ldhu	r2,12(r5)
  802f74:	deffed04 	addi	sp,sp,-76
  802f78:	dc401015 	stw	r17,64(sp)
  802f7c:	1080008c 	andi	r2,r2,2
  802f80:	dc000f15 	stw	r16,60(sp)
  802f84:	dfc01215 	stw	ra,72(sp)
  802f88:	dc801115 	stw	r18,68(sp)
  802f8c:	2821883a 	mov	r16,r5
  802f90:	2023883a 	mov	r17,r4
  802f94:	10000b26 	beq	r2,zero,802fc4 <__smakebuf_r+0x54>
  802f98:	28c010c4 	addi	r3,r5,67
  802f9c:	00800044 	movi	r2,1
  802fa0:	28800515 	stw	r2,20(r5)
  802fa4:	28c00415 	stw	r3,16(r5)
  802fa8:	28c00015 	stw	r3,0(r5)
  802fac:	dfc01217 	ldw	ra,72(sp)
  802fb0:	dc801117 	ldw	r18,68(sp)
  802fb4:	dc401017 	ldw	r17,64(sp)
  802fb8:	dc000f17 	ldw	r16,60(sp)
  802fbc:	dec01304 	addi	sp,sp,76
  802fc0:	f800283a 	ret
  802fc4:	2940038f 	ldh	r5,14(r5)
  802fc8:	28002116 	blt	r5,zero,803050 <__smakebuf_r+0xe0>
  802fcc:	d80d883a 	mov	r6,sp
  802fd0:	08034f40 	call	8034f4 <_fstat_r>
  802fd4:	10001e16 	blt	r2,zero,803050 <__smakebuf_r+0xe0>
  802fd8:	d8800117 	ldw	r2,4(sp)
  802fdc:	00e00014 	movui	r3,32768
  802fe0:	113c000c 	andi	r4,r2,61440
  802fe4:	20c03126 	beq	r4,r3,8030ac <__smakebuf_r+0x13c>
  802fe8:	8080030b 	ldhu	r2,12(r16)
  802fec:	00c80004 	movi	r3,8192
  802ff0:	10820014 	ori	r2,r2,2048
  802ff4:	8080030d 	sth	r2,12(r16)
  802ff8:	20c01e26 	beq	r4,r3,803074 <__smakebuf_r+0x104>
  802ffc:	04810004 	movi	r18,1024
  803000:	8809883a 	mov	r4,r17
  803004:	900b883a 	mov	r5,r18
  803008:	08010e40 	call	8010e4 <_malloc_r>
  80300c:	1009883a 	mov	r4,r2
  803010:	10003126 	beq	r2,zero,8030d8 <__smakebuf_r+0x168>
  803014:	80c0030b 	ldhu	r3,12(r16)
  803018:	00802034 	movhi	r2,128
  80301c:	108a0f04 	addi	r2,r2,10300
  803020:	88800f15 	stw	r2,60(r17)
  803024:	18c02014 	ori	r3,r3,128
  803028:	84800515 	stw	r18,20(r16)
  80302c:	80c0030d 	sth	r3,12(r16)
  803030:	81000415 	stw	r4,16(r16)
  803034:	81000015 	stw	r4,0(r16)
  803038:	dfc01217 	ldw	ra,72(sp)
  80303c:	dc801117 	ldw	r18,68(sp)
  803040:	dc401017 	ldw	r17,64(sp)
  803044:	dc000f17 	ldw	r16,60(sp)
  803048:	dec01304 	addi	sp,sp,76
  80304c:	f800283a 	ret
  803050:	80c0030b 	ldhu	r3,12(r16)
  803054:	1880200c 	andi	r2,r3,128
  803058:	10000426 	beq	r2,zero,80306c <__smakebuf_r+0xfc>
  80305c:	04801004 	movi	r18,64
  803060:	18820014 	ori	r2,r3,2048
  803064:	8080030d 	sth	r2,12(r16)
  803068:	003fe506 	br	803000 <__smakebuf_r+0x90>
  80306c:	04810004 	movi	r18,1024
  803070:	003ffb06 	br	803060 <__smakebuf_r+0xf0>
  803074:	8140038f 	ldh	r5,14(r16)
  803078:	8809883a 	mov	r4,r17
  80307c:	08035680 	call	803568 <_isatty_r>
  803080:	103fde26 	beq	r2,zero,802ffc <__smakebuf_r+0x8c>
  803084:	8080030b 	ldhu	r2,12(r16)
  803088:	80c010c4 	addi	r3,r16,67
  80308c:	04810004 	movi	r18,1024
  803090:	10800054 	ori	r2,r2,1
  803094:	8080030d 	sth	r2,12(r16)
  803098:	00800044 	movi	r2,1
  80309c:	80c00415 	stw	r3,16(r16)
  8030a0:	80800515 	stw	r2,20(r16)
  8030a4:	80c00015 	stw	r3,0(r16)
  8030a8:	003fd506 	br	803000 <__smakebuf_r+0x90>
  8030ac:	80c00a17 	ldw	r3,40(r16)
  8030b0:	00802034 	movhi	r2,128
  8030b4:	108c6904 	addi	r2,r2,12708
  8030b8:	18bfcb1e 	bne	r3,r2,802fe8 <__smakebuf_r+0x78>
  8030bc:	8080030b 	ldhu	r2,12(r16)
  8030c0:	00c10004 	movi	r3,1024
  8030c4:	1825883a 	mov	r18,r3
  8030c8:	10c4b03a 	or	r2,r2,r3
  8030cc:	8080030d 	sth	r2,12(r16)
  8030d0:	80c01315 	stw	r3,76(r16)
  8030d4:	003fca06 	br	803000 <__smakebuf_r+0x90>
  8030d8:	8100030b 	ldhu	r4,12(r16)
  8030dc:	2080800c 	andi	r2,r4,512
  8030e0:	103fb21e 	bne	r2,zero,802fac <__smakebuf_r+0x3c>
  8030e4:	80c010c4 	addi	r3,r16,67
  8030e8:	21000094 	ori	r4,r4,2
  8030ec:	00800044 	movi	r2,1
  8030f0:	80800515 	stw	r2,20(r16)
  8030f4:	8100030d 	sth	r4,12(r16)
  8030f8:	80c00415 	stw	r3,16(r16)
  8030fc:	80c00015 	stw	r3,0(r16)
  803100:	003faa06 	br	802fac <__smakebuf_r+0x3c>

00803104 <memset>:
  803104:	008000c4 	movi	r2,3
  803108:	29403fcc 	andi	r5,r5,255
  80310c:	2007883a 	mov	r3,r4
  803110:	1180022e 	bgeu	r2,r6,80311c <memset+0x18>
  803114:	2084703a 	and	r2,r4,r2
  803118:	10000826 	beq	r2,zero,80313c <memset+0x38>
  80311c:	30000526 	beq	r6,zero,803134 <memset+0x30>
  803120:	2805883a 	mov	r2,r5
  803124:	30cd883a 	add	r6,r6,r3
  803128:	18800005 	stb	r2,0(r3)
  80312c:	18c00044 	addi	r3,r3,1
  803130:	19bffd1e 	bne	r3,r6,803128 <memset+0x24>
  803134:	2005883a 	mov	r2,r4
  803138:	f800283a 	ret
  80313c:	2804923a 	slli	r2,r5,8
  803140:	020003c4 	movi	r8,15
  803144:	200f883a 	mov	r7,r4
  803148:	2884b03a 	or	r2,r5,r2
  80314c:	1006943a 	slli	r3,r2,16
  803150:	10c6b03a 	or	r3,r2,r3
  803154:	41800a2e 	bgeu	r8,r6,803180 <memset+0x7c>
  803158:	4005883a 	mov	r2,r8
  80315c:	31bffc04 	addi	r6,r6,-16
  803160:	38c00015 	stw	r3,0(r7)
  803164:	38c00115 	stw	r3,4(r7)
  803168:	38c00215 	stw	r3,8(r7)
  80316c:	38c00315 	stw	r3,12(r7)
  803170:	39c00404 	addi	r7,r7,16
  803174:	11bff936 	bltu	r2,r6,80315c <memset+0x58>
  803178:	008000c4 	movi	r2,3
  80317c:	1180052e 	bgeu	r2,r6,803194 <memset+0x90>
  803180:	31bfff04 	addi	r6,r6,-4
  803184:	008000c4 	movi	r2,3
  803188:	38c00015 	stw	r3,0(r7)
  80318c:	39c00104 	addi	r7,r7,4
  803190:	11bffb36 	bltu	r2,r6,803180 <memset+0x7c>
  803194:	3807883a 	mov	r3,r7
  803198:	003fe006 	br	80311c <memset+0x18>

0080319c <__sclose>:
  80319c:	2940038f 	ldh	r5,14(r5)
  8031a0:	08033601 	jmpi	803360 <_close_r>

008031a4 <__sseek>:
  8031a4:	defffe04 	addi	sp,sp,-8
  8031a8:	dc000015 	stw	r16,0(sp)
  8031ac:	2821883a 	mov	r16,r5
  8031b0:	2940038f 	ldh	r5,14(r5)
  8031b4:	dfc00115 	stw	ra,4(sp)
  8031b8:	08035d80 	call	8035d8 <_lseek_r>
  8031bc:	1007883a 	mov	r3,r2
  8031c0:	00bfffc4 	movi	r2,-1
  8031c4:	18800926 	beq	r3,r2,8031ec <__sseek+0x48>
  8031c8:	8080030b 	ldhu	r2,12(r16)
  8031cc:	80c01415 	stw	r3,80(r16)
  8031d0:	10840014 	ori	r2,r2,4096
  8031d4:	8080030d 	sth	r2,12(r16)
  8031d8:	1805883a 	mov	r2,r3
  8031dc:	dfc00117 	ldw	ra,4(sp)
  8031e0:	dc000017 	ldw	r16,0(sp)
  8031e4:	dec00204 	addi	sp,sp,8
  8031e8:	f800283a 	ret
  8031ec:	8080030b 	ldhu	r2,12(r16)
  8031f0:	10bbffcc 	andi	r2,r2,61439
  8031f4:	8080030d 	sth	r2,12(r16)
  8031f8:	1805883a 	mov	r2,r3
  8031fc:	dfc00117 	ldw	ra,4(sp)
  803200:	dc000017 	ldw	r16,0(sp)
  803204:	dec00204 	addi	sp,sp,8
  803208:	f800283a 	ret

0080320c <__swrite>:
  80320c:	2880030b 	ldhu	r2,12(r5)
  803210:	defffb04 	addi	sp,sp,-20
  803214:	dcc00315 	stw	r19,12(sp)
  803218:	1080400c 	andi	r2,r2,256
  80321c:	dc800215 	stw	r18,8(sp)
  803220:	dc400115 	stw	r17,4(sp)
  803224:	dc000015 	stw	r16,0(sp)
  803228:	3027883a 	mov	r19,r6
  80322c:	3825883a 	mov	r18,r7
  803230:	dfc00415 	stw	ra,16(sp)
  803234:	2821883a 	mov	r16,r5
  803238:	000d883a 	mov	r6,zero
  80323c:	01c00084 	movi	r7,2
  803240:	2023883a 	mov	r17,r4
  803244:	10000226 	beq	r2,zero,803250 <__swrite+0x44>
  803248:	2940038f 	ldh	r5,14(r5)
  80324c:	08035d80 	call	8035d8 <_lseek_r>
  803250:	8080030b 	ldhu	r2,12(r16)
  803254:	8140038f 	ldh	r5,14(r16)
  803258:	8809883a 	mov	r4,r17
  80325c:	10bbffcc 	andi	r2,r2,61439
  803260:	980d883a 	mov	r6,r19
  803264:	900f883a 	mov	r7,r18
  803268:	8080030d 	sth	r2,12(r16)
  80326c:	dfc00417 	ldw	ra,16(sp)
  803270:	dcc00317 	ldw	r19,12(sp)
  803274:	dc800217 	ldw	r18,8(sp)
  803278:	dc400117 	ldw	r17,4(sp)
  80327c:	dc000017 	ldw	r16,0(sp)
  803280:	dec00504 	addi	sp,sp,20
  803284:	08032e81 	jmpi	8032e8 <_write_r>

00803288 <__sread>:
  803288:	defffe04 	addi	sp,sp,-8
  80328c:	dc000015 	stw	r16,0(sp)
  803290:	2821883a 	mov	r16,r5
  803294:	2940038f 	ldh	r5,14(r5)
  803298:	dfc00115 	stw	ra,4(sp)
  80329c:	08036500 	call	803650 <_read_r>
  8032a0:	1007883a 	mov	r3,r2
  8032a4:	10000816 	blt	r2,zero,8032c8 <__sread+0x40>
  8032a8:	80801417 	ldw	r2,80(r16)
  8032ac:	10c5883a 	add	r2,r2,r3
  8032b0:	80801415 	stw	r2,80(r16)
  8032b4:	1805883a 	mov	r2,r3
  8032b8:	dfc00117 	ldw	ra,4(sp)
  8032bc:	dc000017 	ldw	r16,0(sp)
  8032c0:	dec00204 	addi	sp,sp,8
  8032c4:	f800283a 	ret
  8032c8:	8080030b 	ldhu	r2,12(r16)
  8032cc:	10bbffcc 	andi	r2,r2,61439
  8032d0:	8080030d 	sth	r2,12(r16)
  8032d4:	1805883a 	mov	r2,r3
  8032d8:	dfc00117 	ldw	ra,4(sp)
  8032dc:	dc000017 	ldw	r16,0(sp)
  8032e0:	dec00204 	addi	sp,sp,8
  8032e4:	f800283a 	ret

008032e8 <_write_r>:
  8032e8:	defffd04 	addi	sp,sp,-12
  8032ec:	dc000015 	stw	r16,0(sp)
  8032f0:	04002074 	movhi	r16,129
  8032f4:	84298904 	addi	r16,r16,-23004
  8032f8:	dc400115 	stw	r17,4(sp)
  8032fc:	80000015 	stw	zero,0(r16)
  803300:	2023883a 	mov	r17,r4
  803304:	2809883a 	mov	r4,r5
  803308:	300b883a 	mov	r5,r6
  80330c:	380d883a 	mov	r6,r7
  803310:	dfc00215 	stw	ra,8(sp)
  803314:	08042180 	call	804218 <write>
  803318:	1007883a 	mov	r3,r2
  80331c:	00bfffc4 	movi	r2,-1
  803320:	18800626 	beq	r3,r2,80333c <_write_r+0x54>
  803324:	1805883a 	mov	r2,r3
  803328:	dfc00217 	ldw	ra,8(sp)
  80332c:	dc400117 	ldw	r17,4(sp)
  803330:	dc000017 	ldw	r16,0(sp)
  803334:	dec00304 	addi	sp,sp,12
  803338:	f800283a 	ret
  80333c:	80800017 	ldw	r2,0(r16)
  803340:	103ff826 	beq	r2,zero,803324 <_write_r+0x3c>
  803344:	88800015 	stw	r2,0(r17)
  803348:	1805883a 	mov	r2,r3
  80334c:	dfc00217 	ldw	ra,8(sp)
  803350:	dc400117 	ldw	r17,4(sp)
  803354:	dc000017 	ldw	r16,0(sp)
  803358:	dec00304 	addi	sp,sp,12
  80335c:	f800283a 	ret

00803360 <_close_r>:
  803360:	defffd04 	addi	sp,sp,-12
  803364:	dc000015 	stw	r16,0(sp)
  803368:	04002074 	movhi	r16,129
  80336c:	84298904 	addi	r16,r16,-23004
  803370:	dc400115 	stw	r17,4(sp)
  803374:	80000015 	stw	zero,0(r16)
  803378:	2023883a 	mov	r17,r4
  80337c:	2809883a 	mov	r4,r5
  803380:	dfc00215 	stw	ra,8(sp)
  803384:	08036c80 	call	8036c8 <close>
  803388:	1007883a 	mov	r3,r2
  80338c:	00bfffc4 	movi	r2,-1
  803390:	18800626 	beq	r3,r2,8033ac <_close_r+0x4c>
  803394:	1805883a 	mov	r2,r3
  803398:	dfc00217 	ldw	ra,8(sp)
  80339c:	dc400117 	ldw	r17,4(sp)
  8033a0:	dc000017 	ldw	r16,0(sp)
  8033a4:	dec00304 	addi	sp,sp,12
  8033a8:	f800283a 	ret
  8033ac:	80800017 	ldw	r2,0(r16)
  8033b0:	103ff826 	beq	r2,zero,803394 <_close_r+0x34>
  8033b4:	88800015 	stw	r2,0(r17)
  8033b8:	1805883a 	mov	r2,r3
  8033bc:	dfc00217 	ldw	ra,8(sp)
  8033c0:	dc400117 	ldw	r17,4(sp)
  8033c4:	dc000017 	ldw	r16,0(sp)
  8033c8:	dec00304 	addi	sp,sp,12
  8033cc:	f800283a 	ret

008033d0 <_fclose_r>:
  8033d0:	defffc04 	addi	sp,sp,-16
  8033d4:	dc400115 	stw	r17,4(sp)
  8033d8:	dc000015 	stw	r16,0(sp)
  8033dc:	dfc00315 	stw	ra,12(sp)
  8033e0:	dc800215 	stw	r18,8(sp)
  8033e4:	2821883a 	mov	r16,r5
  8033e8:	2023883a 	mov	r17,r4
  8033ec:	28002926 	beq	r5,zero,803494 <_fclose_r+0xc4>
  8033f0:	08027480 	call	802748 <__sfp_lock_acquire>
  8033f4:	88000226 	beq	r17,zero,803400 <_fclose_r+0x30>
  8033f8:	88800e17 	ldw	r2,56(r17)
  8033fc:	10002d26 	beq	r2,zero,8034b4 <_fclose_r+0xe4>
  803400:	8080030f 	ldh	r2,12(r16)
  803404:	10002226 	beq	r2,zero,803490 <_fclose_r+0xc0>
  803408:	8809883a 	mov	r4,r17
  80340c:	800b883a 	mov	r5,r16
  803410:	08024c00 	call	8024c0 <_fflush_r>
  803414:	1025883a 	mov	r18,r2
  803418:	80800b17 	ldw	r2,44(r16)
  80341c:	10000426 	beq	r2,zero,803430 <_fclose_r+0x60>
  803420:	81400717 	ldw	r5,28(r16)
  803424:	8809883a 	mov	r4,r17
  803428:	103ee83a 	callr	r2
  80342c:	10002a16 	blt	r2,zero,8034d8 <_fclose_r+0x108>
  803430:	8080030b 	ldhu	r2,12(r16)
  803434:	1080200c 	andi	r2,r2,128
  803438:	1000231e 	bne	r2,zero,8034c8 <_fclose_r+0xf8>
  80343c:	81400c17 	ldw	r5,48(r16)
  803440:	28000526 	beq	r5,zero,803458 <_fclose_r+0x88>
  803444:	80801004 	addi	r2,r16,64
  803448:	28800226 	beq	r5,r2,803454 <_fclose_r+0x84>
  80344c:	8809883a 	mov	r4,r17
  803450:	0802adc0 	call	802adc <_free_r>
  803454:	80000c15 	stw	zero,48(r16)
  803458:	81401117 	ldw	r5,68(r16)
  80345c:	28000326 	beq	r5,zero,80346c <_fclose_r+0x9c>
  803460:	8809883a 	mov	r4,r17
  803464:	0802adc0 	call	802adc <_free_r>
  803468:	80001115 	stw	zero,68(r16)
  80346c:	8000030d 	sth	zero,12(r16)
  803470:	080274c0 	call	80274c <__sfp_lock_release>
  803474:	9005883a 	mov	r2,r18
  803478:	dfc00317 	ldw	ra,12(sp)
  80347c:	dc800217 	ldw	r18,8(sp)
  803480:	dc400117 	ldw	r17,4(sp)
  803484:	dc000017 	ldw	r16,0(sp)
  803488:	dec00404 	addi	sp,sp,16
  80348c:	f800283a 	ret
  803490:	080274c0 	call	80274c <__sfp_lock_release>
  803494:	0025883a 	mov	r18,zero
  803498:	9005883a 	mov	r2,r18
  80349c:	dfc00317 	ldw	ra,12(sp)
  8034a0:	dc800217 	ldw	r18,8(sp)
  8034a4:	dc400117 	ldw	r17,4(sp)
  8034a8:	dc000017 	ldw	r16,0(sp)
  8034ac:	dec00404 	addi	sp,sp,16
  8034b0:	f800283a 	ret
  8034b4:	8809883a 	mov	r4,r17
  8034b8:	08027580 	call	802758 <__sinit>
  8034bc:	8080030f 	ldh	r2,12(r16)
  8034c0:	103fd11e 	bne	r2,zero,803408 <_fclose_r+0x38>
  8034c4:	003ff206 	br	803490 <_fclose_r+0xc0>
  8034c8:	81400417 	ldw	r5,16(r16)
  8034cc:	8809883a 	mov	r4,r17
  8034d0:	0802adc0 	call	802adc <_free_r>
  8034d4:	003fd906 	br	80343c <_fclose_r+0x6c>
  8034d8:	04bfffc4 	movi	r18,-1
  8034dc:	003fd406 	br	803430 <_fclose_r+0x60>

008034e0 <fclose>:
  8034e0:	00802074 	movhi	r2,129
  8034e4:	10a2b004 	addi	r2,r2,-30016
  8034e8:	200b883a 	mov	r5,r4
  8034ec:	11000017 	ldw	r4,0(r2)
  8034f0:	08033d01 	jmpi	8033d0 <_fclose_r>

008034f4 <_fstat_r>:
  8034f4:	defffd04 	addi	sp,sp,-12
  8034f8:	dc000015 	stw	r16,0(sp)
  8034fc:	04002074 	movhi	r16,129
  803500:	84298904 	addi	r16,r16,-23004
  803504:	dc400115 	stw	r17,4(sp)
  803508:	80000015 	stw	zero,0(r16)
  80350c:	2023883a 	mov	r17,r4
  803510:	2809883a 	mov	r4,r5
  803514:	300b883a 	mov	r5,r6
  803518:	dfc00215 	stw	ra,8(sp)
  80351c:	08038500 	call	803850 <fstat>
  803520:	1007883a 	mov	r3,r2
  803524:	00bfffc4 	movi	r2,-1
  803528:	18800626 	beq	r3,r2,803544 <_fstat_r+0x50>
  80352c:	1805883a 	mov	r2,r3
  803530:	dfc00217 	ldw	ra,8(sp)
  803534:	dc400117 	ldw	r17,4(sp)
  803538:	dc000017 	ldw	r16,0(sp)
  80353c:	dec00304 	addi	sp,sp,12
  803540:	f800283a 	ret
  803544:	80800017 	ldw	r2,0(r16)
  803548:	103ff826 	beq	r2,zero,80352c <_fstat_r+0x38>
  80354c:	88800015 	stw	r2,0(r17)
  803550:	1805883a 	mov	r2,r3
  803554:	dfc00217 	ldw	ra,8(sp)
  803558:	dc400117 	ldw	r17,4(sp)
  80355c:	dc000017 	ldw	r16,0(sp)
  803560:	dec00304 	addi	sp,sp,12
  803564:	f800283a 	ret

00803568 <_isatty_r>:
  803568:	defffd04 	addi	sp,sp,-12
  80356c:	dc000015 	stw	r16,0(sp)
  803570:	04002074 	movhi	r16,129
  803574:	84298904 	addi	r16,r16,-23004
  803578:	dc400115 	stw	r17,4(sp)
  80357c:	80000015 	stw	zero,0(r16)
  803580:	2023883a 	mov	r17,r4
  803584:	2809883a 	mov	r4,r5
  803588:	dfc00215 	stw	ra,8(sp)
  80358c:	0803b440 	call	803b44 <isatty>
  803590:	1007883a 	mov	r3,r2
  803594:	00bfffc4 	movi	r2,-1
  803598:	18800626 	beq	r3,r2,8035b4 <_isatty_r+0x4c>
  80359c:	1805883a 	mov	r2,r3
  8035a0:	dfc00217 	ldw	ra,8(sp)
  8035a4:	dc400117 	ldw	r17,4(sp)
  8035a8:	dc000017 	ldw	r16,0(sp)
  8035ac:	dec00304 	addi	sp,sp,12
  8035b0:	f800283a 	ret
  8035b4:	80800017 	ldw	r2,0(r16)
  8035b8:	103ff826 	beq	r2,zero,80359c <_isatty_r+0x34>
  8035bc:	88800015 	stw	r2,0(r17)
  8035c0:	1805883a 	mov	r2,r3
  8035c4:	dfc00217 	ldw	ra,8(sp)
  8035c8:	dc400117 	ldw	r17,4(sp)
  8035cc:	dc000017 	ldw	r16,0(sp)
  8035d0:	dec00304 	addi	sp,sp,12
  8035d4:	f800283a 	ret

008035d8 <_lseek_r>:
  8035d8:	defffd04 	addi	sp,sp,-12
  8035dc:	dc000015 	stw	r16,0(sp)
  8035e0:	04002074 	movhi	r16,129
  8035e4:	84298904 	addi	r16,r16,-23004
  8035e8:	dc400115 	stw	r17,4(sp)
  8035ec:	80000015 	stw	zero,0(r16)
  8035f0:	2023883a 	mov	r17,r4
  8035f4:	2809883a 	mov	r4,r5
  8035f8:	300b883a 	mov	r5,r6
  8035fc:	380d883a 	mov	r6,r7
  803600:	dfc00215 	stw	ra,8(sp)
  803604:	0803d500 	call	803d50 <lseek>
  803608:	1007883a 	mov	r3,r2
  80360c:	00bfffc4 	movi	r2,-1
  803610:	18800626 	beq	r3,r2,80362c <_lseek_r+0x54>
  803614:	1805883a 	mov	r2,r3
  803618:	dfc00217 	ldw	ra,8(sp)
  80361c:	dc400117 	ldw	r17,4(sp)
  803620:	dc000017 	ldw	r16,0(sp)
  803624:	dec00304 	addi	sp,sp,12
  803628:	f800283a 	ret
  80362c:	80800017 	ldw	r2,0(r16)
  803630:	103ff826 	beq	r2,zero,803614 <_lseek_r+0x3c>
  803634:	88800015 	stw	r2,0(r17)
  803638:	1805883a 	mov	r2,r3
  80363c:	dfc00217 	ldw	ra,8(sp)
  803640:	dc400117 	ldw	r17,4(sp)
  803644:	dc000017 	ldw	r16,0(sp)
  803648:	dec00304 	addi	sp,sp,12
  80364c:	f800283a 	ret

00803650 <_read_r>:
  803650:	defffd04 	addi	sp,sp,-12
  803654:	dc000015 	stw	r16,0(sp)
  803658:	04002074 	movhi	r16,129
  80365c:	84298904 	addi	r16,r16,-23004
  803660:	dc400115 	stw	r17,4(sp)
  803664:	80000015 	stw	zero,0(r16)
  803668:	2023883a 	mov	r17,r4
  80366c:	2809883a 	mov	r4,r5
  803670:	300b883a 	mov	r5,r6
  803674:	380d883a 	mov	r6,r7
  803678:	dfc00215 	stw	ra,8(sp)
  80367c:	0803f4c0 	call	803f4c <read>
  803680:	1007883a 	mov	r3,r2
  803684:	00bfffc4 	movi	r2,-1
  803688:	18800626 	beq	r3,r2,8036a4 <_read_r+0x54>
  80368c:	1805883a 	mov	r2,r3
  803690:	dfc00217 	ldw	ra,8(sp)
  803694:	dc400117 	ldw	r17,4(sp)
  803698:	dc000017 	ldw	r16,0(sp)
  80369c:	dec00304 	addi	sp,sp,12
  8036a0:	f800283a 	ret
  8036a4:	80800017 	ldw	r2,0(r16)
  8036a8:	103ff826 	beq	r2,zero,80368c <_read_r+0x3c>
  8036ac:	88800015 	stw	r2,0(r17)
  8036b0:	1805883a 	mov	r2,r3
  8036b4:	dfc00217 	ldw	ra,8(sp)
  8036b8:	dc400117 	ldw	r17,4(sp)
  8036bc:	dc000017 	ldw	r16,0(sp)
  8036c0:	dec00304 	addi	sp,sp,12
  8036c4:	f800283a 	ret

008036c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8036c8:	defff804 	addi	sp,sp,-32
  8036cc:	dfc00715 	stw	ra,28(sp)
  8036d0:	df000615 	stw	fp,24(sp)
  8036d4:	df000604 	addi	fp,sp,24
  8036d8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8036dc:	e0bffc17 	ldw	r2,-16(fp)
  8036e0:	1004803a 	cmplt	r2,r2,zero
  8036e4:	1000081e 	bne	r2,zero,803708 <close+0x40>
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	10800324 	muli	r2,r2,12
  8036f0:	1007883a 	mov	r3,r2
  8036f4:	00802034 	movhi	r2,128
  8036f8:	109e0704 	addi	r2,r2,30748
  8036fc:	1887883a 	add	r3,r3,r2
  803700:	e0ffff15 	stw	r3,-4(fp)
  803704:	00000106 	br	80370c <close+0x44>
  803708:	e03fff15 	stw	zero,-4(fp)
  80370c:	e0bfff17 	ldw	r2,-4(fp)
  803710:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  803714:	e0bffb17 	ldw	r2,-20(fp)
  803718:	1005003a 	cmpeq	r2,r2,zero
  80371c:	10001d1e 	bne	r2,zero,803794 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803720:	e0bffb17 	ldw	r2,-20(fp)
  803724:	10800017 	ldw	r2,0(r2)
  803728:	10800417 	ldw	r2,16(r2)
  80372c:	1005003a 	cmpeq	r2,r2,zero
  803730:	1000071e 	bne	r2,zero,803750 <close+0x88>
  803734:	e0bffb17 	ldw	r2,-20(fp)
  803738:	10800017 	ldw	r2,0(r2)
  80373c:	10800417 	ldw	r2,16(r2)
  803740:	e13ffb17 	ldw	r4,-20(fp)
  803744:	103ee83a 	callr	r2
  803748:	e0bffe15 	stw	r2,-8(fp)
  80374c:	00000106 	br	803754 <close+0x8c>
  803750:	e03ffe15 	stw	zero,-8(fp)
  803754:	e0bffe17 	ldw	r2,-8(fp)
  803758:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80375c:	e13ffc17 	ldw	r4,-16(fp)
  803760:	08040cc0 	call	8040cc <alt_release_fd>
    if (rval < 0)
  803764:	e0bffa17 	ldw	r2,-24(fp)
  803768:	1004403a 	cmpge	r2,r2,zero
  80376c:	1000071e 	bne	r2,zero,80378c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  803770:	08037c40 	call	8037c4 <alt_get_errno>
  803774:	e0fffa17 	ldw	r3,-24(fp)
  803778:	00c7c83a 	sub	r3,zero,r3
  80377c:	10c00015 	stw	r3,0(r2)
      return -1;
  803780:	00bfffc4 	movi	r2,-1
  803784:	e0bffd15 	stw	r2,-12(fp)
  803788:	00000806 	br	8037ac <close+0xe4>
    }
    return 0;
  80378c:	e03ffd15 	stw	zero,-12(fp)
  803790:	00000606 	br	8037ac <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803794:	08037c40 	call	8037c4 <alt_get_errno>
  803798:	1007883a 	mov	r3,r2
  80379c:	00801444 	movi	r2,81
  8037a0:	18800015 	stw	r2,0(r3)
    return -1;
  8037a4:	00bfffc4 	movi	r2,-1
  8037a8:	e0bffd15 	stw	r2,-12(fp)
  8037ac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8037b0:	e037883a 	mov	sp,fp
  8037b4:	dfc00117 	ldw	ra,4(sp)
  8037b8:	df000017 	ldw	fp,0(sp)
  8037bc:	dec00204 	addi	sp,sp,8
  8037c0:	f800283a 	ret

008037c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8037c4:	defffd04 	addi	sp,sp,-12
  8037c8:	dfc00215 	stw	ra,8(sp)
  8037cc:	df000115 	stw	fp,4(sp)
  8037d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8037d4:	00802074 	movhi	r2,129
  8037d8:	10a2b904 	addi	r2,r2,-29980
  8037dc:	10800017 	ldw	r2,0(r2)
  8037e0:	1005003a 	cmpeq	r2,r2,zero
  8037e4:	1000061e 	bne	r2,zero,803800 <alt_get_errno+0x3c>
  8037e8:	00802074 	movhi	r2,129
  8037ec:	10a2b904 	addi	r2,r2,-29980
  8037f0:	10800017 	ldw	r2,0(r2)
  8037f4:	103ee83a 	callr	r2
  8037f8:	e0bfff15 	stw	r2,-4(fp)
  8037fc:	00000306 	br	80380c <alt_get_errno+0x48>
  803800:	00802074 	movhi	r2,129
  803804:	10a98904 	addi	r2,r2,-23004
  803808:	e0bfff15 	stw	r2,-4(fp)
  80380c:	e0bfff17 	ldw	r2,-4(fp)
}
  803810:	e037883a 	mov	sp,fp
  803814:	dfc00117 	ldw	ra,4(sp)
  803818:	df000017 	ldw	fp,0(sp)
  80381c:	dec00204 	addi	sp,sp,8
  803820:	f800283a 	ret

00803824 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803824:	defffc04 	addi	sp,sp,-16
  803828:	df000315 	stw	fp,12(sp)
  80382c:	df000304 	addi	fp,sp,12
  803830:	e13ffd15 	stw	r4,-12(fp)
  803834:	e17ffe15 	stw	r5,-8(fp)
  803838:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80383c:	e0bfff17 	ldw	r2,-4(fp)
}
  803840:	e037883a 	mov	sp,fp
  803844:	df000017 	ldw	fp,0(sp)
  803848:	dec00104 	addi	sp,sp,4
  80384c:	f800283a 	ret

00803850 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803850:	defff904 	addi	sp,sp,-28
  803854:	dfc00615 	stw	ra,24(sp)
  803858:	df000515 	stw	fp,20(sp)
  80385c:	df000504 	addi	fp,sp,20
  803860:	e13ffc15 	stw	r4,-16(fp)
  803864:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803868:	e0bffc17 	ldw	r2,-16(fp)
  80386c:	1004803a 	cmplt	r2,r2,zero
  803870:	1000081e 	bne	r2,zero,803894 <fstat+0x44>
  803874:	e0bffc17 	ldw	r2,-16(fp)
  803878:	10800324 	muli	r2,r2,12
  80387c:	1007883a 	mov	r3,r2
  803880:	00802034 	movhi	r2,128
  803884:	109e0704 	addi	r2,r2,30748
  803888:	1887883a 	add	r3,r3,r2
  80388c:	e0ffff15 	stw	r3,-4(fp)
  803890:	00000106 	br	803898 <fstat+0x48>
  803894:	e03fff15 	stw	zero,-4(fp)
  803898:	e0bfff17 	ldw	r2,-4(fp)
  80389c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8038a0:	e0bffb17 	ldw	r2,-20(fp)
  8038a4:	1005003a 	cmpeq	r2,r2,zero
  8038a8:	1000121e 	bne	r2,zero,8038f4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8038ac:	e0bffb17 	ldw	r2,-20(fp)
  8038b0:	10800017 	ldw	r2,0(r2)
  8038b4:	10800817 	ldw	r2,32(r2)
  8038b8:	1005003a 	cmpeq	r2,r2,zero
  8038bc:	1000081e 	bne	r2,zero,8038e0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8038c0:	e0bffb17 	ldw	r2,-20(fp)
  8038c4:	10800017 	ldw	r2,0(r2)
  8038c8:	10800817 	ldw	r2,32(r2)
  8038cc:	e13ffb17 	ldw	r4,-20(fp)
  8038d0:	e17ffd17 	ldw	r5,-12(fp)
  8038d4:	103ee83a 	callr	r2
  8038d8:	e0bffe15 	stw	r2,-8(fp)
  8038dc:	00000b06 	br	80390c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8038e0:	e0fffd17 	ldw	r3,-12(fp)
  8038e4:	00880004 	movi	r2,8192
  8038e8:	18800115 	stw	r2,4(r3)
      return 0;
  8038ec:	e03ffe15 	stw	zero,-8(fp)
  8038f0:	00000606 	br	80390c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8038f4:	08039240 	call	803924 <alt_get_errno>
  8038f8:	1007883a 	mov	r3,r2
  8038fc:	00801444 	movi	r2,81
  803900:	18800015 	stw	r2,0(r3)
    return -1;
  803904:	00bfffc4 	movi	r2,-1
  803908:	e0bffe15 	stw	r2,-8(fp)
  80390c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  803910:	e037883a 	mov	sp,fp
  803914:	dfc00117 	ldw	ra,4(sp)
  803918:	df000017 	ldw	fp,0(sp)
  80391c:	dec00204 	addi	sp,sp,8
  803920:	f800283a 	ret

00803924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803924:	defffd04 	addi	sp,sp,-12
  803928:	dfc00215 	stw	ra,8(sp)
  80392c:	df000115 	stw	fp,4(sp)
  803930:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803934:	00802074 	movhi	r2,129
  803938:	10a2b904 	addi	r2,r2,-29980
  80393c:	10800017 	ldw	r2,0(r2)
  803940:	1005003a 	cmpeq	r2,r2,zero
  803944:	1000061e 	bne	r2,zero,803960 <alt_get_errno+0x3c>
  803948:	00802074 	movhi	r2,129
  80394c:	10a2b904 	addi	r2,r2,-29980
  803950:	10800017 	ldw	r2,0(r2)
  803954:	103ee83a 	callr	r2
  803958:	e0bfff15 	stw	r2,-4(fp)
  80395c:	00000306 	br	80396c <alt_get_errno+0x48>
  803960:	00802074 	movhi	r2,129
  803964:	10a98904 	addi	r2,r2,-23004
  803968:	e0bfff15 	stw	r2,-4(fp)
  80396c:	e0bfff17 	ldw	r2,-4(fp)
}
  803970:	e037883a 	mov	sp,fp
  803974:	dfc00117 	ldw	ra,4(sp)
  803978:	df000017 	ldw	fp,0(sp)
  80397c:	dec00204 	addi	sp,sp,8
  803980:	f800283a 	ret

00803984 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  803984:	deffef04 	addi	sp,sp,-68
  803988:	df001015 	stw	fp,64(sp)
  80398c:	df001004 	addi	fp,sp,64
  803990:	e13ffc15 	stw	r4,-16(fp)
  803994:	e17ffd15 	stw	r5,-12(fp)
  803998:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80399c:	00bffa84 	movi	r2,-22
  8039a0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8039a4:	e0bffc17 	ldw	r2,-16(fp)
  8039a8:	10800828 	cmpgeui	r2,r2,32
  8039ac:	1000601e 	bne	r2,zero,803b30 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8039b0:	0005303a 	rdctl	r2,status
  8039b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8039b8:	e0fff917 	ldw	r3,-28(fp)
  8039bc:	00bfff84 	movi	r2,-2
  8039c0:	1884703a 	and	r2,r3,r2
  8039c4:	1001703a 	wrctl	status,r2
  
  return context;
  8039c8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8039cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8039d0:	e0bffc17 	ldw	r2,-16(fp)
  8039d4:	00c02074 	movhi	r3,129
  8039d8:	18e99a04 	addi	r3,r3,-22936
  8039dc:	100490fa 	slli	r2,r2,3
  8039e0:	10c7883a 	add	r3,r2,r3
  8039e4:	e0bffe17 	ldw	r2,-8(fp)
  8039e8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8039ec:	e0bffc17 	ldw	r2,-16(fp)
  8039f0:	00c02074 	movhi	r3,129
  8039f4:	18e99a04 	addi	r3,r3,-22936
  8039f8:	100490fa 	slli	r2,r2,3
  8039fc:	10c5883a 	add	r2,r2,r3
  803a00:	10c00104 	addi	r3,r2,4
  803a04:	e0bffd17 	ldw	r2,-12(fp)
  803a08:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803a0c:	e0bffe17 	ldw	r2,-8(fp)
  803a10:	1005003a 	cmpeq	r2,r2,zero
  803a14:	1000201e 	bne	r2,zero,803a98 <alt_irq_register+0x114>
  803a18:	e0bffc17 	ldw	r2,-16(fp)
  803a1c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803a20:	0005303a 	rdctl	r2,status
  803a24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803a28:	e0fff617 	ldw	r3,-40(fp)
  803a2c:	00bfff84 	movi	r2,-2
  803a30:	1884703a 	and	r2,r3,r2
  803a34:	1001703a 	wrctl	status,r2
  
  return context;
  803a38:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803a3c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  803a40:	e0fff717 	ldw	r3,-36(fp)
  803a44:	00800044 	movi	r2,1
  803a48:	10c4983a 	sll	r2,r2,r3
  803a4c:	1007883a 	mov	r3,r2
  803a50:	00802074 	movhi	r2,129
  803a54:	10a98a04 	addi	r2,r2,-23000
  803a58:	10800017 	ldw	r2,0(r2)
  803a5c:	1886b03a 	or	r3,r3,r2
  803a60:	00802074 	movhi	r2,129
  803a64:	10a98a04 	addi	r2,r2,-23000
  803a68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803a6c:	00802074 	movhi	r2,129
  803a70:	10a98a04 	addi	r2,r2,-23000
  803a74:	10800017 	ldw	r2,0(r2)
  803a78:	100170fa 	wrctl	ienable,r2
  803a7c:	e0bff817 	ldw	r2,-32(fp)
  803a80:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803a84:	e0bff517 	ldw	r2,-44(fp)
  803a88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803a8c:	0005883a 	mov	r2,zero
  803a90:	e0bfff15 	stw	r2,-4(fp)
  803a94:	00002006 	br	803b18 <alt_irq_register+0x194>
  803a98:	e0bffc17 	ldw	r2,-16(fp)
  803a9c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803aa0:	0005303a 	rdctl	r2,status
  803aa4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803aa8:	e0fff217 	ldw	r3,-56(fp)
  803aac:	00bfff84 	movi	r2,-2
  803ab0:	1884703a 	and	r2,r3,r2
  803ab4:	1001703a 	wrctl	status,r2
  
  return context;
  803ab8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803abc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  803ac0:	e0fff317 	ldw	r3,-52(fp)
  803ac4:	00800044 	movi	r2,1
  803ac8:	10c4983a 	sll	r2,r2,r3
  803acc:	0084303a 	nor	r2,zero,r2
  803ad0:	1007883a 	mov	r3,r2
  803ad4:	00802074 	movhi	r2,129
  803ad8:	10a98a04 	addi	r2,r2,-23000
  803adc:	10800017 	ldw	r2,0(r2)
  803ae0:	1886703a 	and	r3,r3,r2
  803ae4:	00802074 	movhi	r2,129
  803ae8:	10a98a04 	addi	r2,r2,-23000
  803aec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803af0:	00802074 	movhi	r2,129
  803af4:	10a98a04 	addi	r2,r2,-23000
  803af8:	10800017 	ldw	r2,0(r2)
  803afc:	100170fa 	wrctl	ienable,r2
  803b00:	e0bff417 	ldw	r2,-48(fp)
  803b04:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803b08:	e0bff117 	ldw	r2,-60(fp)
  803b0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803b10:	0005883a 	mov	r2,zero
  803b14:	e0bfff15 	stw	r2,-4(fp)
  803b18:	e0bfff17 	ldw	r2,-4(fp)
  803b1c:	e0bffb15 	stw	r2,-20(fp)
  803b20:	e0bffa17 	ldw	r2,-24(fp)
  803b24:	e0bff015 	stw	r2,-64(fp)
  803b28:	e0bff017 	ldw	r2,-64(fp)
  803b2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  803b30:	e0bffb17 	ldw	r2,-20(fp)
}
  803b34:	e037883a 	mov	sp,fp
  803b38:	df000017 	ldw	fp,0(sp)
  803b3c:	dec00104 	addi	sp,sp,4
  803b40:	f800283a 	ret

00803b44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803b44:	deffeb04 	addi	sp,sp,-84
  803b48:	dfc01415 	stw	ra,80(sp)
  803b4c:	df001315 	stw	fp,76(sp)
  803b50:	df001304 	addi	fp,sp,76
  803b54:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803b58:	e0bffd17 	ldw	r2,-12(fp)
  803b5c:	1004803a 	cmplt	r2,r2,zero
  803b60:	1000081e 	bne	r2,zero,803b84 <isatty+0x40>
  803b64:	e0bffd17 	ldw	r2,-12(fp)
  803b68:	10800324 	muli	r2,r2,12
  803b6c:	1007883a 	mov	r3,r2
  803b70:	00802034 	movhi	r2,128
  803b74:	109e0704 	addi	r2,r2,30748
  803b78:	1887883a 	add	r3,r3,r2
  803b7c:	e0ffff15 	stw	r3,-4(fp)
  803b80:	00000106 	br	803b88 <isatty+0x44>
  803b84:	e03fff15 	stw	zero,-4(fp)
  803b88:	e0bfff17 	ldw	r2,-4(fp)
  803b8c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  803b90:	e0bfed17 	ldw	r2,-76(fp)
  803b94:	1005003a 	cmpeq	r2,r2,zero
  803b98:	10000f1e 	bne	r2,zero,803bd8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  803b9c:	e0bfed17 	ldw	r2,-76(fp)
  803ba0:	10800017 	ldw	r2,0(r2)
  803ba4:	10800817 	ldw	r2,32(r2)
  803ba8:	1004c03a 	cmpne	r2,r2,zero
  803bac:	1000031e 	bne	r2,zero,803bbc <isatty+0x78>
    {
      return 1;
  803bb0:	00800044 	movi	r2,1
  803bb4:	e0bffe15 	stw	r2,-8(fp)
  803bb8:	00000c06 	br	803bec <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803bbc:	e17fee04 	addi	r5,fp,-72
  803bc0:	e13ffd17 	ldw	r4,-12(fp)
  803bc4:	08038500 	call	803850 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803bc8:	e0bfef17 	ldw	r2,-68(fp)
  803bcc:	10880020 	cmpeqi	r2,r2,8192
  803bd0:	e0bffe15 	stw	r2,-8(fp)
  803bd4:	00000506 	br	803bec <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803bd8:	0803c040 	call	803c04 <alt_get_errno>
  803bdc:	1007883a 	mov	r3,r2
  803be0:	00801444 	movi	r2,81
  803be4:	18800015 	stw	r2,0(r3)
    return 0;
  803be8:	e03ffe15 	stw	zero,-8(fp)
  803bec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  803bf0:	e037883a 	mov	sp,fp
  803bf4:	dfc00117 	ldw	ra,4(sp)
  803bf8:	df000017 	ldw	fp,0(sp)
  803bfc:	dec00204 	addi	sp,sp,8
  803c00:	f800283a 	ret

00803c04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803c04:	defffd04 	addi	sp,sp,-12
  803c08:	dfc00215 	stw	ra,8(sp)
  803c0c:	df000115 	stw	fp,4(sp)
  803c10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803c14:	00802074 	movhi	r2,129
  803c18:	10a2b904 	addi	r2,r2,-29980
  803c1c:	10800017 	ldw	r2,0(r2)
  803c20:	1005003a 	cmpeq	r2,r2,zero
  803c24:	1000061e 	bne	r2,zero,803c40 <alt_get_errno+0x3c>
  803c28:	00802074 	movhi	r2,129
  803c2c:	10a2b904 	addi	r2,r2,-29980
  803c30:	10800017 	ldw	r2,0(r2)
  803c34:	103ee83a 	callr	r2
  803c38:	e0bfff15 	stw	r2,-4(fp)
  803c3c:	00000306 	br	803c4c <alt_get_errno+0x48>
  803c40:	00802074 	movhi	r2,129
  803c44:	10a98904 	addi	r2,r2,-23004
  803c48:	e0bfff15 	stw	r2,-4(fp)
  803c4c:	e0bfff17 	ldw	r2,-4(fp)
}
  803c50:	e037883a 	mov	sp,fp
  803c54:	dfc00117 	ldw	ra,4(sp)
  803c58:	df000017 	ldw	fp,0(sp)
  803c5c:	dec00204 	addi	sp,sp,8
  803c60:	f800283a 	ret

00803c64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803c64:	defffe04 	addi	sp,sp,-8
  803c68:	dfc00115 	stw	ra,4(sp)
  803c6c:	df000015 	stw	fp,0(sp)
  803c70:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803c74:	01002074 	movhi	r4,129
  803c78:	2122be04 	addi	r4,r4,-29960
  803c7c:	01402034 	movhi	r5,128
  803c80:	295bfb04 	addi	r5,r5,28652
  803c84:	01802074 	movhi	r6,129
  803c88:	31a2be04 	addi	r6,r6,-29960
  803c8c:	0803ce40 	call	803ce4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  803c90:	01002034 	movhi	r4,128
  803c94:	21000804 	addi	r4,r4,32
  803c98:	01402034 	movhi	r5,128
  803c9c:	29400804 	addi	r5,r5,32
  803ca0:	01802034 	movhi	r6,128
  803ca4:	31806d04 	addi	r6,r6,436
  803ca8:	0803ce40 	call	803ce4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803cac:	01002034 	movhi	r4,128
  803cb0:	211ba604 	addi	r4,r4,28312
  803cb4:	01402034 	movhi	r5,128
  803cb8:	295ba604 	addi	r5,r5,28312
  803cbc:	01802034 	movhi	r6,128
  803cc0:	319bfb04 	addi	r6,r6,28652
  803cc4:	0803ce40 	call	803ce4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  803cc8:	0805b640 	call	805b64 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803ccc:	0805d840 	call	805d84 <alt_icache_flush_all>
}
  803cd0:	e037883a 	mov	sp,fp
  803cd4:	dfc00117 	ldw	ra,4(sp)
  803cd8:	df000017 	ldw	fp,0(sp)
  803cdc:	dec00204 	addi	sp,sp,8
  803ce0:	f800283a 	ret

00803ce4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803ce4:	defffc04 	addi	sp,sp,-16
  803ce8:	df000315 	stw	fp,12(sp)
  803cec:	df000304 	addi	fp,sp,12
  803cf0:	e13ffd15 	stw	r4,-12(fp)
  803cf4:	e17ffe15 	stw	r5,-8(fp)
  803cf8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803cfc:	e0fffe17 	ldw	r3,-8(fp)
  803d00:	e0bffd17 	ldw	r2,-12(fp)
  803d04:	18800e26 	beq	r3,r2,803d40 <alt_load_section+0x5c>
  {
    while( to != end )
  803d08:	00000a06 	br	803d34 <alt_load_section+0x50>
    {
      *to++ = *from++;
  803d0c:	e0bffd17 	ldw	r2,-12(fp)
  803d10:	10c00017 	ldw	r3,0(r2)
  803d14:	e0bffe17 	ldw	r2,-8(fp)
  803d18:	10c00015 	stw	r3,0(r2)
  803d1c:	e0bffe17 	ldw	r2,-8(fp)
  803d20:	10800104 	addi	r2,r2,4
  803d24:	e0bffe15 	stw	r2,-8(fp)
  803d28:	e0bffd17 	ldw	r2,-12(fp)
  803d2c:	10800104 	addi	r2,r2,4
  803d30:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803d34:	e0fffe17 	ldw	r3,-8(fp)
  803d38:	e0bfff17 	ldw	r2,-4(fp)
  803d3c:	18bff31e 	bne	r3,r2,803d0c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  803d40:	e037883a 	mov	sp,fp
  803d44:	df000017 	ldw	fp,0(sp)
  803d48:	dec00104 	addi	sp,sp,4
  803d4c:	f800283a 	ret

00803d50 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803d50:	defff804 	addi	sp,sp,-32
  803d54:	dfc00715 	stw	ra,28(sp)
  803d58:	df000615 	stw	fp,24(sp)
  803d5c:	df000604 	addi	fp,sp,24
  803d60:	e13ffc15 	stw	r4,-16(fp)
  803d64:	e17ffd15 	stw	r5,-12(fp)
  803d68:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803d6c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803d70:	e0bffc17 	ldw	r2,-16(fp)
  803d74:	1004803a 	cmplt	r2,r2,zero
  803d78:	1000081e 	bne	r2,zero,803d9c <lseek+0x4c>
  803d7c:	e0bffc17 	ldw	r2,-16(fp)
  803d80:	10800324 	muli	r2,r2,12
  803d84:	1007883a 	mov	r3,r2
  803d88:	00802034 	movhi	r2,128
  803d8c:	109e0704 	addi	r2,r2,30748
  803d90:	1887883a 	add	r3,r3,r2
  803d94:	e0ffff15 	stw	r3,-4(fp)
  803d98:	00000106 	br	803da0 <lseek+0x50>
  803d9c:	e03fff15 	stw	zero,-4(fp)
  803da0:	e0bfff17 	ldw	r2,-4(fp)
  803da4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  803da8:	e0bffb17 	ldw	r2,-20(fp)
  803dac:	1005003a 	cmpeq	r2,r2,zero
  803db0:	1000111e 	bne	r2,zero,803df8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803db4:	e0bffb17 	ldw	r2,-20(fp)
  803db8:	10800017 	ldw	r2,0(r2)
  803dbc:	10800717 	ldw	r2,28(r2)
  803dc0:	1005003a 	cmpeq	r2,r2,zero
  803dc4:	1000091e 	bne	r2,zero,803dec <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803dc8:	e0bffb17 	ldw	r2,-20(fp)
  803dcc:	10800017 	ldw	r2,0(r2)
  803dd0:	10800717 	ldw	r2,28(r2)
  803dd4:	e13ffb17 	ldw	r4,-20(fp)
  803dd8:	e17ffd17 	ldw	r5,-12(fp)
  803ddc:	e1bffe17 	ldw	r6,-8(fp)
  803de0:	103ee83a 	callr	r2
  803de4:	e0bffa15 	stw	r2,-24(fp)
  803de8:	00000506 	br	803e00 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803dec:	00bfde84 	movi	r2,-134
  803df0:	e0bffa15 	stw	r2,-24(fp)
  803df4:	00000206 	br	803e00 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  803df8:	00bfebc4 	movi	r2,-81
  803dfc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  803e00:	e0bffa17 	ldw	r2,-24(fp)
  803e04:	1004403a 	cmpge	r2,r2,zero
  803e08:	1000071e 	bne	r2,zero,803e28 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  803e0c:	0803e400 	call	803e40 <alt_get_errno>
  803e10:	1007883a 	mov	r3,r2
  803e14:	e0bffa17 	ldw	r2,-24(fp)
  803e18:	0085c83a 	sub	r2,zero,r2
  803e1c:	18800015 	stw	r2,0(r3)
    rc = -1;
  803e20:	00bfffc4 	movi	r2,-1
  803e24:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  803e28:	e0bffa17 	ldw	r2,-24(fp)
}
  803e2c:	e037883a 	mov	sp,fp
  803e30:	dfc00117 	ldw	ra,4(sp)
  803e34:	df000017 	ldw	fp,0(sp)
  803e38:	dec00204 	addi	sp,sp,8
  803e3c:	f800283a 	ret

00803e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803e40:	defffd04 	addi	sp,sp,-12
  803e44:	dfc00215 	stw	ra,8(sp)
  803e48:	df000115 	stw	fp,4(sp)
  803e4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803e50:	00802074 	movhi	r2,129
  803e54:	10a2b904 	addi	r2,r2,-29980
  803e58:	10800017 	ldw	r2,0(r2)
  803e5c:	1005003a 	cmpeq	r2,r2,zero
  803e60:	1000061e 	bne	r2,zero,803e7c <alt_get_errno+0x3c>
  803e64:	00802074 	movhi	r2,129
  803e68:	10a2b904 	addi	r2,r2,-29980
  803e6c:	10800017 	ldw	r2,0(r2)
  803e70:	103ee83a 	callr	r2
  803e74:	e0bfff15 	stw	r2,-4(fp)
  803e78:	00000306 	br	803e88 <alt_get_errno+0x48>
  803e7c:	00802074 	movhi	r2,129
  803e80:	10a98904 	addi	r2,r2,-23004
  803e84:	e0bfff15 	stw	r2,-4(fp)
  803e88:	e0bfff17 	ldw	r2,-4(fp)
}
  803e8c:	e037883a 	mov	sp,fp
  803e90:	dfc00117 	ldw	ra,4(sp)
  803e94:	df000017 	ldw	fp,0(sp)
  803e98:	dec00204 	addi	sp,sp,8
  803e9c:	f800283a 	ret

00803ea0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803ea0:	defffd04 	addi	sp,sp,-12
  803ea4:	dfc00215 	stw	ra,8(sp)
  803ea8:	df000115 	stw	fp,4(sp)
  803eac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803eb0:	0009883a 	mov	r4,zero
  803eb4:	08043980 	call	804398 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803eb8:	08043cc0 	call	8043cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803ebc:	01002034 	movhi	r4,128
  803ec0:	211bf004 	addi	r4,r4,28608
  803ec4:	01402034 	movhi	r5,128
  803ec8:	295bf004 	addi	r5,r5,28608
  803ecc:	01802034 	movhi	r6,128
  803ed0:	319bf004 	addi	r6,r6,28608
  803ed4:	08061440 	call	806144 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803ed8:	0805cbc0 	call	805cbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803edc:	01002034 	movhi	r4,128
  803ee0:	21174804 	addi	r4,r4,23840
  803ee4:	08069400 	call	806940 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803ee8:	d126db17 	ldw	r4,-25748(gp)
  803eec:	d166dc17 	ldw	r5,-25744(gp)
  803ef0:	d1a6dd17 	ldw	r6,-25740(gp)
  803ef4:	08009f40 	call	8009f4 <main>
  803ef8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803efc:	01000044 	movi	r4,1
  803f00:	08036c80 	call	8036c8 <close>
  exit (result);
  803f04:	e13fff17 	ldw	r4,-4(fp)
  803f08:	08069540 	call	806954 <exit>

00803f0c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803f0c:	defffe04 	addi	sp,sp,-8
  803f10:	df000115 	stw	fp,4(sp)
  803f14:	df000104 	addi	fp,sp,4
  803f18:	e13fff15 	stw	r4,-4(fp)
}
  803f1c:	e037883a 	mov	sp,fp
  803f20:	df000017 	ldw	fp,0(sp)
  803f24:	dec00104 	addi	sp,sp,4
  803f28:	f800283a 	ret

00803f2c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803f2c:	defffe04 	addi	sp,sp,-8
  803f30:	df000115 	stw	fp,4(sp)
  803f34:	df000104 	addi	fp,sp,4
  803f38:	e13fff15 	stw	r4,-4(fp)
}
  803f3c:	e037883a 	mov	sp,fp
  803f40:	df000017 	ldw	fp,0(sp)
  803f44:	dec00104 	addi	sp,sp,4
  803f48:	f800283a 	ret

00803f4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  803f4c:	defff704 	addi	sp,sp,-36
  803f50:	dfc00815 	stw	ra,32(sp)
  803f54:	df000715 	stw	fp,28(sp)
  803f58:	df000704 	addi	fp,sp,28
  803f5c:	e13ffb15 	stw	r4,-20(fp)
  803f60:	e17ffc15 	stw	r5,-16(fp)
  803f64:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803f68:	e0bffb17 	ldw	r2,-20(fp)
  803f6c:	1004803a 	cmplt	r2,r2,zero
  803f70:	1000081e 	bne	r2,zero,803f94 <read+0x48>
  803f74:	e0bffb17 	ldw	r2,-20(fp)
  803f78:	10800324 	muli	r2,r2,12
  803f7c:	1007883a 	mov	r3,r2
  803f80:	00802034 	movhi	r2,128
  803f84:	109e0704 	addi	r2,r2,30748
  803f88:	1887883a 	add	r3,r3,r2
  803f8c:	e0ffff15 	stw	r3,-4(fp)
  803f90:	00000106 	br	803f98 <read+0x4c>
  803f94:	e03fff15 	stw	zero,-4(fp)
  803f98:	e0bfff17 	ldw	r2,-4(fp)
  803f9c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  803fa0:	e0bffa17 	ldw	r2,-24(fp)
  803fa4:	1005003a 	cmpeq	r2,r2,zero
  803fa8:	1000241e 	bne	r2,zero,80403c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803fac:	e0bffa17 	ldw	r2,-24(fp)
  803fb0:	10800217 	ldw	r2,8(r2)
  803fb4:	108000cc 	andi	r2,r2,3
  803fb8:	10800060 	cmpeqi	r2,r2,1
  803fbc:	10001a1e 	bne	r2,zero,804028 <read+0xdc>
  803fc0:	e0bffa17 	ldw	r2,-24(fp)
  803fc4:	10800017 	ldw	r2,0(r2)
  803fc8:	10800517 	ldw	r2,20(r2)
  803fcc:	1005003a 	cmpeq	r2,r2,zero
  803fd0:	1000151e 	bne	r2,zero,804028 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803fd4:	e0bffa17 	ldw	r2,-24(fp)
  803fd8:	10800017 	ldw	r2,0(r2)
  803fdc:	10800517 	ldw	r2,20(r2)
  803fe0:	e17ffc17 	ldw	r5,-16(fp)
  803fe4:	e1bffd17 	ldw	r6,-12(fp)
  803fe8:	e13ffa17 	ldw	r4,-24(fp)
  803fec:	103ee83a 	callr	r2
  803ff0:	e0bff915 	stw	r2,-28(fp)
  803ff4:	e0bff917 	ldw	r2,-28(fp)
  803ff8:	1004403a 	cmpge	r2,r2,zero
  803ffc:	1000071e 	bne	r2,zero,80401c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  804000:	080406c0 	call	80406c <alt_get_errno>
  804004:	e0fff917 	ldw	r3,-28(fp)
  804008:	00c7c83a 	sub	r3,zero,r3
  80400c:	10c00015 	stw	r3,0(r2)
          return -1;
  804010:	00bfffc4 	movi	r2,-1
  804014:	e0bffe15 	stw	r2,-8(fp)
  804018:	00000e06 	br	804054 <read+0x108>
        }
        return rval;
  80401c:	e0bff917 	ldw	r2,-28(fp)
  804020:	e0bffe15 	stw	r2,-8(fp)
  804024:	00000b06 	br	804054 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  804028:	080406c0 	call	80406c <alt_get_errno>
  80402c:	1007883a 	mov	r3,r2
  804030:	00800344 	movi	r2,13
  804034:	18800015 	stw	r2,0(r3)
  804038:	00000406 	br	80404c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80403c:	080406c0 	call	80406c <alt_get_errno>
  804040:	1007883a 	mov	r3,r2
  804044:	00801444 	movi	r2,81
  804048:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80404c:	00bfffc4 	movi	r2,-1
  804050:	e0bffe15 	stw	r2,-8(fp)
  804054:	e0bffe17 	ldw	r2,-8(fp)
}
  804058:	e037883a 	mov	sp,fp
  80405c:	dfc00117 	ldw	ra,4(sp)
  804060:	df000017 	ldw	fp,0(sp)
  804064:	dec00204 	addi	sp,sp,8
  804068:	f800283a 	ret

0080406c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80406c:	defffd04 	addi	sp,sp,-12
  804070:	dfc00215 	stw	ra,8(sp)
  804074:	df000115 	stw	fp,4(sp)
  804078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80407c:	00802074 	movhi	r2,129
  804080:	10a2b904 	addi	r2,r2,-29980
  804084:	10800017 	ldw	r2,0(r2)
  804088:	1005003a 	cmpeq	r2,r2,zero
  80408c:	1000061e 	bne	r2,zero,8040a8 <alt_get_errno+0x3c>
  804090:	00802074 	movhi	r2,129
  804094:	10a2b904 	addi	r2,r2,-29980
  804098:	10800017 	ldw	r2,0(r2)
  80409c:	103ee83a 	callr	r2
  8040a0:	e0bfff15 	stw	r2,-4(fp)
  8040a4:	00000306 	br	8040b4 <alt_get_errno+0x48>
  8040a8:	00802074 	movhi	r2,129
  8040ac:	10a98904 	addi	r2,r2,-23004
  8040b0:	e0bfff15 	stw	r2,-4(fp)
  8040b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8040b8:	e037883a 	mov	sp,fp
  8040bc:	dfc00117 	ldw	ra,4(sp)
  8040c0:	df000017 	ldw	fp,0(sp)
  8040c4:	dec00204 	addi	sp,sp,8
  8040c8:	f800283a 	ret

008040cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8040cc:	defffe04 	addi	sp,sp,-8
  8040d0:	df000115 	stw	fp,4(sp)
  8040d4:	df000104 	addi	fp,sp,4
  8040d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8040dc:	e0bfff17 	ldw	r2,-4(fp)
  8040e0:	108000d0 	cmplti	r2,r2,3
  8040e4:	10000d1e 	bne	r2,zero,80411c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8040e8:	e0bfff17 	ldw	r2,-4(fp)
  8040ec:	00c02034 	movhi	r3,128
  8040f0:	18de0704 	addi	r3,r3,30748
  8040f4:	10800324 	muli	r2,r2,12
  8040f8:	10c5883a 	add	r2,r2,r3
  8040fc:	10800204 	addi	r2,r2,8
  804100:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  804104:	e0bfff17 	ldw	r2,-4(fp)
  804108:	00c02034 	movhi	r3,128
  80410c:	18de0704 	addi	r3,r3,30748
  804110:	10800324 	muli	r2,r2,12
  804114:	10c5883a 	add	r2,r2,r3
  804118:	10000015 	stw	zero,0(r2)
  }
}
  80411c:	e037883a 	mov	sp,fp
  804120:	df000017 	ldw	fp,0(sp)
  804124:	dec00104 	addi	sp,sp,4
  804128:	f800283a 	ret

0080412c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80412c:	defff804 	addi	sp,sp,-32
  804130:	df000715 	stw	fp,28(sp)
  804134:	df000704 	addi	fp,sp,28
  804138:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80413c:	0005303a 	rdctl	r2,status
  804140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804144:	e0fffb17 	ldw	r3,-20(fp)
  804148:	00bfff84 	movi	r2,-2
  80414c:	1884703a 	and	r2,r3,r2
  804150:	1001703a 	wrctl	status,r2
  
  return context;
  804154:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  804158:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80415c:	d0a00b17 	ldw	r2,-32724(gp)
  804160:	10c000c4 	addi	r3,r2,3
  804164:	00bfff04 	movi	r2,-4
  804168:	1884703a 	and	r2,r3,r2
  80416c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804170:	d0e00b17 	ldw	r3,-32724(gp)
  804174:	e0bffe17 	ldw	r2,-8(fp)
  804178:	1887883a 	add	r3,r3,r2
  80417c:	00804034 	movhi	r2,256
  804180:	10800004 	addi	r2,r2,0
  804184:	10c0072e 	bgeu	r2,r3,8041a4 <sbrk+0x78>
  804188:	e0bffd17 	ldw	r2,-12(fp)
  80418c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804190:	e0bffa17 	ldw	r2,-24(fp)
  804194:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804198:	00bfffc4 	movi	r2,-1
  80419c:	e0bfff15 	stw	r2,-4(fp)
  8041a0:	00000c06 	br	8041d4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8041a4:	d0a00b17 	ldw	r2,-32724(gp)
  8041a8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8041ac:	d0e00b17 	ldw	r3,-32724(gp)
  8041b0:	e0bffe17 	ldw	r2,-8(fp)
  8041b4:	1885883a 	add	r2,r3,r2
  8041b8:	d0a00b15 	stw	r2,-32724(gp)
  8041bc:	e0bffd17 	ldw	r2,-12(fp)
  8041c0:	e0bff915 	stw	r2,-28(fp)
  8041c4:	e0bff917 	ldw	r2,-28(fp)
  8041c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8041cc:	e0bffc17 	ldw	r2,-16(fp)
  8041d0:	e0bfff15 	stw	r2,-4(fp)
  8041d4:	e0bfff17 	ldw	r2,-4(fp)
} 
  8041d8:	e037883a 	mov	sp,fp
  8041dc:	df000017 	ldw	fp,0(sp)
  8041e0:	dec00104 	addi	sp,sp,4
  8041e4:	f800283a 	ret

008041e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8041e8:	defffd04 	addi	sp,sp,-12
  8041ec:	dfc00215 	stw	ra,8(sp)
  8041f0:	df000115 	stw	fp,4(sp)
  8041f4:	df000104 	addi	fp,sp,4
  8041f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8041fc:	e13fff17 	ldw	r4,-4(fp)
  804200:	0805a180 	call	805a18 <alt_busy_sleep>
}
  804204:	e037883a 	mov	sp,fp
  804208:	dfc00117 	ldw	ra,4(sp)
  80420c:	df000017 	ldw	fp,0(sp)
  804210:	dec00204 	addi	sp,sp,8
  804214:	f800283a 	ret

00804218 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804218:	defff704 	addi	sp,sp,-36
  80421c:	dfc00815 	stw	ra,32(sp)
  804220:	df000715 	stw	fp,28(sp)
  804224:	df000704 	addi	fp,sp,28
  804228:	e13ffb15 	stw	r4,-20(fp)
  80422c:	e17ffc15 	stw	r5,-16(fp)
  804230:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804234:	e0bffb17 	ldw	r2,-20(fp)
  804238:	1004803a 	cmplt	r2,r2,zero
  80423c:	1000081e 	bne	r2,zero,804260 <write+0x48>
  804240:	e0bffb17 	ldw	r2,-20(fp)
  804244:	10800324 	muli	r2,r2,12
  804248:	1007883a 	mov	r3,r2
  80424c:	00802034 	movhi	r2,128
  804250:	109e0704 	addi	r2,r2,30748
  804254:	1887883a 	add	r3,r3,r2
  804258:	e0ffff15 	stw	r3,-4(fp)
  80425c:	00000106 	br	804264 <write+0x4c>
  804260:	e03fff15 	stw	zero,-4(fp)
  804264:	e0bfff17 	ldw	r2,-4(fp)
  804268:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80426c:	e0bffa17 	ldw	r2,-24(fp)
  804270:	1005003a 	cmpeq	r2,r2,zero
  804274:	1000241e 	bne	r2,zero,804308 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  804278:	e0bffa17 	ldw	r2,-24(fp)
  80427c:	10800217 	ldw	r2,8(r2)
  804280:	108000cc 	andi	r2,r2,3
  804284:	1005003a 	cmpeq	r2,r2,zero
  804288:	10001a1e 	bne	r2,zero,8042f4 <write+0xdc>
  80428c:	e0bffa17 	ldw	r2,-24(fp)
  804290:	10800017 	ldw	r2,0(r2)
  804294:	10800617 	ldw	r2,24(r2)
  804298:	1005003a 	cmpeq	r2,r2,zero
  80429c:	1000151e 	bne	r2,zero,8042f4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8042a0:	e0bffa17 	ldw	r2,-24(fp)
  8042a4:	10800017 	ldw	r2,0(r2)
  8042a8:	10800617 	ldw	r2,24(r2)
  8042ac:	e17ffc17 	ldw	r5,-16(fp)
  8042b0:	e1bffd17 	ldw	r6,-12(fp)
  8042b4:	e13ffa17 	ldw	r4,-24(fp)
  8042b8:	103ee83a 	callr	r2
  8042bc:	e0bff915 	stw	r2,-28(fp)
  8042c0:	e0bff917 	ldw	r2,-28(fp)
  8042c4:	1004403a 	cmpge	r2,r2,zero
  8042c8:	1000071e 	bne	r2,zero,8042e8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8042cc:	08043380 	call	804338 <alt_get_errno>
  8042d0:	e0fff917 	ldw	r3,-28(fp)
  8042d4:	00c7c83a 	sub	r3,zero,r3
  8042d8:	10c00015 	stw	r3,0(r2)
        return -1;
  8042dc:	00bfffc4 	movi	r2,-1
  8042e0:	e0bffe15 	stw	r2,-8(fp)
  8042e4:	00000e06 	br	804320 <write+0x108>
      }
      return rval;
  8042e8:	e0bff917 	ldw	r2,-28(fp)
  8042ec:	e0bffe15 	stw	r2,-8(fp)
  8042f0:	00000b06 	br	804320 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8042f4:	08043380 	call	804338 <alt_get_errno>
  8042f8:	1007883a 	mov	r3,r2
  8042fc:	00800344 	movi	r2,13
  804300:	18800015 	stw	r2,0(r3)
  804304:	00000406 	br	804318 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  804308:	08043380 	call	804338 <alt_get_errno>
  80430c:	1007883a 	mov	r3,r2
  804310:	00801444 	movi	r2,81
  804314:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804318:	00bfffc4 	movi	r2,-1
  80431c:	e0bffe15 	stw	r2,-8(fp)
  804320:	e0bffe17 	ldw	r2,-8(fp)
}
  804324:	e037883a 	mov	sp,fp
  804328:	dfc00117 	ldw	ra,4(sp)
  80432c:	df000017 	ldw	fp,0(sp)
  804330:	dec00204 	addi	sp,sp,8
  804334:	f800283a 	ret

00804338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804338:	defffd04 	addi	sp,sp,-12
  80433c:	dfc00215 	stw	ra,8(sp)
  804340:	df000115 	stw	fp,4(sp)
  804344:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804348:	00802074 	movhi	r2,129
  80434c:	10a2b904 	addi	r2,r2,-29980
  804350:	10800017 	ldw	r2,0(r2)
  804354:	1005003a 	cmpeq	r2,r2,zero
  804358:	1000061e 	bne	r2,zero,804374 <alt_get_errno+0x3c>
  80435c:	00802074 	movhi	r2,129
  804360:	10a2b904 	addi	r2,r2,-29980
  804364:	10800017 	ldw	r2,0(r2)
  804368:	103ee83a 	callr	r2
  80436c:	e0bfff15 	stw	r2,-4(fp)
  804370:	00000306 	br	804380 <alt_get_errno+0x48>
  804374:	00802074 	movhi	r2,129
  804378:	10a98904 	addi	r2,r2,-23004
  80437c:	e0bfff15 	stw	r2,-4(fp)
  804380:	e0bfff17 	ldw	r2,-4(fp)
}
  804384:	e037883a 	mov	sp,fp
  804388:	dfc00117 	ldw	ra,4(sp)
  80438c:	df000017 	ldw	fp,0(sp)
  804390:	dec00204 	addi	sp,sp,8
  804394:	f800283a 	ret

00804398 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804398:	defffd04 	addi	sp,sp,-12
  80439c:	dfc00215 	stw	ra,8(sp)
  8043a0:	df000115 	stw	fp,4(sp)
  8043a4:	df000104 	addi	fp,sp,4
  8043a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
  8043ac:	08066240 	call	806624 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8043b0:	00800044 	movi	r2,1
  8043b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8043b8:	e037883a 	mov	sp,fp
  8043bc:	dfc00117 	ldw	ra,4(sp)
  8043c0:	df000017 	ldw	fp,0(sp)
  8043c4:	dec00204 	addi	sp,sp,8
  8043c8:	f800283a 	ret

008043cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8043cc:	defffe04 	addi	sp,sp,-8
  8043d0:	dfc00115 	stw	ra,4(sp)
  8043d4:	df000015 	stw	fp,0(sp)
  8043d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8043dc:	01002034 	movhi	r4,128
  8043e0:	211e7104 	addi	r4,r4,31172
  8043e4:	000b883a 	mov	r5,zero
  8043e8:	01800044 	movi	r6,1
  8043ec:	08045b00 	call	8045b0 <altera_avalon_jtag_uart_init>
  8043f0:	01002034 	movhi	r4,128
  8043f4:	211e6704 	addi	r4,r4,31132
  8043f8:	08044300 	call	804430 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( RS232, RS232);
  8043fc:	01002074 	movhi	r4,129
  804400:	21228904 	addi	r4,r4,-30172
  804404:	000b883a 	mov	r5,zero
  804408:	000d883a 	mov	r6,zero
  80440c:	080500c0 	call	80500c <altera_avalon_uart_init>
  804410:	01002074 	movhi	r4,129
  804414:	21227f04 	addi	r4,r4,-30212
  804418:	08044300 	call	804430 <alt_dev_reg>
}
  80441c:	e037883a 	mov	sp,fp
  804420:	dfc00117 	ldw	ra,4(sp)
  804424:	df000017 	ldw	fp,0(sp)
  804428:	dec00204 	addi	sp,sp,8
  80442c:	f800283a 	ret

00804430 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  804430:	defffd04 	addi	sp,sp,-12
  804434:	dfc00215 	stw	ra,8(sp)
  804438:	df000115 	stw	fp,4(sp)
  80443c:	df000104 	addi	fp,sp,4
  804440:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804444:	e13fff17 	ldw	r4,-4(fp)
  804448:	01402074 	movhi	r5,129
  80444c:	2962b604 	addi	r5,r5,-29992
  804450:	0805ba80 	call	805ba8 <alt_dev_llist_insert>
}
  804454:	e037883a 	mov	sp,fp
  804458:	dfc00117 	ldw	ra,4(sp)
  80445c:	df000017 	ldw	fp,0(sp)
  804460:	dec00204 	addi	sp,sp,8
  804464:	f800283a 	ret

00804468 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804468:	defffa04 	addi	sp,sp,-24
  80446c:	dfc00515 	stw	ra,20(sp)
  804470:	df000415 	stw	fp,16(sp)
  804474:	df000404 	addi	fp,sp,16
  804478:	e13ffd15 	stw	r4,-12(fp)
  80447c:	e17ffe15 	stw	r5,-8(fp)
  804480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804484:	e0bffd17 	ldw	r2,-12(fp)
  804488:	10800017 	ldw	r2,0(r2)
  80448c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	11000a04 	addi	r4,r2,40
  804498:	e0bffd17 	ldw	r2,-12(fp)
  80449c:	11c00217 	ldw	r7,8(r2)
  8044a0:	e17ffe17 	ldw	r5,-8(fp)
  8044a4:	e1bfff17 	ldw	r6,-4(fp)
  8044a8:	0804ab00 	call	804ab0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8044ac:	e037883a 	mov	sp,fp
  8044b0:	dfc00117 	ldw	ra,4(sp)
  8044b4:	df000017 	ldw	fp,0(sp)
  8044b8:	dec00204 	addi	sp,sp,8
  8044bc:	f800283a 	ret

008044c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8044c0:	defffa04 	addi	sp,sp,-24
  8044c4:	dfc00515 	stw	ra,20(sp)
  8044c8:	df000415 	stw	fp,16(sp)
  8044cc:	df000404 	addi	fp,sp,16
  8044d0:	e13ffd15 	stw	r4,-12(fp)
  8044d4:	e17ffe15 	stw	r5,-8(fp)
  8044d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8044dc:	e0bffd17 	ldw	r2,-12(fp)
  8044e0:	10800017 	ldw	r2,0(r2)
  8044e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	11000a04 	addi	r4,r2,40
  8044f0:	e0bffd17 	ldw	r2,-12(fp)
  8044f4:	11c00217 	ldw	r7,8(r2)
  8044f8:	e17ffe17 	ldw	r5,-8(fp)
  8044fc:	e1bfff17 	ldw	r6,-4(fp)
  804500:	0804cd40 	call	804cd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804504:	e037883a 	mov	sp,fp
  804508:	dfc00117 	ldw	ra,4(sp)
  80450c:	df000017 	ldw	fp,0(sp)
  804510:	dec00204 	addi	sp,sp,8
  804514:	f800283a 	ret

00804518 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  804518:	defffc04 	addi	sp,sp,-16
  80451c:	dfc00315 	stw	ra,12(sp)
  804520:	df000215 	stw	fp,8(sp)
  804524:	df000204 	addi	fp,sp,8
  804528:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80452c:	e0bfff17 	ldw	r2,-4(fp)
  804530:	10800017 	ldw	r2,0(r2)
  804534:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  804538:	e0bffe17 	ldw	r2,-8(fp)
  80453c:	11000a04 	addi	r4,r2,40
  804540:	e0bfff17 	ldw	r2,-4(fp)
  804544:	11400217 	ldw	r5,8(r2)
  804548:	08049480 	call	804948 <altera_avalon_jtag_uart_close>
}
  80454c:	e037883a 	mov	sp,fp
  804550:	dfc00117 	ldw	ra,4(sp)
  804554:	df000017 	ldw	fp,0(sp)
  804558:	dec00204 	addi	sp,sp,8
  80455c:	f800283a 	ret

00804560 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  804560:	defffa04 	addi	sp,sp,-24
  804564:	dfc00515 	stw	ra,20(sp)
  804568:	df000415 	stw	fp,16(sp)
  80456c:	df000404 	addi	fp,sp,16
  804570:	e13ffd15 	stw	r4,-12(fp)
  804574:	e17ffe15 	stw	r5,-8(fp)
  804578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80457c:	e0bffd17 	ldw	r2,-12(fp)
  804580:	10800017 	ldw	r2,0(r2)
  804584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804588:	e0bffc17 	ldw	r2,-16(fp)
  80458c:	11000a04 	addi	r4,r2,40
  804590:	e17ffe17 	ldw	r5,-8(fp)
  804594:	e1bfff17 	ldw	r6,-4(fp)
  804598:	08049bc0 	call	8049bc <altera_avalon_jtag_uart_ioctl>
}
  80459c:	e037883a 	mov	sp,fp
  8045a0:	dfc00117 	ldw	ra,4(sp)
  8045a4:	df000017 	ldw	fp,0(sp)
  8045a8:	dec00204 	addi	sp,sp,8
  8045ac:	f800283a 	ret

008045b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8045b0:	defffa04 	addi	sp,sp,-24
  8045b4:	dfc00515 	stw	ra,20(sp)
  8045b8:	df000415 	stw	fp,16(sp)
  8045bc:	df000404 	addi	fp,sp,16
  8045c0:	e13ffd15 	stw	r4,-12(fp)
  8045c4:	e17ffe15 	stw	r5,-8(fp)
  8045c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8045cc:	e0fffd17 	ldw	r3,-12(fp)
  8045d0:	00800044 	movi	r2,1
  8045d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8045d8:	e0bffd17 	ldw	r2,-12(fp)
  8045dc:	10800017 	ldw	r2,0(r2)
  8045e0:	11000104 	addi	r4,r2,4
  8045e4:	e0bffd17 	ldw	r2,-12(fp)
  8045e8:	10800817 	ldw	r2,32(r2)
  8045ec:	1007883a 	mov	r3,r2
  8045f0:	2005883a 	mov	r2,r4
  8045f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8045f8:	e13ffe17 	ldw	r4,-8(fp)
  8045fc:	e17fff17 	ldw	r5,-4(fp)
  804600:	d8000015 	stw	zero,0(sp)
  804604:	01802034 	movhi	r6,128
  804608:	31919c04 	addi	r6,r6,18032
  80460c:	e1fffd17 	ldw	r7,-12(fp)
  804610:	0805db40 	call	805db4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804614:	e0bffd17 	ldw	r2,-12(fp)
  804618:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80461c:	e0bffd17 	ldw	r2,-12(fp)
  804620:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804624:	00802074 	movhi	r2,129
  804628:	10a98e04 	addi	r2,r2,-22984
  80462c:	10800017 	ldw	r2,0(r2)
  804630:	100b883a 	mov	r5,r2
  804634:	01802034 	movhi	r6,128
  804638:	31922604 	addi	r6,r6,18584
  80463c:	e1fffd17 	ldw	r7,-12(fp)
  804640:	08058c40 	call	8058c4 <alt_alarm_start>
  804644:	1004403a 	cmpge	r2,r2,zero
  804648:	1000041e 	bne	r2,zero,80465c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80464c:	e0fffd17 	ldw	r3,-12(fp)
  804650:	00a00034 	movhi	r2,32768
  804654:	10bfffc4 	addi	r2,r2,-1
  804658:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80465c:	e037883a 	mov	sp,fp
  804660:	dfc00117 	ldw	ra,4(sp)
  804664:	df000017 	ldw	fp,0(sp)
  804668:	dec00204 	addi	sp,sp,8
  80466c:	f800283a 	ret

00804670 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  804670:	defff804 	addi	sp,sp,-32
  804674:	df000715 	stw	fp,28(sp)
  804678:	df000704 	addi	fp,sp,28
  80467c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804680:	e0bfff17 	ldw	r2,-4(fp)
  804684:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  804688:	e0bffe17 	ldw	r2,-8(fp)
  80468c:	10800017 	ldw	r2,0(r2)
  804690:	e0bffd15 	stw	r2,-12(fp)
  804694:	00000006 	br	804698 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804698:	e0bffd17 	ldw	r2,-12(fp)
  80469c:	10800104 	addi	r2,r2,4
  8046a0:	10800037 	ldwio	r2,0(r2)
  8046a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8046a8:	e0bffc17 	ldw	r2,-16(fp)
  8046ac:	1080c00c 	andi	r2,r2,768
  8046b0:	1005003a 	cmpeq	r2,r2,zero
  8046b4:	1000741e 	bne	r2,zero,804888 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8046b8:	e0bffc17 	ldw	r2,-16(fp)
  8046bc:	1080400c 	andi	r2,r2,256
  8046c0:	1005003a 	cmpeq	r2,r2,zero
  8046c4:	1000351e 	bne	r2,zero,80479c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8046c8:	00800074 	movhi	r2,1
  8046cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8046d0:	e0bffe17 	ldw	r2,-8(fp)
  8046d4:	10800a17 	ldw	r2,40(r2)
  8046d8:	10800044 	addi	r2,r2,1
  8046dc:	1081ffcc 	andi	r2,r2,2047
  8046e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8046e4:	e0bffe17 	ldw	r2,-8(fp)
  8046e8:	10c00b17 	ldw	r3,44(r2)
  8046ec:	e0bffa17 	ldw	r2,-24(fp)
  8046f0:	18801626 	beq	r3,r2,80474c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8046f4:	e0bffd17 	ldw	r2,-12(fp)
  8046f8:	10800037 	ldwio	r2,0(r2)
  8046fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804700:	e0bffb17 	ldw	r2,-20(fp)
  804704:	10a0000c 	andi	r2,r2,32768
  804708:	1005003a 	cmpeq	r2,r2,zero
  80470c:	10000f1e 	bne	r2,zero,80474c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804710:	e0bffe17 	ldw	r2,-8(fp)
  804714:	10c00a17 	ldw	r3,40(r2)
  804718:	e0bffb17 	ldw	r2,-20(fp)
  80471c:	1009883a 	mov	r4,r2
  804720:	e0bffe17 	ldw	r2,-8(fp)
  804724:	1885883a 	add	r2,r3,r2
  804728:	10800e04 	addi	r2,r2,56
  80472c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804730:	e0bffe17 	ldw	r2,-8(fp)
  804734:	10800a17 	ldw	r2,40(r2)
  804738:	10800044 	addi	r2,r2,1
  80473c:	10c1ffcc 	andi	r3,r2,2047
  804740:	e0bffe17 	ldw	r2,-8(fp)
  804744:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804748:	003fe106 	br	8046d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80474c:	e0bffb17 	ldw	r2,-20(fp)
  804750:	10bfffec 	andhi	r2,r2,65535
  804754:	1005003a 	cmpeq	r2,r2,zero
  804758:	1000101e 	bne	r2,zero,80479c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80475c:	e0bffe17 	ldw	r2,-8(fp)
  804760:	10c00817 	ldw	r3,32(r2)
  804764:	00bfff84 	movi	r2,-2
  804768:	1886703a 	and	r3,r3,r2
  80476c:	e0bffe17 	ldw	r2,-8(fp)
  804770:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  804774:	e0bffd17 	ldw	r2,-12(fp)
  804778:	11000104 	addi	r4,r2,4
  80477c:	e0bffe17 	ldw	r2,-8(fp)
  804780:	10800817 	ldw	r2,32(r2)
  804784:	1007883a 	mov	r3,r2
  804788:	2005883a 	mov	r2,r4
  80478c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804790:	e0bffd17 	ldw	r2,-12(fp)
  804794:	10800104 	addi	r2,r2,4
  804798:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	1080800c 	andi	r2,r2,512
  8047a4:	1005003a 	cmpeq	r2,r2,zero
  8047a8:	103fbb1e 	bne	r2,zero,804698 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10bfffec 	andhi	r2,r2,65535
  8047b4:	1004d43a 	srli	r2,r2,16
  8047b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8047bc:	00001506 	br	804814 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8047c0:	e13ffd17 	ldw	r4,-12(fp)
  8047c4:	e0bffe17 	ldw	r2,-8(fp)
  8047c8:	10c00d17 	ldw	r3,52(r2)
  8047cc:	e0bffe17 	ldw	r2,-8(fp)
  8047d0:	1885883a 	add	r2,r3,r2
  8047d4:	10820e04 	addi	r2,r2,2104
  8047d8:	10800003 	ldbu	r2,0(r2)
  8047dc:	10c03fcc 	andi	r3,r2,255
  8047e0:	18c0201c 	xori	r3,r3,128
  8047e4:	18ffe004 	addi	r3,r3,-128
  8047e8:	2005883a 	mov	r2,r4
  8047ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8047f0:	e0bffe17 	ldw	r2,-8(fp)
  8047f4:	10800d17 	ldw	r2,52(r2)
  8047f8:	10800044 	addi	r2,r2,1
  8047fc:	10c1ffcc 	andi	r3,r2,2047
  804800:	e0bffe17 	ldw	r2,-8(fp)
  804804:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804808:	e0bff917 	ldw	r2,-28(fp)
  80480c:	10bfffc4 	addi	r2,r2,-1
  804810:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804814:	e0bff917 	ldw	r2,-28(fp)
  804818:	1005003a 	cmpeq	r2,r2,zero
  80481c:	1000051e 	bne	r2,zero,804834 <altera_avalon_jtag_uart_irq+0x1c4>
  804820:	e0bffe17 	ldw	r2,-8(fp)
  804824:	10c00d17 	ldw	r3,52(r2)
  804828:	e0bffe17 	ldw	r2,-8(fp)
  80482c:	10800c17 	ldw	r2,48(r2)
  804830:	18bfe31e 	bne	r3,r2,8047c0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804834:	e0bff917 	ldw	r2,-28(fp)
  804838:	1005003a 	cmpeq	r2,r2,zero
  80483c:	103f961e 	bne	r2,zero,804698 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804840:	e0bffe17 	ldw	r2,-8(fp)
  804844:	10c00817 	ldw	r3,32(r2)
  804848:	00bfff44 	movi	r2,-3
  80484c:	1886703a 	and	r3,r3,r2
  804850:	e0bffe17 	ldw	r2,-8(fp)
  804854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804858:	e0bffe17 	ldw	r2,-8(fp)
  80485c:	10800017 	ldw	r2,0(r2)
  804860:	11000104 	addi	r4,r2,4
  804864:	e0bffe17 	ldw	r2,-8(fp)
  804868:	10800817 	ldw	r2,32(r2)
  80486c:	1007883a 	mov	r3,r2
  804870:	2005883a 	mov	r2,r4
  804874:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804878:	e0bffd17 	ldw	r2,-12(fp)
  80487c:	10800104 	addi	r2,r2,4
  804880:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804884:	003f8406 	br	804698 <altera_avalon_jtag_uart_irq+0x28>
}
  804888:	e037883a 	mov	sp,fp
  80488c:	df000017 	ldw	fp,0(sp)
  804890:	dec00104 	addi	sp,sp,4
  804894:	f800283a 	ret

00804898 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  804898:	defffc04 	addi	sp,sp,-16
  80489c:	df000315 	stw	fp,12(sp)
  8048a0:	df000304 	addi	fp,sp,12
  8048a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8048a8:	e0bfff17 	ldw	r2,-4(fp)
  8048ac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8048b0:	e0bffe17 	ldw	r2,-8(fp)
  8048b4:	10800017 	ldw	r2,0(r2)
  8048b8:	10800104 	addi	r2,r2,4
  8048bc:	10800037 	ldwio	r2,0(r2)
  8048c0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8048c4:	e0bffd17 	ldw	r2,-12(fp)
  8048c8:	1081000c 	andi	r2,r2,1024
  8048cc:	1005003a 	cmpeq	r2,r2,zero
  8048d0:	10000c1e 	bne	r2,zero,804904 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8048d4:	e0bffe17 	ldw	r2,-8(fp)
  8048d8:	10800017 	ldw	r2,0(r2)
  8048dc:	11000104 	addi	r4,r2,4
  8048e0:	e0bffe17 	ldw	r2,-8(fp)
  8048e4:	10800817 	ldw	r2,32(r2)
  8048e8:	10810014 	ori	r2,r2,1024
  8048ec:	1007883a 	mov	r3,r2
  8048f0:	2005883a 	mov	r2,r4
  8048f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8048f8:	e0bffe17 	ldw	r2,-8(fp)
  8048fc:	10000915 	stw	zero,36(r2)
  804900:	00000a06 	br	80492c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804904:	e0bffe17 	ldw	r2,-8(fp)
  804908:	10c00917 	ldw	r3,36(r2)
  80490c:	00a00034 	movhi	r2,32768
  804910:	10bfff04 	addi	r2,r2,-4
  804914:	10c00536 	bltu	r2,r3,80492c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  804918:	e0bffe17 	ldw	r2,-8(fp)
  80491c:	10800917 	ldw	r2,36(r2)
  804920:	10c00044 	addi	r3,r2,1
  804924:	e0bffe17 	ldw	r2,-8(fp)
  804928:	10c00915 	stw	r3,36(r2)
  80492c:	00802074 	movhi	r2,129
  804930:	10a98e04 	addi	r2,r2,-22984
  804934:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  804938:	e037883a 	mov	sp,fp
  80493c:	df000017 	ldw	fp,0(sp)
  804940:	dec00104 	addi	sp,sp,4
  804944:	f800283a 	ret

00804948 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804948:	defffc04 	addi	sp,sp,-16
  80494c:	df000315 	stw	fp,12(sp)
  804950:	df000304 	addi	fp,sp,12
  804954:	e13ffd15 	stw	r4,-12(fp)
  804958:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80495c:	00000706 	br	80497c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  804960:	e0bffe17 	ldw	r2,-8(fp)
  804964:	1090000c 	andi	r2,r2,16384
  804968:	1005003a 	cmpeq	r2,r2,zero
  80496c:	1000031e 	bne	r2,zero,80497c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  804970:	00bffd44 	movi	r2,-11
  804974:	e0bfff15 	stw	r2,-4(fp)
  804978:	00000b06 	br	8049a8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80497c:	e0bffd17 	ldw	r2,-12(fp)
  804980:	10c00d17 	ldw	r3,52(r2)
  804984:	e0bffd17 	ldw	r2,-12(fp)
  804988:	10800c17 	ldw	r2,48(r2)
  80498c:	18800526 	beq	r3,r2,8049a4 <altera_avalon_jtag_uart_close+0x5c>
  804990:	e0bffd17 	ldw	r2,-12(fp)
  804994:	10c00917 	ldw	r3,36(r2)
  804998:	e0bffd17 	ldw	r2,-12(fp)
  80499c:	10800117 	ldw	r2,4(r2)
  8049a0:	18bfef36 	bltu	r3,r2,804960 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8049a4:	e03fff15 	stw	zero,-4(fp)
  8049a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8049ac:	e037883a 	mov	sp,fp
  8049b0:	df000017 	ldw	fp,0(sp)
  8049b4:	dec00104 	addi	sp,sp,4
  8049b8:	f800283a 	ret

008049bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8049bc:	defff804 	addi	sp,sp,-32
  8049c0:	df000715 	stw	fp,28(sp)
  8049c4:	df000704 	addi	fp,sp,28
  8049c8:	e13ffb15 	stw	r4,-20(fp)
  8049cc:	e17ffc15 	stw	r5,-16(fp)
  8049d0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8049d4:	00bff9c4 	movi	r2,-25
  8049d8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	e0bfff15 	stw	r2,-4(fp)
  8049e4:	e0ffff17 	ldw	r3,-4(fp)
  8049e8:	189a8060 	cmpeqi	r2,r3,27137
  8049ec:	1000041e 	bne	r2,zero,804a00 <altera_avalon_jtag_uart_ioctl+0x44>
  8049f0:	e0ffff17 	ldw	r3,-4(fp)
  8049f4:	189a80a0 	cmpeqi	r2,r3,27138
  8049f8:	10001b1e 	bne	r2,zero,804a68 <altera_avalon_jtag_uart_ioctl+0xac>
  8049fc:	00002706 	br	804a9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804a00:	e0bffb17 	ldw	r2,-20(fp)
  804a04:	10c00117 	ldw	r3,4(r2)
  804a08:	00a00034 	movhi	r2,32768
  804a0c:	10bfffc4 	addi	r2,r2,-1
  804a10:	18802226 	beq	r3,r2,804a9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  804a14:	e0bffd17 	ldw	r2,-12(fp)
  804a18:	10800017 	ldw	r2,0(r2)
  804a1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804a20:	e0bff917 	ldw	r2,-28(fp)
  804a24:	10800090 	cmplti	r2,r2,2
  804a28:	1000071e 	bne	r2,zero,804a48 <altera_avalon_jtag_uart_ioctl+0x8c>
  804a2c:	e0fff917 	ldw	r3,-28(fp)
  804a30:	00a00034 	movhi	r2,32768
  804a34:	10bfffc4 	addi	r2,r2,-1
  804a38:	18800326 	beq	r3,r2,804a48 <altera_avalon_jtag_uart_ioctl+0x8c>
  804a3c:	e0bff917 	ldw	r2,-28(fp)
  804a40:	e0bffe15 	stw	r2,-8(fp)
  804a44:	00000306 	br	804a54 <altera_avalon_jtag_uart_ioctl+0x98>
  804a48:	00e00034 	movhi	r3,32768
  804a4c:	18ffff84 	addi	r3,r3,-2
  804a50:	e0fffe15 	stw	r3,-8(fp)
  804a54:	e0bffb17 	ldw	r2,-20(fp)
  804a58:	e0fffe17 	ldw	r3,-8(fp)
  804a5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  804a60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  804a64:	00000d06 	br	804a9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804a68:	e0bffb17 	ldw	r2,-20(fp)
  804a6c:	10c00117 	ldw	r3,4(r2)
  804a70:	00a00034 	movhi	r2,32768
  804a74:	10bfffc4 	addi	r2,r2,-1
  804a78:	18800826 	beq	r3,r2,804a9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  804a7c:	e13ffd17 	ldw	r4,-12(fp)
  804a80:	e0bffb17 	ldw	r2,-20(fp)
  804a84:	10c00917 	ldw	r3,36(r2)
  804a88:	e0bffb17 	ldw	r2,-20(fp)
  804a8c:	10800117 	ldw	r2,4(r2)
  804a90:	1885803a 	cmpltu	r2,r3,r2
  804a94:	20800015 	stw	r2,0(r4)
      rc = 0;
  804a98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  804a9c:	e0bffa17 	ldw	r2,-24(fp)
}
  804aa0:	e037883a 	mov	sp,fp
  804aa4:	df000017 	ldw	fp,0(sp)
  804aa8:	dec00104 	addi	sp,sp,4
  804aac:	f800283a 	ret

00804ab0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804ab0:	defff204 	addi	sp,sp,-56
  804ab4:	dfc00d15 	stw	ra,52(sp)
  804ab8:	df000c15 	stw	fp,48(sp)
  804abc:	df000c04 	addi	fp,sp,48
  804ac0:	e13ffb15 	stw	r4,-20(fp)
  804ac4:	e17ffc15 	stw	r5,-16(fp)
  804ac8:	e1bffd15 	stw	r6,-12(fp)
  804acc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  804ad0:	e0bffc17 	ldw	r2,-16(fp)
  804ad4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804ad8:	00004806 	br	804bfc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804adc:	e0bffb17 	ldw	r2,-20(fp)
  804ae0:	10800a17 	ldw	r2,40(r2)
  804ae4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804ae8:	e0bffb17 	ldw	r2,-20(fp)
  804aec:	10800b17 	ldw	r2,44(r2)
  804af0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  804af4:	e0fff717 	ldw	r3,-36(fp)
  804af8:	e0bff617 	ldw	r2,-40(fp)
  804afc:	18800536 	bltu	r3,r2,804b14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804b00:	e0bff717 	ldw	r2,-36(fp)
  804b04:	e0fff617 	ldw	r3,-40(fp)
  804b08:	10c5c83a 	sub	r2,r2,r3
  804b0c:	e0bff815 	stw	r2,-32(fp)
  804b10:	00000406 	br	804b24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804b14:	00820004 	movi	r2,2048
  804b18:	e0fff617 	ldw	r3,-40(fp)
  804b1c:	10c5c83a 	sub	r2,r2,r3
  804b20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  804b24:	e0bff817 	ldw	r2,-32(fp)
  804b28:	1005003a 	cmpeq	r2,r2,zero
  804b2c:	10001f1e 	bne	r2,zero,804bac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  804b30:	e0fffd17 	ldw	r3,-12(fp)
  804b34:	e0bff817 	ldw	r2,-32(fp)
  804b38:	1880022e 	bgeu	r3,r2,804b44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  804b3c:	e0bffd17 	ldw	r2,-12(fp)
  804b40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804b44:	e0bffb17 	ldw	r2,-20(fp)
  804b48:	10c00e04 	addi	r3,r2,56
  804b4c:	e0bff617 	ldw	r2,-40(fp)
  804b50:	1887883a 	add	r3,r3,r2
  804b54:	e0bffa17 	ldw	r2,-24(fp)
  804b58:	1009883a 	mov	r4,r2
  804b5c:	180b883a 	mov	r5,r3
  804b60:	e1bff817 	ldw	r6,-32(fp)
  804b64:	0800a5c0 	call	800a5c <memcpy>
      ptr   += n;
  804b68:	e0fff817 	ldw	r3,-32(fp)
  804b6c:	e0bffa17 	ldw	r2,-24(fp)
  804b70:	10c5883a 	add	r2,r2,r3
  804b74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  804b78:	e0fffd17 	ldw	r3,-12(fp)
  804b7c:	e0bff817 	ldw	r2,-32(fp)
  804b80:	1885c83a 	sub	r2,r3,r2
  804b84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804b88:	e0fff617 	ldw	r3,-40(fp)
  804b8c:	e0bff817 	ldw	r2,-32(fp)
  804b90:	1885883a 	add	r2,r3,r2
  804b94:	10c1ffcc 	andi	r3,r2,2047
  804b98:	e0bffb17 	ldw	r2,-20(fp)
  804b9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  804ba0:	e0bffd17 	ldw	r2,-12(fp)
  804ba4:	10800048 	cmpgei	r2,r2,1
  804ba8:	103fcc1e 	bne	r2,zero,804adc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  804bac:	e0fffa17 	ldw	r3,-24(fp)
  804bb0:	e0bffc17 	ldw	r2,-16(fp)
  804bb4:	1880141e 	bne	r3,r2,804c08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804bb8:	e0bffe17 	ldw	r2,-8(fp)
  804bbc:	1090000c 	andi	r2,r2,16384
  804bc0:	1004c03a 	cmpne	r2,r2,zero
  804bc4:	1000101e 	bne	r2,zero,804c08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804bc8:	e0bffb17 	ldw	r2,-20(fp)
  804bcc:	10c00a17 	ldw	r3,40(r2)
  804bd0:	e0bff717 	ldw	r2,-36(fp)
  804bd4:	1880051e 	bne	r3,r2,804bec <altera_avalon_jtag_uart_read+0x13c>
  804bd8:	e0bffb17 	ldw	r2,-20(fp)
  804bdc:	10c00917 	ldw	r3,36(r2)
  804be0:	e0bffb17 	ldw	r2,-20(fp)
  804be4:	10800117 	ldw	r2,4(r2)
  804be8:	18bff736 	bltu	r3,r2,804bc8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804bec:	e0bffb17 	ldw	r2,-20(fp)
  804bf0:	10c00a17 	ldw	r3,40(r2)
  804bf4:	e0bff717 	ldw	r2,-36(fp)
  804bf8:	18800326 	beq	r3,r2,804c08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804bfc:	e0bffd17 	ldw	r2,-12(fp)
  804c00:	10800048 	cmpgei	r2,r2,1
  804c04:	103fb51e 	bne	r2,zero,804adc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804c08:	e0fffa17 	ldw	r3,-24(fp)
  804c0c:	e0bffc17 	ldw	r2,-16(fp)
  804c10:	18801926 	beq	r3,r2,804c78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c14:	0005303a 	rdctl	r2,status
  804c18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c1c:	e0fff517 	ldw	r3,-44(fp)
  804c20:	00bfff84 	movi	r2,-2
  804c24:	1884703a 	and	r2,r3,r2
  804c28:	1001703a 	wrctl	status,r2
  
  return context;
  804c2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804c30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804c34:	e0bffb17 	ldw	r2,-20(fp)
  804c38:	10800817 	ldw	r2,32(r2)
  804c3c:	10c00054 	ori	r3,r2,1
  804c40:	e0bffb17 	ldw	r2,-20(fp)
  804c44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804c48:	e0bffb17 	ldw	r2,-20(fp)
  804c4c:	10800017 	ldw	r2,0(r2)
  804c50:	11000104 	addi	r4,r2,4
  804c54:	e0bffb17 	ldw	r2,-20(fp)
  804c58:	10800817 	ldw	r2,32(r2)
  804c5c:	1007883a 	mov	r3,r2
  804c60:	2005883a 	mov	r2,r4
  804c64:	10c00035 	stwio	r3,0(r2)
  804c68:	e0bff917 	ldw	r2,-28(fp)
  804c6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c70:	e0bff417 	ldw	r2,-48(fp)
  804c74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  804c78:	e0fffa17 	ldw	r3,-24(fp)
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	18800526 	beq	r3,r2,804c98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  804c84:	e0fffa17 	ldw	r3,-24(fp)
  804c88:	e0bffc17 	ldw	r2,-16(fp)
  804c8c:	1887c83a 	sub	r3,r3,r2
  804c90:	e0ffff15 	stw	r3,-4(fp)
  804c94:	00000906 	br	804cbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  804c98:	e0bffe17 	ldw	r2,-8(fp)
  804c9c:	1090000c 	andi	r2,r2,16384
  804ca0:	1005003a 	cmpeq	r2,r2,zero
  804ca4:	1000031e 	bne	r2,zero,804cb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  804ca8:	00bffd44 	movi	r2,-11
  804cac:	e0bfff15 	stw	r2,-4(fp)
  804cb0:	00000206 	br	804cbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  804cb4:	00bffec4 	movi	r2,-5
  804cb8:	e0bfff15 	stw	r2,-4(fp)
  804cbc:	e0bfff17 	ldw	r2,-4(fp)
}
  804cc0:	e037883a 	mov	sp,fp
  804cc4:	dfc00117 	ldw	ra,4(sp)
  804cc8:	df000017 	ldw	fp,0(sp)
  804ccc:	dec00204 	addi	sp,sp,8
  804cd0:	f800283a 	ret

00804cd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804cd4:	defff204 	addi	sp,sp,-56
  804cd8:	dfc00d15 	stw	ra,52(sp)
  804cdc:	df000c15 	stw	fp,48(sp)
  804ce0:	df000c04 	addi	fp,sp,48
  804ce4:	e13ffb15 	stw	r4,-20(fp)
  804ce8:	e17ffc15 	stw	r5,-16(fp)
  804cec:	e1bffd15 	stw	r6,-12(fp)
  804cf0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804cf4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804cf8:	e0bffc17 	ldw	r2,-16(fp)
  804cfc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804d00:	00003a06 	br	804dec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804d04:	e0bffb17 	ldw	r2,-20(fp)
  804d08:	10800c17 	ldw	r2,48(r2)
  804d0c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  804d10:	e0bffb17 	ldw	r2,-20(fp)
  804d14:	10800d17 	ldw	r2,52(r2)
  804d18:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  804d1c:	e0fffa17 	ldw	r3,-24(fp)
  804d20:	e0bff917 	ldw	r2,-28(fp)
  804d24:	1880062e 	bgeu	r3,r2,804d40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804d28:	e0fff917 	ldw	r3,-28(fp)
  804d2c:	e0bffa17 	ldw	r2,-24(fp)
  804d30:	1885c83a 	sub	r2,r3,r2
  804d34:	10bfffc4 	addi	r2,r2,-1
  804d38:	e0bff815 	stw	r2,-32(fp)
  804d3c:	00000c06 	br	804d70 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  804d40:	e0bff917 	ldw	r2,-28(fp)
  804d44:	1005003a 	cmpeq	r2,r2,zero
  804d48:	1000051e 	bne	r2,zero,804d60 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804d4c:	00820004 	movi	r2,2048
  804d50:	e0fffa17 	ldw	r3,-24(fp)
  804d54:	10c5c83a 	sub	r2,r2,r3
  804d58:	e0bff815 	stw	r2,-32(fp)
  804d5c:	00000406 	br	804d70 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  804d60:	0081ffc4 	movi	r2,2047
  804d64:	e0fffa17 	ldw	r3,-24(fp)
  804d68:	10c5c83a 	sub	r2,r2,r3
  804d6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  804d70:	e0bff817 	ldw	r2,-32(fp)
  804d74:	1005003a 	cmpeq	r2,r2,zero
  804d78:	10001f1e 	bne	r2,zero,804df8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  804d7c:	e0fffd17 	ldw	r3,-12(fp)
  804d80:	e0bff817 	ldw	r2,-32(fp)
  804d84:	1880022e 	bgeu	r3,r2,804d90 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  804d88:	e0bffd17 	ldw	r2,-12(fp)
  804d8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  804d90:	e0bffb17 	ldw	r2,-20(fp)
  804d94:	10c20e04 	addi	r3,r2,2104
  804d98:	e0bffa17 	ldw	r2,-24(fp)
  804d9c:	1885883a 	add	r2,r3,r2
  804da0:	e0fffc17 	ldw	r3,-16(fp)
  804da4:	1009883a 	mov	r4,r2
  804da8:	180b883a 	mov	r5,r3
  804dac:	e1bff817 	ldw	r6,-32(fp)
  804db0:	0800a5c0 	call	800a5c <memcpy>
      ptr   += n;
  804db4:	e0fff817 	ldw	r3,-32(fp)
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	10c5883a 	add	r2,r2,r3
  804dc0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  804dc4:	e0fffd17 	ldw	r3,-12(fp)
  804dc8:	e0bff817 	ldw	r2,-32(fp)
  804dcc:	1885c83a 	sub	r2,r3,r2
  804dd0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804dd4:	e0fffa17 	ldw	r3,-24(fp)
  804dd8:	e0bff817 	ldw	r2,-32(fp)
  804ddc:	1885883a 	add	r2,r3,r2
  804de0:	10c1ffcc 	andi	r3,r2,2047
  804de4:	e0bffb17 	ldw	r2,-20(fp)
  804de8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804dec:	e0bffd17 	ldw	r2,-12(fp)
  804df0:	10800048 	cmpgei	r2,r2,1
  804df4:	103fc31e 	bne	r2,zero,804d04 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804df8:	0005303a 	rdctl	r2,status
  804dfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804e00:	e0fff517 	ldw	r3,-44(fp)
  804e04:	00bfff84 	movi	r2,-2
  804e08:	1884703a 	and	r2,r3,r2
  804e0c:	1001703a 	wrctl	status,r2
  
  return context;
  804e10:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804e14:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804e18:	e0bffb17 	ldw	r2,-20(fp)
  804e1c:	10800817 	ldw	r2,32(r2)
  804e20:	10c00094 	ori	r3,r2,2
  804e24:	e0bffb17 	ldw	r2,-20(fp)
  804e28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804e2c:	e0bffb17 	ldw	r2,-20(fp)
  804e30:	10800017 	ldw	r2,0(r2)
  804e34:	11000104 	addi	r4,r2,4
  804e38:	e0bffb17 	ldw	r2,-20(fp)
  804e3c:	10800817 	ldw	r2,32(r2)
  804e40:	1007883a 	mov	r3,r2
  804e44:	2005883a 	mov	r2,r4
  804e48:	10c00035 	stwio	r3,0(r2)
  804e4c:	e0bff717 	ldw	r2,-36(fp)
  804e50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804e54:	e0bff417 	ldw	r2,-48(fp)
  804e58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804e5c:	e0bffd17 	ldw	r2,-12(fp)
  804e60:	10800050 	cmplti	r2,r2,1
  804e64:	1000111e 	bne	r2,zero,804eac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  804e68:	e0bffe17 	ldw	r2,-8(fp)
  804e6c:	1090000c 	andi	r2,r2,16384
  804e70:	1004c03a 	cmpne	r2,r2,zero
  804e74:	1000101e 	bne	r2,zero,804eb8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804e78:	e0bffb17 	ldw	r2,-20(fp)
  804e7c:	10c00d17 	ldw	r3,52(r2)
  804e80:	e0bff917 	ldw	r2,-28(fp)
  804e84:	1880051e 	bne	r3,r2,804e9c <altera_avalon_jtag_uart_write+0x1c8>
  804e88:	e0bffb17 	ldw	r2,-20(fp)
  804e8c:	10c00917 	ldw	r3,36(r2)
  804e90:	e0bffb17 	ldw	r2,-20(fp)
  804e94:	10800117 	ldw	r2,4(r2)
  804e98:	18bff736 	bltu	r3,r2,804e78 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  804e9c:	e0bffb17 	ldw	r2,-20(fp)
  804ea0:	10c00d17 	ldw	r3,52(r2)
  804ea4:	e0bff917 	ldw	r2,-28(fp)
  804ea8:	18800326 	beq	r3,r2,804eb8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  804eac:	e0bffd17 	ldw	r2,-12(fp)
  804eb0:	10800048 	cmpgei	r2,r2,1
  804eb4:	103fcd1e 	bne	r2,zero,804dec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  804eb8:	e0fffc17 	ldw	r3,-16(fp)
  804ebc:	e0bff617 	ldw	r2,-40(fp)
  804ec0:	18800526 	beq	r3,r2,804ed8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  804ec4:	e0fffc17 	ldw	r3,-16(fp)
  804ec8:	e0bff617 	ldw	r2,-40(fp)
  804ecc:	1887c83a 	sub	r3,r3,r2
  804ed0:	e0ffff15 	stw	r3,-4(fp)
  804ed4:	00000906 	br	804efc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  804ed8:	e0bffe17 	ldw	r2,-8(fp)
  804edc:	1090000c 	andi	r2,r2,16384
  804ee0:	1005003a 	cmpeq	r2,r2,zero
  804ee4:	1000031e 	bne	r2,zero,804ef4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  804ee8:	00bffd44 	movi	r2,-11
  804eec:	e0bfff15 	stw	r2,-4(fp)
  804ef0:	00000206 	br	804efc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804ef4:	00bffec4 	movi	r2,-5
  804ef8:	e0bfff15 	stw	r2,-4(fp)
  804efc:	e0bfff17 	ldw	r2,-4(fp)
}
  804f00:	e037883a 	mov	sp,fp
  804f04:	dfc00117 	ldw	ra,4(sp)
  804f08:	df000017 	ldw	fp,0(sp)
  804f0c:	dec00204 	addi	sp,sp,8
  804f10:	f800283a 	ret

00804f14 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804f14:	defffa04 	addi	sp,sp,-24
  804f18:	dfc00515 	stw	ra,20(sp)
  804f1c:	df000415 	stw	fp,16(sp)
  804f20:	df000404 	addi	fp,sp,16
  804f24:	e13ffd15 	stw	r4,-12(fp)
  804f28:	e17ffe15 	stw	r5,-8(fp)
  804f2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804f30:	e0bffd17 	ldw	r2,-12(fp)
  804f34:	10800017 	ldw	r2,0(r2)
  804f38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  804f3c:	e0bffc17 	ldw	r2,-16(fp)
  804f40:	11000a04 	addi	r4,r2,40
  804f44:	e0bffd17 	ldw	r2,-12(fp)
  804f48:	11c00217 	ldw	r7,8(r2)
  804f4c:	e17ffe17 	ldw	r5,-8(fp)
  804f50:	e1bfff17 	ldw	r6,-4(fp)
  804f54:	080540c0 	call	80540c <altera_avalon_uart_read>
      fd->fd_flags);
}
  804f58:	e037883a 	mov	sp,fp
  804f5c:	dfc00117 	ldw	ra,4(sp)
  804f60:	df000017 	ldw	fp,0(sp)
  804f64:	dec00204 	addi	sp,sp,8
  804f68:	f800283a 	ret

00804f6c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804f6c:	defffa04 	addi	sp,sp,-24
  804f70:	dfc00515 	stw	ra,20(sp)
  804f74:	df000415 	stw	fp,16(sp)
  804f78:	df000404 	addi	fp,sp,16
  804f7c:	e13ffd15 	stw	r4,-12(fp)
  804f80:	e17ffe15 	stw	r5,-8(fp)
  804f84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804f88:	e0bffd17 	ldw	r2,-12(fp)
  804f8c:	10800017 	ldw	r2,0(r2)
  804f90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  804f94:	e0bffc17 	ldw	r2,-16(fp)
  804f98:	11000a04 	addi	r4,r2,40
  804f9c:	e0bffd17 	ldw	r2,-12(fp)
  804fa0:	11c00217 	ldw	r7,8(r2)
  804fa4:	e17ffe17 	ldw	r5,-8(fp)
  804fa8:	e1bfff17 	ldw	r6,-4(fp)
  804fac:	080569c0 	call	80569c <altera_avalon_uart_write>
      fd->fd_flags);
}
  804fb0:	e037883a 	mov	sp,fp
  804fb4:	dfc00117 	ldw	ra,4(sp)
  804fb8:	df000017 	ldw	fp,0(sp)
  804fbc:	dec00204 	addi	sp,sp,8
  804fc0:	f800283a 	ret

00804fc4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  804fc4:	defffc04 	addi	sp,sp,-16
  804fc8:	dfc00315 	stw	ra,12(sp)
  804fcc:	df000215 	stw	fp,8(sp)
  804fd0:	df000204 	addi	fp,sp,8
  804fd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804fd8:	e0bfff17 	ldw	r2,-4(fp)
  804fdc:	10800017 	ldw	r2,0(r2)
  804fe0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  804fe4:	e0bffe17 	ldw	r2,-8(fp)
  804fe8:	11000a04 	addi	r4,r2,40
  804fec:	e0bfff17 	ldw	r2,-4(fp)
  804ff0:	11400217 	ldw	r5,8(r2)
  804ff4:	08053ac0 	call	8053ac <altera_avalon_uart_close>
}
  804ff8:	e037883a 	mov	sp,fp
  804ffc:	dfc00117 	ldw	ra,4(sp)
  805000:	df000017 	ldw	fp,0(sp)
  805004:	dec00204 	addi	sp,sp,8
  805008:	f800283a 	ret

0080500c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80500c:	defff704 	addi	sp,sp,-36
  805010:	dfc00815 	stw	ra,32(sp)
  805014:	df000715 	stw	fp,28(sp)
  805018:	df000704 	addi	fp,sp,28
  80501c:	e13ffc15 	stw	r4,-16(fp)
  805020:	e17ffd15 	stw	r5,-12(fp)
  805024:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  805028:	e0bffc17 	ldw	r2,-16(fp)
  80502c:	10800017 	ldw	r2,0(r2)
  805030:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  805034:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  805038:	1004c03a 	cmpne	r2,r2,zero
  80503c:	1000061e 	bne	r2,zero,805058 <altera_avalon_uart_init+0x4c>
  805040:	0005883a 	mov	r2,zero
  805044:	1004c03a 	cmpne	r2,r2,zero
  805048:	1000031e 	bne	r2,zero,805058 <altera_avalon_uart_init+0x4c>
  80504c:	0005883a 	mov	r2,zero
  805050:	1005003a 	cmpeq	r2,r2,zero
  805054:	1000031e 	bne	r2,zero,805064 <altera_avalon_uart_init+0x58>
  805058:	00800044 	movi	r2,1
  80505c:	e0bfff15 	stw	r2,-4(fp)
  805060:	00000106 	br	805068 <altera_avalon_uart_init+0x5c>
  805064:	e03fff15 	stw	zero,-4(fp)
  805068:	e0bfff17 	ldw	r2,-4(fp)
  80506c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  805070:	e0bffa17 	ldw	r2,-24(fp)
  805074:	1004c03a 	cmpne	r2,r2,zero
  805078:	1000111e 	bne	r2,zero,8050c0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80507c:	e0fffc17 	ldw	r3,-16(fp)
  805080:	00832004 	movi	r2,3200
  805084:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  805088:	e0bffb17 	ldw	r2,-20(fp)
  80508c:	11000304 	addi	r4,r2,12
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10800117 	ldw	r2,4(r2)
  805098:	1007883a 	mov	r3,r2
  80509c:	2005883a 	mov	r2,r4
  8050a0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8050a4:	d8000015 	stw	zero,0(sp)
  8050a8:	e13ffd17 	ldw	r4,-12(fp)
  8050ac:	e17ffe17 	ldw	r5,-8(fp)
  8050b0:	01802034 	movhi	r6,128
  8050b4:	31943504 	addi	r6,r6,20692
  8050b8:	e1fffc17 	ldw	r7,-16(fp)
  8050bc:	0805db40 	call	805db4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8050c0:	e037883a 	mov	sp,fp
  8050c4:	dfc00117 	ldw	ra,4(sp)
  8050c8:	df000017 	ldw	fp,0(sp)
  8050cc:	dec00204 	addi	sp,sp,8
  8050d0:	f800283a 	ret

008050d4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8050d4:	defffa04 	addi	sp,sp,-24
  8050d8:	dfc00515 	stw	ra,20(sp)
  8050dc:	df000415 	stw	fp,16(sp)
  8050e0:	df000404 	addi	fp,sp,16
  8050e4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8050e8:	e0bfff17 	ldw	r2,-4(fp)
  8050ec:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8050f0:	e0bffd17 	ldw	r2,-12(fp)
  8050f4:	10800017 	ldw	r2,0(r2)
  8050f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8050fc:	e0bffc17 	ldw	r2,-16(fp)
  805100:	10800204 	addi	r2,r2,8
  805104:	10800037 	ldwio	r2,0(r2)
  805108:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80510c:	e0bffc17 	ldw	r2,-16(fp)
  805110:	10800204 	addi	r2,r2,8
  805114:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  805118:	e0bffc17 	ldw	r2,-16(fp)
  80511c:	10800204 	addi	r2,r2,8
  805120:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  805124:	e0bffe17 	ldw	r2,-8(fp)
  805128:	1080200c 	andi	r2,r2,128
  80512c:	1005003a 	cmpeq	r2,r2,zero
  805130:	1000031e 	bne	r2,zero,805140 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  805134:	e13ffd17 	ldw	r4,-12(fp)
  805138:	e17ffe17 	ldw	r5,-8(fp)
  80513c:	08051700 	call	805170 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  805140:	e0bffe17 	ldw	r2,-8(fp)
  805144:	1081100c 	andi	r2,r2,1088
  805148:	1005003a 	cmpeq	r2,r2,zero
  80514c:	1000031e 	bne	r2,zero,80515c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  805150:	e13ffd17 	ldw	r4,-12(fp)
  805154:	e17ffe17 	ldw	r5,-8(fp)
  805158:	08052500 	call	805250 <altera_avalon_uart_txirq>
  }
  

}
  80515c:	e037883a 	mov	sp,fp
  805160:	dfc00117 	ldw	ra,4(sp)
  805164:	df000017 	ldw	fp,0(sp)
  805168:	dec00204 	addi	sp,sp,8
  80516c:	f800283a 	ret

00805170 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  805170:	defffc04 	addi	sp,sp,-16
  805174:	df000315 	stw	fp,12(sp)
  805178:	df000304 	addi	fp,sp,12
  80517c:	e13ffe15 	stw	r4,-8(fp)
  805180:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  805184:	e0bfff17 	ldw	r2,-4(fp)
  805188:	108000cc 	andi	r2,r2,3
  80518c:	1004c03a 	cmpne	r2,r2,zero
  805190:	10002b1e 	bne	r2,zero,805240 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  805194:	e0bffe17 	ldw	r2,-8(fp)
  805198:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80519c:	e0bffe17 	ldw	r2,-8(fp)
  8051a0:	10800317 	ldw	r2,12(r2)
  8051a4:	10800044 	addi	r2,r2,1
  8051a8:	10800fcc 	andi	r2,r2,63
  8051ac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8051b0:	e0bffe17 	ldw	r2,-8(fp)
  8051b4:	11000317 	ldw	r4,12(r2)
  8051b8:	e0bffe17 	ldw	r2,-8(fp)
  8051bc:	10800017 	ldw	r2,0(r2)
  8051c0:	10800037 	ldwio	r2,0(r2)
  8051c4:	1007883a 	mov	r3,r2
  8051c8:	e0bffe17 	ldw	r2,-8(fp)
  8051cc:	2085883a 	add	r2,r4,r2
  8051d0:	10800704 	addi	r2,r2,28
  8051d4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  8051d8:	e0fffe17 	ldw	r3,-8(fp)
  8051dc:	e0bffd17 	ldw	r2,-12(fp)
  8051e0:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8051e4:	e0bffe17 	ldw	r2,-8(fp)
  8051e8:	10800317 	ldw	r2,12(r2)
  8051ec:	10800044 	addi	r2,r2,1
  8051f0:	10800fcc 	andi	r2,r2,63
  8051f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8051f8:	e0bffe17 	ldw	r2,-8(fp)
  8051fc:	10c00217 	ldw	r3,8(r2)
  805200:	e0bffd17 	ldw	r2,-12(fp)
  805204:	18800e1e 	bne	r3,r2,805240 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805208:	e0bffe17 	ldw	r2,-8(fp)
  80520c:	10c00117 	ldw	r3,4(r2)
  805210:	00bfdfc4 	movi	r2,-129
  805214:	1886703a 	and	r3,r3,r2
  805218:	e0bffe17 	ldw	r2,-8(fp)
  80521c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  805220:	e0bffe17 	ldw	r2,-8(fp)
  805224:	10800017 	ldw	r2,0(r2)
  805228:	11000304 	addi	r4,r2,12
  80522c:	e0bffe17 	ldw	r2,-8(fp)
  805230:	10800117 	ldw	r2,4(r2)
  805234:	1007883a 	mov	r3,r2
  805238:	2005883a 	mov	r2,r4
  80523c:	10c00035 	stwio	r3,0(r2)
  }   
}
  805240:	e037883a 	mov	sp,fp
  805244:	df000017 	ldw	fp,0(sp)
  805248:	dec00104 	addi	sp,sp,4
  80524c:	f800283a 	ret

00805250 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  805250:	defffd04 	addi	sp,sp,-12
  805254:	df000215 	stw	fp,8(sp)
  805258:	df000204 	addi	fp,sp,8
  80525c:	e13ffe15 	stw	r4,-8(fp)
  805260:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  805264:	e0bffe17 	ldw	r2,-8(fp)
  805268:	10c00417 	ldw	r3,16(r2)
  80526c:	e0bffe17 	ldw	r2,-8(fp)
  805270:	10800517 	ldw	r2,20(r2)
  805274:	18803626 	beq	r3,r2,805350 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  805278:	e0bffe17 	ldw	r2,-8(fp)
  80527c:	10800617 	ldw	r2,24(r2)
  805280:	1080008c 	andi	r2,r2,2
  805284:	1005003a 	cmpeq	r2,r2,zero
  805288:	1000041e 	bne	r2,zero,80529c <altera_avalon_uart_txirq+0x4c>
  80528c:	e0bfff17 	ldw	r2,-4(fp)
  805290:	1082000c 	andi	r2,r2,2048
  805294:	1005003a 	cmpeq	r2,r2,zero
  805298:	10001e1e 	bne	r2,zero,805314 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80529c:	e0bffe17 	ldw	r2,-8(fp)
  8052a0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8052a4:	e0bffe17 	ldw	r2,-8(fp)
  8052a8:	10800017 	ldw	r2,0(r2)
  8052ac:	11000104 	addi	r4,r2,4
  8052b0:	e0bffe17 	ldw	r2,-8(fp)
  8052b4:	10c00417 	ldw	r3,16(r2)
  8052b8:	e0bffe17 	ldw	r2,-8(fp)
  8052bc:	1885883a 	add	r2,r3,r2
  8052c0:	10801704 	addi	r2,r2,92
  8052c4:	10800003 	ldbu	r2,0(r2)
  8052c8:	10c03fcc 	andi	r3,r2,255
  8052cc:	2005883a 	mov	r2,r4
  8052d0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8052d4:	e0bffe17 	ldw	r2,-8(fp)
  8052d8:	10800417 	ldw	r2,16(r2)
  8052dc:	10c00044 	addi	r3,r2,1
  8052e0:	e0bffe17 	ldw	r2,-8(fp)
  8052e4:	10c00415 	stw	r3,16(r2)
  8052e8:	e0bffe17 	ldw	r2,-8(fp)
  8052ec:	10800417 	ldw	r2,16(r2)
  8052f0:	10c00fcc 	andi	r3,r2,63
  8052f4:	e0bffe17 	ldw	r2,-8(fp)
  8052f8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8052fc:	e0bffe17 	ldw	r2,-8(fp)
  805300:	10800117 	ldw	r2,4(r2)
  805304:	10c01014 	ori	r3,r2,64
  805308:	e0bffe17 	ldw	r2,-8(fp)
  80530c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  805310:	00000f06 	br	805350 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  805314:	e0bffe17 	ldw	r2,-8(fp)
  805318:	10800017 	ldw	r2,0(r2)
  80531c:	10800204 	addi	r2,r2,8
  805320:	10800037 	ldwio	r2,0(r2)
  805324:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  805328:	e0bfff17 	ldw	r2,-4(fp)
  80532c:	1082000c 	andi	r2,r2,2048
  805330:	1004c03a 	cmpne	r2,r2,zero
  805334:	1000061e 	bne	r2,zero,805350 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  805338:	e0bffe17 	ldw	r2,-8(fp)
  80533c:	10c00117 	ldw	r3,4(r2)
  805340:	00bfefc4 	movi	r2,-65
  805344:	1886703a 	and	r3,r3,r2
  805348:	e0bffe17 	ldw	r2,-8(fp)
  80534c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  805350:	e0bffe17 	ldw	r2,-8(fp)
  805354:	10c00417 	ldw	r3,16(r2)
  805358:	e0bffe17 	ldw	r2,-8(fp)
  80535c:	10800517 	ldw	r2,20(r2)
  805360:	1880061e 	bne	r3,r2,80537c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805364:	e0bffe17 	ldw	r2,-8(fp)
  805368:	10c00117 	ldw	r3,4(r2)
  80536c:	00beefc4 	movi	r2,-1089
  805370:	1886703a 	and	r3,r3,r2
  805374:	e0bffe17 	ldw	r2,-8(fp)
  805378:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80537c:	e0bffe17 	ldw	r2,-8(fp)
  805380:	10800017 	ldw	r2,0(r2)
  805384:	11000304 	addi	r4,r2,12
  805388:	e0bffe17 	ldw	r2,-8(fp)
  80538c:	10800117 	ldw	r2,4(r2)
  805390:	1007883a 	mov	r3,r2
  805394:	2005883a 	mov	r2,r4
  805398:	10c00035 	stwio	r3,0(r2)
}
  80539c:	e037883a 	mov	sp,fp
  8053a0:	df000017 	ldw	fp,0(sp)
  8053a4:	dec00104 	addi	sp,sp,4
  8053a8:	f800283a 	ret

008053ac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8053ac:	defffc04 	addi	sp,sp,-16
  8053b0:	df000315 	stw	fp,12(sp)
  8053b4:	df000304 	addi	fp,sp,12
  8053b8:	e13ffd15 	stw	r4,-12(fp)
  8053bc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8053c0:	00000706 	br	8053e0 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8053c4:	e0bffe17 	ldw	r2,-8(fp)
  8053c8:	1090000c 	andi	r2,r2,16384
  8053cc:	1005003a 	cmpeq	r2,r2,zero
  8053d0:	1000031e 	bne	r2,zero,8053e0 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  8053d4:	00bffd44 	movi	r2,-11
  8053d8:	e0bfff15 	stw	r2,-4(fp)
  8053dc:	00000606 	br	8053f8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8053e0:	e0bffd17 	ldw	r2,-12(fp)
  8053e4:	10c00417 	ldw	r3,16(r2)
  8053e8:	e0bffd17 	ldw	r2,-12(fp)
  8053ec:	10800517 	ldw	r2,20(r2)
  8053f0:	18bff41e 	bne	r3,r2,8053c4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8053f4:	e03fff15 	stw	zero,-4(fp)
  8053f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8053fc:	e037883a 	mov	sp,fp
  805400:	df000017 	ldw	fp,0(sp)
  805404:	dec00104 	addi	sp,sp,4
  805408:	f800283a 	ret

0080540c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80540c:	defff004 	addi	sp,sp,-64
  805410:	dfc00f15 	stw	ra,60(sp)
  805414:	df000e15 	stw	fp,56(sp)
  805418:	df000e04 	addi	fp,sp,56
  80541c:	e13ffb15 	stw	r4,-20(fp)
  805420:	e17ffc15 	stw	r5,-16(fp)
  805424:	e1bffd15 	stw	r6,-12(fp)
  805428:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80542c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  805430:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  805434:	e0bffe17 	ldw	r2,-8(fp)
  805438:	1090000c 	andi	r2,r2,16384
  80543c:	1005003a 	cmpeq	r2,r2,zero
  805440:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  805444:	e0bffb17 	ldw	r2,-20(fp)
  805448:	10800217 	ldw	r2,8(r2)
  80544c:	10800044 	addi	r2,r2,1
  805450:	10800fcc 	andi	r2,r2,63
  805454:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  805458:	00001906 	br	8054c0 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80545c:	e0bff617 	ldw	r2,-40(fp)
  805460:	10800044 	addi	r2,r2,1
  805464:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  805468:	e0bffb17 	ldw	r2,-20(fp)
  80546c:	10c00217 	ldw	r3,8(r2)
  805470:	e0bffb17 	ldw	r2,-20(fp)
  805474:	1885883a 	add	r2,r3,r2
  805478:	10800704 	addi	r2,r2,28
  80547c:	10800003 	ldbu	r2,0(r2)
  805480:	1007883a 	mov	r3,r2
  805484:	e0bffc17 	ldw	r2,-16(fp)
  805488:	10c00005 	stb	r3,0(r2)
  80548c:	e0bffc17 	ldw	r2,-16(fp)
  805490:	10800044 	addi	r2,r2,1
  805494:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  805498:	e0bffb17 	ldw	r2,-20(fp)
  80549c:	10800217 	ldw	r2,8(r2)
  8054a0:	10c00044 	addi	r3,r2,1
  8054a4:	e0bffb17 	ldw	r2,-20(fp)
  8054a8:	10c00215 	stw	r3,8(r2)
  8054ac:	e0bffb17 	ldw	r2,-20(fp)
  8054b0:	10800217 	ldw	r2,8(r2)
  8054b4:	10c00fcc 	andi	r3,r2,63
  8054b8:	e0bffb17 	ldw	r2,-20(fp)
  8054bc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8054c0:	e0fff617 	ldw	r3,-40(fp)
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	1880050e 	bge	r3,r2,8054e0 <altera_avalon_uart_read+0xd4>
  8054cc:	e0bffb17 	ldw	r2,-20(fp)
  8054d0:	10c00217 	ldw	r3,8(r2)
  8054d4:	e0bffb17 	ldw	r2,-20(fp)
  8054d8:	10800317 	ldw	r2,12(r2)
  8054dc:	18bfdf1e 	bne	r3,r2,80545c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8054e0:	e0bff617 	ldw	r2,-40(fp)
  8054e4:	1004c03a 	cmpne	r2,r2,zero
  8054e8:	1000271e 	bne	r2,zero,805588 <altera_avalon_uart_read+0x17c>
  8054ec:	e0bffb17 	ldw	r2,-20(fp)
  8054f0:	10c00217 	ldw	r3,8(r2)
  8054f4:	e0bffb17 	ldw	r2,-20(fp)
  8054f8:	10800317 	ldw	r2,12(r2)
  8054fc:	1880221e 	bne	r3,r2,805588 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  805500:	e0bff917 	ldw	r2,-28(fp)
  805504:	1004c03a 	cmpne	r2,r2,zero
  805508:	1000061e 	bne	r2,zero,805524 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80550c:	080563c0 	call	80563c <alt_get_errno>
  805510:	00c002c4 	movi	r3,11
  805514:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  805518:	00800044 	movi	r2,1
  80551c:	e0bff705 	stb	r2,-36(fp)
        break;
  805520:	00001f06 	br	8055a0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805524:	0005303a 	rdctl	r2,status
  805528:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80552c:	e0fff517 	ldw	r3,-44(fp)
  805530:	00bfff84 	movi	r2,-2
  805534:	1884703a 	and	r2,r3,r2
  805538:	1001703a 	wrctl	status,r2
  
  return context;
  80553c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  805540:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805544:	e0bffb17 	ldw	r2,-20(fp)
  805548:	10800117 	ldw	r2,4(r2)
  80554c:	10c02014 	ori	r3,r2,128
  805550:	e0bffb17 	ldw	r2,-20(fp)
  805554:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805558:	e0bffb17 	ldw	r2,-20(fp)
  80555c:	10800017 	ldw	r2,0(r2)
  805560:	11000304 	addi	r4,r2,12
  805564:	e0bffb17 	ldw	r2,-20(fp)
  805568:	10800117 	ldw	r2,4(r2)
  80556c:	1007883a 	mov	r3,r2
  805570:	2005883a 	mov	r2,r4
  805574:	10c00035 	stwio	r3,0(r2)
  805578:	e0bffa17 	ldw	r2,-24(fp)
  80557c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805580:	e0bff417 	ldw	r2,-48(fp)
  805584:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  805588:	e0bff617 	ldw	r2,-40(fp)
  80558c:	1004c03a 	cmpne	r2,r2,zero
  805590:	1000031e 	bne	r2,zero,8055a0 <altera_avalon_uart_read+0x194>
  805594:	e0bffd17 	ldw	r2,-12(fp)
  805598:	1004c03a 	cmpne	r2,r2,zero
  80559c:	103fc81e 	bne	r2,zero,8054c0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8055a0:	0005303a 	rdctl	r2,status
  8055a4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8055a8:	e0fff317 	ldw	r3,-52(fp)
  8055ac:	00bfff84 	movi	r2,-2
  8055b0:	1884703a 	and	r2,r3,r2
  8055b4:	1001703a 	wrctl	status,r2
  
  return context;
  8055b8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8055bc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8055c0:	e0bffb17 	ldw	r2,-20(fp)
  8055c4:	10800117 	ldw	r2,4(r2)
  8055c8:	10c02014 	ori	r3,r2,128
  8055cc:	e0bffb17 	ldw	r2,-20(fp)
  8055d0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8055d4:	e0bffb17 	ldw	r2,-20(fp)
  8055d8:	10800017 	ldw	r2,0(r2)
  8055dc:	11000304 	addi	r4,r2,12
  8055e0:	e0bffb17 	ldw	r2,-20(fp)
  8055e4:	10800117 	ldw	r2,4(r2)
  8055e8:	1007883a 	mov	r3,r2
  8055ec:	2005883a 	mov	r2,r4
  8055f0:	10c00035 	stwio	r3,0(r2)
  8055f4:	e0bffa17 	ldw	r2,-24(fp)
  8055f8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8055fc:	e0bff217 	ldw	r2,-56(fp)
  805600:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  805604:	e0bff703 	ldbu	r2,-36(fp)
  805608:	1005003a 	cmpeq	r2,r2,zero
  80560c:	1000031e 	bne	r2,zero,80561c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  805610:	00bffd04 	movi	r2,-12
  805614:	e0bfff15 	stw	r2,-4(fp)
  805618:	00000206 	br	805624 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80561c:	e0bff617 	ldw	r2,-40(fp)
  805620:	e0bfff15 	stw	r2,-4(fp)
  805624:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  805628:	e037883a 	mov	sp,fp
  80562c:	dfc00117 	ldw	ra,4(sp)
  805630:	df000017 	ldw	fp,0(sp)
  805634:	dec00204 	addi	sp,sp,8
  805638:	f800283a 	ret

0080563c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80563c:	defffd04 	addi	sp,sp,-12
  805640:	dfc00215 	stw	ra,8(sp)
  805644:	df000115 	stw	fp,4(sp)
  805648:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80564c:	00802074 	movhi	r2,129
  805650:	10a2b904 	addi	r2,r2,-29980
  805654:	10800017 	ldw	r2,0(r2)
  805658:	1005003a 	cmpeq	r2,r2,zero
  80565c:	1000061e 	bne	r2,zero,805678 <alt_get_errno+0x3c>
  805660:	00802074 	movhi	r2,129
  805664:	10a2b904 	addi	r2,r2,-29980
  805668:	10800017 	ldw	r2,0(r2)
  80566c:	103ee83a 	callr	r2
  805670:	e0bfff15 	stw	r2,-4(fp)
  805674:	00000306 	br	805684 <alt_get_errno+0x48>
  805678:	00802074 	movhi	r2,129
  80567c:	10a98904 	addi	r2,r2,-23004
  805680:	e0bfff15 	stw	r2,-4(fp)
  805684:	e0bfff17 	ldw	r2,-4(fp)
}
  805688:	e037883a 	mov	sp,fp
  80568c:	dfc00117 	ldw	ra,4(sp)
  805690:	df000017 	ldw	fp,0(sp)
  805694:	dec00204 	addi	sp,sp,8
  805698:	f800283a 	ret

0080569c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80569c:	defff204 	addi	sp,sp,-56
  8056a0:	dfc00d15 	stw	ra,52(sp)
  8056a4:	df000c15 	stw	fp,48(sp)
  8056a8:	df000c04 	addi	fp,sp,48
  8056ac:	e13ffc15 	stw	r4,-16(fp)
  8056b0:	e17ffd15 	stw	r5,-12(fp)
  8056b4:	e1bffe15 	stw	r6,-8(fp)
  8056b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8056bc:	e0bffe17 	ldw	r2,-8(fp)
  8056c0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8056c4:	e0bfff17 	ldw	r2,-4(fp)
  8056c8:	1090000c 	andi	r2,r2,16384
  8056cc:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8056d0:	00004006 	br	8057d4 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8056d4:	e0bffc17 	ldw	r2,-16(fp)
  8056d8:	10800517 	ldw	r2,20(r2)
  8056dc:	10800044 	addi	r2,r2,1
  8056e0:	10800fcc 	andi	r2,r2,63
  8056e4:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8056e8:	e0bffc17 	ldw	r2,-16(fp)
  8056ec:	10c00417 	ldw	r3,16(r2)
  8056f0:	e0bff917 	ldw	r2,-28(fp)
  8056f4:	1880251e 	bne	r3,r2,80578c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  8056f8:	e0bffa17 	ldw	r2,-24(fp)
  8056fc:	1005003a 	cmpeq	r2,r2,zero
  805700:	1000051e 	bne	r2,zero,805718 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  805704:	08058640 	call	805864 <alt_get_errno>
  805708:	1007883a 	mov	r3,r2
  80570c:	008002c4 	movi	r2,11
  805710:	18800015 	stw	r2,0(r3)
        break;
  805714:	00003206 	br	8057e0 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805718:	0005303a 	rdctl	r2,status
  80571c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805720:	e0fff717 	ldw	r3,-36(fp)
  805724:	00bfff84 	movi	r2,-2
  805728:	1884703a 	and	r2,r3,r2
  80572c:	1001703a 	wrctl	status,r2
  
  return context;
  805730:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  805734:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805738:	e0bffc17 	ldw	r2,-16(fp)
  80573c:	10800117 	ldw	r2,4(r2)
  805740:	10c11014 	ori	r3,r2,1088
  805744:	e0bffc17 	ldw	r2,-16(fp)
  805748:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80574c:	e0bffc17 	ldw	r2,-16(fp)
  805750:	10800017 	ldw	r2,0(r2)
  805754:	11000304 	addi	r4,r2,12
  805758:	e0bffc17 	ldw	r2,-16(fp)
  80575c:	10800117 	ldw	r2,4(r2)
  805760:	1007883a 	mov	r3,r2
  805764:	2005883a 	mov	r2,r4
  805768:	10c00035 	stwio	r3,0(r2)
  80576c:	e0bffb17 	ldw	r2,-20(fp)
  805770:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805774:	e0bff617 	ldw	r2,-40(fp)
  805778:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80577c:	e0bffc17 	ldw	r2,-16(fp)
  805780:	10c00417 	ldw	r3,16(r2)
  805784:	e0bff917 	ldw	r2,-28(fp)
  805788:	18bffc26 	beq	r3,r2,80577c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80578c:	e0bff817 	ldw	r2,-32(fp)
  805790:	10bfffc4 	addi	r2,r2,-1
  805794:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  805798:	e0bffc17 	ldw	r2,-16(fp)
  80579c:	10c00517 	ldw	r3,20(r2)
  8057a0:	e0bffd17 	ldw	r2,-12(fp)
  8057a4:	10800003 	ldbu	r2,0(r2)
  8057a8:	1009883a 	mov	r4,r2
  8057ac:	e0bffc17 	ldw	r2,-16(fp)
  8057b0:	1885883a 	add	r2,r3,r2
  8057b4:	10801704 	addi	r2,r2,92
  8057b8:	11000005 	stb	r4,0(r2)
  8057bc:	e0bffd17 	ldw	r2,-12(fp)
  8057c0:	10800044 	addi	r2,r2,1
  8057c4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  8057c8:	e0fffc17 	ldw	r3,-16(fp)
  8057cc:	e0bff917 	ldw	r2,-28(fp)
  8057d0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8057d4:	e0bff817 	ldw	r2,-32(fp)
  8057d8:	1004c03a 	cmpne	r2,r2,zero
  8057dc:	103fbd1e 	bne	r2,zero,8056d4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8057e0:	0005303a 	rdctl	r2,status
  8057e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8057e8:	e0fff517 	ldw	r3,-44(fp)
  8057ec:	00bfff84 	movi	r2,-2
  8057f0:	1884703a 	and	r2,r3,r2
  8057f4:	1001703a 	wrctl	status,r2
  
  return context;
  8057f8:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8057fc:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805800:	e0bffc17 	ldw	r2,-16(fp)
  805804:	10800117 	ldw	r2,4(r2)
  805808:	10c11014 	ori	r3,r2,1088
  80580c:	e0bffc17 	ldw	r2,-16(fp)
  805810:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805814:	e0bffc17 	ldw	r2,-16(fp)
  805818:	10800017 	ldw	r2,0(r2)
  80581c:	11000304 	addi	r4,r2,12
  805820:	e0bffc17 	ldw	r2,-16(fp)
  805824:	10800117 	ldw	r2,4(r2)
  805828:	1007883a 	mov	r3,r2
  80582c:	2005883a 	mov	r2,r4
  805830:	10c00035 	stwio	r3,0(r2)
  805834:	e0bffb17 	ldw	r2,-20(fp)
  805838:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80583c:	e0bff417 	ldw	r2,-48(fp)
  805840:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  805844:	e0fffe17 	ldw	r3,-8(fp)
  805848:	e0bff817 	ldw	r2,-32(fp)
  80584c:	1885c83a 	sub	r2,r3,r2
}
  805850:	e037883a 	mov	sp,fp
  805854:	dfc00117 	ldw	ra,4(sp)
  805858:	df000017 	ldw	fp,0(sp)
  80585c:	dec00204 	addi	sp,sp,8
  805860:	f800283a 	ret

00805864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805864:	defffd04 	addi	sp,sp,-12
  805868:	dfc00215 	stw	ra,8(sp)
  80586c:	df000115 	stw	fp,4(sp)
  805870:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805874:	00802074 	movhi	r2,129
  805878:	10a2b904 	addi	r2,r2,-29980
  80587c:	10800017 	ldw	r2,0(r2)
  805880:	1005003a 	cmpeq	r2,r2,zero
  805884:	1000061e 	bne	r2,zero,8058a0 <alt_get_errno+0x3c>
  805888:	00802074 	movhi	r2,129
  80588c:	10a2b904 	addi	r2,r2,-29980
  805890:	10800017 	ldw	r2,0(r2)
  805894:	103ee83a 	callr	r2
  805898:	e0bfff15 	stw	r2,-4(fp)
  80589c:	00000306 	br	8058ac <alt_get_errno+0x48>
  8058a0:	00802074 	movhi	r2,129
  8058a4:	10a98904 	addi	r2,r2,-23004
  8058a8:	e0bfff15 	stw	r2,-4(fp)
  8058ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8058b0:	e037883a 	mov	sp,fp
  8058b4:	dfc00117 	ldw	ra,4(sp)
  8058b8:	df000017 	ldw	fp,0(sp)
  8058bc:	dec00204 	addi	sp,sp,8
  8058c0:	f800283a 	ret

008058c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8058c4:	defff404 	addi	sp,sp,-48
  8058c8:	df000b15 	stw	fp,44(sp)
  8058cc:	df000b04 	addi	fp,sp,44
  8058d0:	e13ffb15 	stw	r4,-20(fp)
  8058d4:	e17ffc15 	stw	r5,-16(fp)
  8058d8:	e1bffd15 	stw	r6,-12(fp)
  8058dc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8058e0:	e03ff915 	stw	zero,-28(fp)
  8058e4:	00802074 	movhi	r2,129
  8058e8:	10a98e04 	addi	r2,r2,-22984
  8058ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8058f0:	1005003a 	cmpeq	r2,r2,zero
  8058f4:	1000411e 	bne	r2,zero,8059fc <alt_alarm_start+0x138>
  {
    if (alarm)
  8058f8:	e0bffb17 	ldw	r2,-20(fp)
  8058fc:	1005003a 	cmpeq	r2,r2,zero
  805900:	10003b1e 	bne	r2,zero,8059f0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  805904:	e0fffb17 	ldw	r3,-20(fp)
  805908:	e0bffd17 	ldw	r2,-12(fp)
  80590c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  805910:	e0fffb17 	ldw	r3,-20(fp)
  805914:	e0bffe17 	ldw	r2,-8(fp)
  805918:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80591c:	0005303a 	rdctl	r2,status
  805920:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805924:	e0fff817 	ldw	r3,-32(fp)
  805928:	00bfff84 	movi	r2,-2
  80592c:	1884703a 	and	r2,r3,r2
  805930:	1001703a 	wrctl	status,r2
  
  return context;
  805934:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  805938:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80593c:	00802074 	movhi	r2,129
  805940:	10a98f04 	addi	r2,r2,-22980
  805944:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  805948:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80594c:	e0fffc17 	ldw	r3,-16(fp)
  805950:	e0bff917 	ldw	r2,-28(fp)
  805954:	1885883a 	add	r2,r3,r2
  805958:	10c00044 	addi	r3,r2,1
  80595c:	e0bffb17 	ldw	r2,-20(fp)
  805960:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  805964:	e0bffb17 	ldw	r2,-20(fp)
  805968:	10c00217 	ldw	r3,8(r2)
  80596c:	e0bff917 	ldw	r2,-28(fp)
  805970:	1880042e 	bgeu	r3,r2,805984 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  805974:	e0fffb17 	ldw	r3,-20(fp)
  805978:	00800044 	movi	r2,1
  80597c:	18800405 	stb	r2,16(r3)
  805980:	00000206 	br	80598c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  805984:	e0bffb17 	ldw	r2,-20(fp)
  805988:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80598c:	e0fffb17 	ldw	r3,-20(fp)
  805990:	00802074 	movhi	r2,129
  805994:	10a2bc04 	addi	r2,r2,-29968
  805998:	e0bff615 	stw	r2,-40(fp)
  80599c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8059a0:	e0fff717 	ldw	r3,-36(fp)
  8059a4:	e0bff617 	ldw	r2,-40(fp)
  8059a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8059ac:	e0bff617 	ldw	r2,-40(fp)
  8059b0:	10c00017 	ldw	r3,0(r2)
  8059b4:	e0bff717 	ldw	r2,-36(fp)
  8059b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8059bc:	e0bff617 	ldw	r2,-40(fp)
  8059c0:	10c00017 	ldw	r3,0(r2)
  8059c4:	e0bff717 	ldw	r2,-36(fp)
  8059c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8059cc:	e0fff617 	ldw	r3,-40(fp)
  8059d0:	e0bff717 	ldw	r2,-36(fp)
  8059d4:	18800015 	stw	r2,0(r3)
  8059d8:	e0bffa17 	ldw	r2,-24(fp)
  8059dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8059e0:	e0bff517 	ldw	r2,-44(fp)
  8059e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8059e8:	e03fff15 	stw	zero,-4(fp)
  8059ec:	00000506 	br	805a04 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8059f0:	00bffa84 	movi	r2,-22
  8059f4:	e0bfff15 	stw	r2,-4(fp)
  8059f8:	00000206 	br	805a04 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8059fc:	00bfde84 	movi	r2,-134
  805a00:	e0bfff15 	stw	r2,-4(fp)
  805a04:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  805a08:	e037883a 	mov	sp,fp
  805a0c:	df000017 	ldw	fp,0(sp)
  805a10:	dec00104 	addi	sp,sp,4
  805a14:	f800283a 	ret

00805a18 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  805a18:	defffa04 	addi	sp,sp,-24
  805a1c:	dfc00515 	stw	ra,20(sp)
  805a20:	df000415 	stw	fp,16(sp)
  805a24:	df000404 	addi	fp,sp,16
  805a28:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  805a2c:	008000c4 	movi	r2,3
  805a30:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  805a34:	e0fffc17 	ldw	r3,-16(fp)
  805a38:	008003f4 	movhi	r2,15
  805a3c:	10909004 	addi	r2,r2,16960
  805a40:	188b383a 	mul	r5,r3,r2
  805a44:	01017db4 	movhi	r4,1526
  805a48:	21384004 	addi	r4,r4,-7936
  805a4c:	0806e240 	call	806e24 <__udivsi3>
  805a50:	100b883a 	mov	r5,r2
  805a54:	01200034 	movhi	r4,32768
  805a58:	213fffc4 	addi	r4,r4,-1
  805a5c:	0806e240 	call	806e24 <__udivsi3>
  805a60:	100b883a 	mov	r5,r2
  805a64:	e13fff17 	ldw	r4,-4(fp)
  805a68:	0806e240 	call	806e24 <__udivsi3>
  805a6c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  805a70:	e0bffd17 	ldw	r2,-12(fp)
  805a74:	1005003a 	cmpeq	r2,r2,zero
  805a78:	1000281e 	bne	r2,zero,805b1c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  805a7c:	e03ffe15 	stw	zero,-8(fp)
  805a80:	00001606 	br	805adc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  805a84:	00a00034 	movhi	r2,32768
  805a88:	10bfffc4 	addi	r2,r2,-1
  805a8c:	10bfffc4 	addi	r2,r2,-1
  805a90:	103ffe1e 	bne	r2,zero,805a8c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  805a94:	e0fffc17 	ldw	r3,-16(fp)
  805a98:	008003f4 	movhi	r2,15
  805a9c:	10909004 	addi	r2,r2,16960
  805aa0:	188b383a 	mul	r5,r3,r2
  805aa4:	01017db4 	movhi	r4,1526
  805aa8:	21384004 	addi	r4,r4,-7936
  805aac:	0806e240 	call	806e24 <__udivsi3>
  805ab0:	100b883a 	mov	r5,r2
  805ab4:	01200034 	movhi	r4,32768
  805ab8:	213fffc4 	addi	r4,r4,-1
  805abc:	0806e240 	call	806e24 <__udivsi3>
  805ac0:	1007883a 	mov	r3,r2
  805ac4:	e0bfff17 	ldw	r2,-4(fp)
  805ac8:	10c5c83a 	sub	r2,r2,r3
  805acc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  805ad0:	e0bffe17 	ldw	r2,-8(fp)
  805ad4:	10800044 	addi	r2,r2,1
  805ad8:	e0bffe15 	stw	r2,-8(fp)
  805adc:	e0fffe17 	ldw	r3,-8(fp)
  805ae0:	e0bffd17 	ldw	r2,-12(fp)
  805ae4:	18bfe716 	blt	r3,r2,805a84 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805ae8:	e0fffc17 	ldw	r3,-16(fp)
  805aec:	008003f4 	movhi	r2,15
  805af0:	10909004 	addi	r2,r2,16960
  805af4:	188b383a 	mul	r5,r3,r2
  805af8:	01017db4 	movhi	r4,1526
  805afc:	21384004 	addi	r4,r4,-7936
  805b00:	0806e240 	call	806e24 <__udivsi3>
  805b04:	1007883a 	mov	r3,r2
  805b08:	e0bfff17 	ldw	r2,-4(fp)
  805b0c:	1885383a 	mul	r2,r3,r2
  805b10:	10bfffc4 	addi	r2,r2,-1
  805b14:	103ffe1e 	bne	r2,zero,805b10 <alt_busy_sleep+0xf8>
  805b18:	00000c06 	br	805b4c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805b1c:	e0fffc17 	ldw	r3,-16(fp)
  805b20:	008003f4 	movhi	r2,15
  805b24:	10909004 	addi	r2,r2,16960
  805b28:	188b383a 	mul	r5,r3,r2
  805b2c:	01017db4 	movhi	r4,1526
  805b30:	21384004 	addi	r4,r4,-7936
  805b34:	0806e240 	call	806e24 <__udivsi3>
  805b38:	1007883a 	mov	r3,r2
  805b3c:	e0bfff17 	ldw	r2,-4(fp)
  805b40:	1885383a 	mul	r2,r3,r2
  805b44:	10bfffc4 	addi	r2,r2,-1
  805b48:	00bffe16 	blt	zero,r2,805b44 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  805b4c:	0005883a 	mov	r2,zero
}
  805b50:	e037883a 	mov	sp,fp
  805b54:	dfc00117 	ldw	ra,4(sp)
  805b58:	df000017 	ldw	fp,0(sp)
  805b5c:	dec00204 	addi	sp,sp,8
  805b60:	f800283a 	ret

00805b64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805b64:	defffe04 	addi	sp,sp,-8
  805b68:	df000115 	stw	fp,4(sp)
  805b6c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805b70:	e03fff15 	stw	zero,-4(fp)
  805b74:	00000506 	br	805b8c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  805b78:	e0bfff17 	ldw	r2,-4(fp)
  805b7c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805b80:	e0bfff17 	ldw	r2,-4(fp)
  805b84:	10800804 	addi	r2,r2,32
  805b88:	e0bfff15 	stw	r2,-4(fp)
  805b8c:	e0bfff17 	ldw	r2,-4(fp)
  805b90:	10820030 	cmpltui	r2,r2,2048
  805b94:	103ff81e 	bne	r2,zero,805b78 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  805b98:	e037883a 	mov	sp,fp
  805b9c:	df000017 	ldw	fp,0(sp)
  805ba0:	dec00104 	addi	sp,sp,4
  805ba4:	f800283a 	ret

00805ba8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805ba8:	defff904 	addi	sp,sp,-28
  805bac:	dfc00615 	stw	ra,24(sp)
  805bb0:	df000515 	stw	fp,20(sp)
  805bb4:	df000504 	addi	fp,sp,20
  805bb8:	e13ffd15 	stw	r4,-12(fp)
  805bbc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805bc0:	e0bffd17 	ldw	r2,-12(fp)
  805bc4:	1005003a 	cmpeq	r2,r2,zero
  805bc8:	1000041e 	bne	r2,zero,805bdc <alt_dev_llist_insert+0x34>
  805bcc:	e0bffd17 	ldw	r2,-12(fp)
  805bd0:	10800217 	ldw	r2,8(r2)
  805bd4:	1004c03a 	cmpne	r2,r2,zero
  805bd8:	1000071e 	bne	r2,zero,805bf8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  805bdc:	0805c5c0 	call	805c5c <alt_get_errno>
  805be0:	1007883a 	mov	r3,r2
  805be4:	00800584 	movi	r2,22
  805be8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  805bec:	00bffa84 	movi	r2,-22
  805bf0:	e0bfff15 	stw	r2,-4(fp)
  805bf4:	00001306 	br	805c44 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805bf8:	e0fffd17 	ldw	r3,-12(fp)
  805bfc:	e0bffe17 	ldw	r2,-8(fp)
  805c00:	e0bffb15 	stw	r2,-20(fp)
  805c04:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805c08:	e0fffc17 	ldw	r3,-16(fp)
  805c0c:	e0bffb17 	ldw	r2,-20(fp)
  805c10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  805c14:	e0bffb17 	ldw	r2,-20(fp)
  805c18:	10c00017 	ldw	r3,0(r2)
  805c1c:	e0bffc17 	ldw	r2,-16(fp)
  805c20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805c24:	e0bffb17 	ldw	r2,-20(fp)
  805c28:	10c00017 	ldw	r3,0(r2)
  805c2c:	e0bffc17 	ldw	r2,-16(fp)
  805c30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  805c34:	e0fffb17 	ldw	r3,-20(fp)
  805c38:	e0bffc17 	ldw	r2,-16(fp)
  805c3c:	18800015 	stw	r2,0(r3)

  return 0;  
  805c40:	e03fff15 	stw	zero,-4(fp)
  805c44:	e0bfff17 	ldw	r2,-4(fp)
}
  805c48:	e037883a 	mov	sp,fp
  805c4c:	dfc00117 	ldw	ra,4(sp)
  805c50:	df000017 	ldw	fp,0(sp)
  805c54:	dec00204 	addi	sp,sp,8
  805c58:	f800283a 	ret

00805c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805c5c:	defffd04 	addi	sp,sp,-12
  805c60:	dfc00215 	stw	ra,8(sp)
  805c64:	df000115 	stw	fp,4(sp)
  805c68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805c6c:	00802074 	movhi	r2,129
  805c70:	10a2b904 	addi	r2,r2,-29980
  805c74:	10800017 	ldw	r2,0(r2)
  805c78:	1005003a 	cmpeq	r2,r2,zero
  805c7c:	1000061e 	bne	r2,zero,805c98 <alt_get_errno+0x3c>
  805c80:	00802074 	movhi	r2,129
  805c84:	10a2b904 	addi	r2,r2,-29980
  805c88:	10800017 	ldw	r2,0(r2)
  805c8c:	103ee83a 	callr	r2
  805c90:	e0bfff15 	stw	r2,-4(fp)
  805c94:	00000306 	br	805ca4 <alt_get_errno+0x48>
  805c98:	00802074 	movhi	r2,129
  805c9c:	10a98904 	addi	r2,r2,-23004
  805ca0:	e0bfff15 	stw	r2,-4(fp)
  805ca4:	e0bfff17 	ldw	r2,-4(fp)
}
  805ca8:	e037883a 	mov	sp,fp
  805cac:	dfc00117 	ldw	ra,4(sp)
  805cb0:	df000017 	ldw	fp,0(sp)
  805cb4:	dec00204 	addi	sp,sp,8
  805cb8:	f800283a 	ret

00805cbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  805cbc:	defffd04 	addi	sp,sp,-12
  805cc0:	dfc00215 	stw	ra,8(sp)
  805cc4:	df000115 	stw	fp,4(sp)
  805cc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805ccc:	00bfff04 	movi	r2,-4
  805cd0:	00c02034 	movhi	r3,128
  805cd4:	18dba604 	addi	r3,r3,28312
  805cd8:	1885883a 	add	r2,r3,r2
  805cdc:	e0bfff15 	stw	r2,-4(fp)
  805ce0:	00000606 	br	805cfc <_do_ctors+0x40>
        (*ctor) (); 
  805ce4:	e0bfff17 	ldw	r2,-4(fp)
  805ce8:	10800017 	ldw	r2,0(r2)
  805cec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805cf0:	e0bfff17 	ldw	r2,-4(fp)
  805cf4:	10bfff04 	addi	r2,r2,-4
  805cf8:	e0bfff15 	stw	r2,-4(fp)
  805cfc:	e0ffff17 	ldw	r3,-4(fp)
  805d00:	00802034 	movhi	r2,128
  805d04:	109ba504 	addi	r2,r2,28308
  805d08:	18bff62e 	bgeu	r3,r2,805ce4 <_do_ctors+0x28>
        (*ctor) (); 
}
  805d0c:	e037883a 	mov	sp,fp
  805d10:	dfc00117 	ldw	ra,4(sp)
  805d14:	df000017 	ldw	fp,0(sp)
  805d18:	dec00204 	addi	sp,sp,8
  805d1c:	f800283a 	ret

00805d20 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  805d20:	defffd04 	addi	sp,sp,-12
  805d24:	dfc00215 	stw	ra,8(sp)
  805d28:	df000115 	stw	fp,4(sp)
  805d2c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805d30:	00bfff04 	movi	r2,-4
  805d34:	00c02034 	movhi	r3,128
  805d38:	18dba604 	addi	r3,r3,28312
  805d3c:	1885883a 	add	r2,r3,r2
  805d40:	e0bfff15 	stw	r2,-4(fp)
  805d44:	00000606 	br	805d60 <_do_dtors+0x40>
        (*dtor) (); 
  805d48:	e0bfff17 	ldw	r2,-4(fp)
  805d4c:	10800017 	ldw	r2,0(r2)
  805d50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805d54:	e0bfff17 	ldw	r2,-4(fp)
  805d58:	10bfff04 	addi	r2,r2,-4
  805d5c:	e0bfff15 	stw	r2,-4(fp)
  805d60:	e0ffff17 	ldw	r3,-4(fp)
  805d64:	00802034 	movhi	r2,128
  805d68:	109ba604 	addi	r2,r2,28312
  805d6c:	18bff62e 	bgeu	r3,r2,805d48 <_do_dtors+0x28>
        (*dtor) (); 
}
  805d70:	e037883a 	mov	sp,fp
  805d74:	dfc00117 	ldw	ra,4(sp)
  805d78:	df000017 	ldw	fp,0(sp)
  805d7c:	dec00204 	addi	sp,sp,8
  805d80:	f800283a 	ret

00805d84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805d84:	defffe04 	addi	sp,sp,-8
  805d88:	dfc00115 	stw	ra,4(sp)
  805d8c:	df000015 	stw	fp,0(sp)
  805d90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  805d94:	0009883a 	mov	r4,zero
  805d98:	01440004 	movi	r5,4096
  805d9c:	08068b00 	call	8068b0 <alt_icache_flush>
#endif
}
  805da0:	e037883a 	mov	sp,fp
  805da4:	dfc00117 	ldw	ra,4(sp)
  805da8:	df000017 	ldw	fp,0(sp)
  805dac:	dec00204 	addi	sp,sp,8
  805db0:	f800283a 	ret

00805db4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805db4:	defff904 	addi	sp,sp,-28
  805db8:	dfc00615 	stw	ra,24(sp)
  805dbc:	df000515 	stw	fp,20(sp)
  805dc0:	df000504 	addi	fp,sp,20
  805dc4:	e13ffc15 	stw	r4,-16(fp)
  805dc8:	e17ffd15 	stw	r5,-12(fp)
  805dcc:	e1bffe15 	stw	r6,-8(fp)
  805dd0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  805dd4:	e0800217 	ldw	r2,8(fp)
  805dd8:	d8800015 	stw	r2,0(sp)
  805ddc:	e13ffc17 	ldw	r4,-16(fp)
  805de0:	e17ffd17 	ldw	r5,-12(fp)
  805de4:	e1bffe17 	ldw	r6,-8(fp)
  805de8:	e1ffff17 	ldw	r7,-4(fp)
  805dec:	0805f880 	call	805f88 <alt_iic_isr_register>
}  
  805df0:	e037883a 	mov	sp,fp
  805df4:	dfc00117 	ldw	ra,4(sp)
  805df8:	df000017 	ldw	fp,0(sp)
  805dfc:	dec00204 	addi	sp,sp,8
  805e00:	f800283a 	ret

00805e04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805e04:	defff904 	addi	sp,sp,-28
  805e08:	df000615 	stw	fp,24(sp)
  805e0c:	df000604 	addi	fp,sp,24
  805e10:	e13ffe15 	stw	r4,-8(fp)
  805e14:	e17fff15 	stw	r5,-4(fp)
  805e18:	e0bfff17 	ldw	r2,-4(fp)
  805e1c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e20:	0005303a 	rdctl	r2,status
  805e24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e28:	e0fffb17 	ldw	r3,-20(fp)
  805e2c:	00bfff84 	movi	r2,-2
  805e30:	1884703a 	and	r2,r3,r2
  805e34:	1001703a 	wrctl	status,r2
  
  return context;
  805e38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805e3c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  805e40:	e0fffc17 	ldw	r3,-16(fp)
  805e44:	00800044 	movi	r2,1
  805e48:	10c4983a 	sll	r2,r2,r3
  805e4c:	1007883a 	mov	r3,r2
  805e50:	00802074 	movhi	r2,129
  805e54:	10a98a04 	addi	r2,r2,-23000
  805e58:	10800017 	ldw	r2,0(r2)
  805e5c:	1886b03a 	or	r3,r3,r2
  805e60:	00802074 	movhi	r2,129
  805e64:	10a98a04 	addi	r2,r2,-23000
  805e68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805e6c:	00802074 	movhi	r2,129
  805e70:	10a98a04 	addi	r2,r2,-23000
  805e74:	10800017 	ldw	r2,0(r2)
  805e78:	100170fa 	wrctl	ienable,r2
  805e7c:	e0bffd17 	ldw	r2,-12(fp)
  805e80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e84:	e0bffa17 	ldw	r2,-24(fp)
  805e88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805e8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  805e90:	e037883a 	mov	sp,fp
  805e94:	df000017 	ldw	fp,0(sp)
  805e98:	dec00104 	addi	sp,sp,4
  805e9c:	f800283a 	ret

00805ea0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  805ea0:	defff904 	addi	sp,sp,-28
  805ea4:	df000615 	stw	fp,24(sp)
  805ea8:	df000604 	addi	fp,sp,24
  805eac:	e13ffe15 	stw	r4,-8(fp)
  805eb0:	e17fff15 	stw	r5,-4(fp)
  805eb4:	e0bfff17 	ldw	r2,-4(fp)
  805eb8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ebc:	0005303a 	rdctl	r2,status
  805ec0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ec4:	e0fffb17 	ldw	r3,-20(fp)
  805ec8:	00bfff84 	movi	r2,-2
  805ecc:	1884703a 	and	r2,r3,r2
  805ed0:	1001703a 	wrctl	status,r2
  
  return context;
  805ed4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805ed8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  805edc:	e0fffc17 	ldw	r3,-16(fp)
  805ee0:	00800044 	movi	r2,1
  805ee4:	10c4983a 	sll	r2,r2,r3
  805ee8:	0084303a 	nor	r2,zero,r2
  805eec:	1007883a 	mov	r3,r2
  805ef0:	00802074 	movhi	r2,129
  805ef4:	10a98a04 	addi	r2,r2,-23000
  805ef8:	10800017 	ldw	r2,0(r2)
  805efc:	1886703a 	and	r3,r3,r2
  805f00:	00802074 	movhi	r2,129
  805f04:	10a98a04 	addi	r2,r2,-23000
  805f08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805f0c:	00802074 	movhi	r2,129
  805f10:	10a98a04 	addi	r2,r2,-23000
  805f14:	10800017 	ldw	r2,0(r2)
  805f18:	100170fa 	wrctl	ienable,r2
  805f1c:	e0bffd17 	ldw	r2,-12(fp)
  805f20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f24:	e0bffa17 	ldw	r2,-24(fp)
  805f28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805f2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  805f30:	e037883a 	mov	sp,fp
  805f34:	df000017 	ldw	fp,0(sp)
  805f38:	dec00104 	addi	sp,sp,4
  805f3c:	f800283a 	ret

00805f40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805f40:	defffc04 	addi	sp,sp,-16
  805f44:	df000315 	stw	fp,12(sp)
  805f48:	df000304 	addi	fp,sp,12
  805f4c:	e13ffe15 	stw	r4,-8(fp)
  805f50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805f54:	000530fa 	rdctl	r2,ienable
  805f58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805f5c:	e0ffff17 	ldw	r3,-4(fp)
  805f60:	00800044 	movi	r2,1
  805f64:	10c4983a 	sll	r2,r2,r3
  805f68:	1007883a 	mov	r3,r2
  805f6c:	e0bffd17 	ldw	r2,-12(fp)
  805f70:	1884703a 	and	r2,r3,r2
  805f74:	1004c03a 	cmpne	r2,r2,zero
}
  805f78:	e037883a 	mov	sp,fp
  805f7c:	df000017 	ldw	fp,0(sp)
  805f80:	dec00104 	addi	sp,sp,4
  805f84:	f800283a 	ret

00805f88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805f88:	defff404 	addi	sp,sp,-48
  805f8c:	dfc00b15 	stw	ra,44(sp)
  805f90:	df000a15 	stw	fp,40(sp)
  805f94:	df000a04 	addi	fp,sp,40
  805f98:	e13ffb15 	stw	r4,-20(fp)
  805f9c:	e17ffc15 	stw	r5,-16(fp)
  805fa0:	e1bffd15 	stw	r6,-12(fp)
  805fa4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  805fa8:	00bffa84 	movi	r2,-22
  805fac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  805fb0:	e0bffc17 	ldw	r2,-16(fp)
  805fb4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  805fb8:	e0bff917 	ldw	r2,-28(fp)
  805fbc:	10800808 	cmpgei	r2,r2,32
  805fc0:	1000291e 	bne	r2,zero,806068 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805fc4:	0005303a 	rdctl	r2,status
  805fc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805fcc:	e0fff717 	ldw	r3,-36(fp)
  805fd0:	00bfff84 	movi	r2,-2
  805fd4:	1884703a 	and	r2,r3,r2
  805fd8:	1001703a 	wrctl	status,r2
  
  return context;
  805fdc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805fe0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  805fe4:	e0bff917 	ldw	r2,-28(fp)
  805fe8:	00c02074 	movhi	r3,129
  805fec:	18e99a04 	addi	r3,r3,-22936
  805ff0:	100490fa 	slli	r2,r2,3
  805ff4:	10c7883a 	add	r3,r2,r3
  805ff8:	e0bffd17 	ldw	r2,-12(fp)
  805ffc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  806000:	e0bff917 	ldw	r2,-28(fp)
  806004:	00c02074 	movhi	r3,129
  806008:	18e99a04 	addi	r3,r3,-22936
  80600c:	100490fa 	slli	r2,r2,3
  806010:	10c5883a 	add	r2,r2,r3
  806014:	10c00104 	addi	r3,r2,4
  806018:	e0bffe17 	ldw	r2,-8(fp)
  80601c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  806020:	e0bffd17 	ldw	r2,-12(fp)
  806024:	1005003a 	cmpeq	r2,r2,zero
  806028:	1000051e 	bne	r2,zero,806040 <alt_iic_isr_register+0xb8>
  80602c:	e17ff917 	ldw	r5,-28(fp)
  806030:	e13ffb17 	ldw	r4,-20(fp)
  806034:	0805e040 	call	805e04 <alt_ic_irq_enable>
  806038:	e0bfff15 	stw	r2,-4(fp)
  80603c:	00000406 	br	806050 <alt_iic_isr_register+0xc8>
  806040:	e17ff917 	ldw	r5,-28(fp)
  806044:	e13ffb17 	ldw	r4,-20(fp)
  806048:	0805ea00 	call	805ea0 <alt_ic_irq_disable>
  80604c:	e0bfff15 	stw	r2,-4(fp)
  806050:	e0bfff17 	ldw	r2,-4(fp)
  806054:	e0bffa15 	stw	r2,-24(fp)
  806058:	e0bff817 	ldw	r2,-32(fp)
  80605c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806060:	e0bff617 	ldw	r2,-40(fp)
  806064:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  806068:	e0bffa17 	ldw	r2,-24(fp)
}
  80606c:	e037883a 	mov	sp,fp
  806070:	dfc00117 	ldw	ra,4(sp)
  806074:	df000017 	ldw	fp,0(sp)
  806078:	dec00204 	addi	sp,sp,8
  80607c:	f800283a 	ret

00806080 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  806080:	defff904 	addi	sp,sp,-28
  806084:	dfc00615 	stw	ra,24(sp)
  806088:	df000515 	stw	fp,20(sp)
  80608c:	df000504 	addi	fp,sp,20
  806090:	e13ffc15 	stw	r4,-16(fp)
  806094:	e17ffd15 	stw	r5,-12(fp)
  806098:	e1bffe15 	stw	r6,-8(fp)
  80609c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8060a0:	e13ffd17 	ldw	r4,-12(fp)
  8060a4:	e17ffe17 	ldw	r5,-8(fp)
  8060a8:	e1bfff17 	ldw	r6,-4(fp)
  8060ac:	08062980 	call	806298 <open>
  8060b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8060b4:	e0bffb17 	ldw	r2,-20(fp)
  8060b8:	1004803a 	cmplt	r2,r2,zero
  8060bc:	10001c1e 	bne	r2,zero,806130 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8060c0:	e0bffb17 	ldw	r2,-20(fp)
  8060c4:	00c02034 	movhi	r3,128
  8060c8:	18de0704 	addi	r3,r3,30748
  8060cc:	10800324 	muli	r2,r2,12
  8060d0:	10c5883a 	add	r2,r2,r3
  8060d4:	10c00017 	ldw	r3,0(r2)
  8060d8:	e0bffc17 	ldw	r2,-16(fp)
  8060dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8060e0:	e0bffb17 	ldw	r2,-20(fp)
  8060e4:	00c02034 	movhi	r3,128
  8060e8:	18de0704 	addi	r3,r3,30748
  8060ec:	10800324 	muli	r2,r2,12
  8060f0:	10c5883a 	add	r2,r2,r3
  8060f4:	10800104 	addi	r2,r2,4
  8060f8:	10c00017 	ldw	r3,0(r2)
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  806104:	e0bffb17 	ldw	r2,-20(fp)
  806108:	00c02034 	movhi	r3,128
  80610c:	18de0704 	addi	r3,r3,30748
  806110:	10800324 	muli	r2,r2,12
  806114:	10c5883a 	add	r2,r2,r3
  806118:	10800204 	addi	r2,r2,8
  80611c:	10c00017 	ldw	r3,0(r2)
  806120:	e0bffc17 	ldw	r2,-16(fp)
  806124:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  806128:	e13ffb17 	ldw	r4,-20(fp)
  80612c:	08040cc0 	call	8040cc <alt_release_fd>
  }
} 
  806130:	e037883a 	mov	sp,fp
  806134:	dfc00117 	ldw	ra,4(sp)
  806138:	df000017 	ldw	fp,0(sp)
  80613c:	dec00204 	addi	sp,sp,8
  806140:	f800283a 	ret

00806144 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  806144:	defffb04 	addi	sp,sp,-20
  806148:	dfc00415 	stw	ra,16(sp)
  80614c:	df000315 	stw	fp,12(sp)
  806150:	df000304 	addi	fp,sp,12
  806154:	e13ffd15 	stw	r4,-12(fp)
  806158:	e17ffe15 	stw	r5,-8(fp)
  80615c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  806160:	01002034 	movhi	r4,128
  806164:	211e0a04 	addi	r4,r4,30760
  806168:	e17ffd17 	ldw	r5,-12(fp)
  80616c:	01800044 	movi	r6,1
  806170:	01c07fc4 	movi	r7,511
  806174:	08060800 	call	806080 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  806178:	01002034 	movhi	r4,128
  80617c:	211e0704 	addi	r4,r4,30748
  806180:	e17ffe17 	ldw	r5,-8(fp)
  806184:	000d883a 	mov	r6,zero
  806188:	01c07fc4 	movi	r7,511
  80618c:	08060800 	call	806080 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  806190:	01002034 	movhi	r4,128
  806194:	211e0d04 	addi	r4,r4,30772
  806198:	e17fff17 	ldw	r5,-4(fp)
  80619c:	01800044 	movi	r6,1
  8061a0:	01c07fc4 	movi	r7,511
  8061a4:	08060800 	call	806080 <alt_open_fd>
}  
  8061a8:	e037883a 	mov	sp,fp
  8061ac:	dfc00117 	ldw	ra,4(sp)
  8061b0:	df000017 	ldw	fp,0(sp)
  8061b4:	dec00204 	addi	sp,sp,8
  8061b8:	f800283a 	ret

008061bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8061bc:	defffc04 	addi	sp,sp,-16
  8061c0:	df000315 	stw	fp,12(sp)
  8061c4:	df000304 	addi	fp,sp,12
  8061c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8061cc:	e0bffe17 	ldw	r2,-8(fp)
  8061d0:	10800217 	ldw	r2,8(r2)
  8061d4:	10d00034 	orhi	r3,r2,16384
  8061d8:	e0bffe17 	ldw	r2,-8(fp)
  8061dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8061e0:	e03ffd15 	stw	zero,-12(fp)
  8061e4:	00002006 	br	806268 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8061e8:	e0bffd17 	ldw	r2,-12(fp)
  8061ec:	00c02034 	movhi	r3,128
  8061f0:	18de0704 	addi	r3,r3,30748
  8061f4:	10800324 	muli	r2,r2,12
  8061f8:	10c5883a 	add	r2,r2,r3
  8061fc:	10c00017 	ldw	r3,0(r2)
  806200:	e0bffe17 	ldw	r2,-8(fp)
  806204:	10800017 	ldw	r2,0(r2)
  806208:	1880141e 	bne	r3,r2,80625c <alt_file_locked+0xa0>
  80620c:	e0bffd17 	ldw	r2,-12(fp)
  806210:	00c02034 	movhi	r3,128
  806214:	18de0704 	addi	r3,r3,30748
  806218:	10800324 	muli	r2,r2,12
  80621c:	10c5883a 	add	r2,r2,r3
  806220:	10800204 	addi	r2,r2,8
  806224:	10800017 	ldw	r2,0(r2)
  806228:	1004403a 	cmpge	r2,r2,zero
  80622c:	10000b1e 	bne	r2,zero,80625c <alt_file_locked+0xa0>
  806230:	e0bffd17 	ldw	r2,-12(fp)
  806234:	10800324 	muli	r2,r2,12
  806238:	1007883a 	mov	r3,r2
  80623c:	00802034 	movhi	r2,128
  806240:	109e0704 	addi	r2,r2,30748
  806244:	1887883a 	add	r3,r3,r2
  806248:	e0bffe17 	ldw	r2,-8(fp)
  80624c:	18800326 	beq	r3,r2,80625c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  806250:	00bffcc4 	movi	r2,-13
  806254:	e0bfff15 	stw	r2,-4(fp)
  806258:	00000a06 	br	806284 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80625c:	e0bffd17 	ldw	r2,-12(fp)
  806260:	10800044 	addi	r2,r2,1
  806264:	e0bffd15 	stw	r2,-12(fp)
  806268:	00802074 	movhi	r2,129
  80626c:	10a2b804 	addi	r2,r2,-29984
  806270:	10800017 	ldw	r2,0(r2)
  806274:	1007883a 	mov	r3,r2
  806278:	e0bffd17 	ldw	r2,-12(fp)
  80627c:	18bfda2e 	bgeu	r3,r2,8061e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  806280:	e03fff15 	stw	zero,-4(fp)
  806284:	e0bfff17 	ldw	r2,-4(fp)
}
  806288:	e037883a 	mov	sp,fp
  80628c:	df000017 	ldw	fp,0(sp)
  806290:	dec00104 	addi	sp,sp,4
  806294:	f800283a 	ret

00806298 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  806298:	defff404 	addi	sp,sp,-48
  80629c:	dfc00b15 	stw	ra,44(sp)
  8062a0:	df000a15 	stw	fp,40(sp)
  8062a4:	df000a04 	addi	fp,sp,40
  8062a8:	e13ffb15 	stw	r4,-20(fp)
  8062ac:	e17ffc15 	stw	r5,-16(fp)
  8062b0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8062b4:	00bfffc4 	movi	r2,-1
  8062b8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8062bc:	00bffb44 	movi	r2,-19
  8062c0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8062c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8062c8:	e13ffb17 	ldw	r4,-20(fp)
  8062cc:	01402074 	movhi	r5,129
  8062d0:	2962b604 	addi	r5,r5,-29992
  8062d4:	08066440 	call	806644 <alt_find_dev>
  8062d8:	e0bffa15 	stw	r2,-24(fp)
  8062dc:	e0bffa17 	ldw	r2,-24(fp)
  8062e0:	1004c03a 	cmpne	r2,r2,zero
  8062e4:	1000051e 	bne	r2,zero,8062fc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8062e8:	e13ffb17 	ldw	r4,-20(fp)
  8062ec:	08066d80 	call	8066d8 <alt_find_file>
  8062f0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8062f4:	00800044 	movi	r2,1
  8062f8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8062fc:	e0bffa17 	ldw	r2,-24(fp)
  806300:	1005003a 	cmpeq	r2,r2,zero
  806304:	1000301e 	bne	r2,zero,8063c8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  806308:	e13ffa17 	ldw	r4,-24(fp)
  80630c:	08067f80 	call	8067f8 <alt_get_fd>
  806310:	e0bff815 	stw	r2,-32(fp)
  806314:	e0bff817 	ldw	r2,-32(fp)
  806318:	1004403a 	cmpge	r2,r2,zero
  80631c:	1000031e 	bne	r2,zero,80632c <open+0x94>
    {
      status = index;
  806320:	e0bff817 	ldw	r2,-32(fp)
  806324:	e0bff715 	stw	r2,-36(fp)
  806328:	00002906 	br	8063d0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80632c:	e0bff817 	ldw	r2,-32(fp)
  806330:	10800324 	muli	r2,r2,12
  806334:	1007883a 	mov	r3,r2
  806338:	00802034 	movhi	r2,128
  80633c:	109e0704 	addi	r2,r2,30748
  806340:	1885883a 	add	r2,r3,r2
  806344:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  806348:	e0fffc17 	ldw	r3,-16(fp)
  80634c:	00900034 	movhi	r2,16384
  806350:	10bfffc4 	addi	r2,r2,-1
  806354:	1886703a 	and	r3,r3,r2
  806358:	e0bff917 	ldw	r2,-28(fp)
  80635c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  806360:	e0bff617 	ldw	r2,-40(fp)
  806364:	1004c03a 	cmpne	r2,r2,zero
  806368:	1000061e 	bne	r2,zero,806384 <open+0xec>
  80636c:	e13ff917 	ldw	r4,-28(fp)
  806370:	08061bc0 	call	8061bc <alt_file_locked>
  806374:	e0bff715 	stw	r2,-36(fp)
  806378:	e0bff717 	ldw	r2,-36(fp)
  80637c:	1004803a 	cmplt	r2,r2,zero
  806380:	1000131e 	bne	r2,zero,8063d0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  806384:	e0bffa17 	ldw	r2,-24(fp)
  806388:	10800317 	ldw	r2,12(r2)
  80638c:	1005003a 	cmpeq	r2,r2,zero
  806390:	1000091e 	bne	r2,zero,8063b8 <open+0x120>
  806394:	e0bffa17 	ldw	r2,-24(fp)
  806398:	10800317 	ldw	r2,12(r2)
  80639c:	e13ff917 	ldw	r4,-28(fp)
  8063a0:	e17ffb17 	ldw	r5,-20(fp)
  8063a4:	e1bffc17 	ldw	r6,-16(fp)
  8063a8:	e1fffd17 	ldw	r7,-12(fp)
  8063ac:	103ee83a 	callr	r2
  8063b0:	e0bfff15 	stw	r2,-4(fp)
  8063b4:	00000106 	br	8063bc <open+0x124>
  8063b8:	e03fff15 	stw	zero,-4(fp)
  8063bc:	e0bfff17 	ldw	r2,-4(fp)
  8063c0:	e0bff715 	stw	r2,-36(fp)
  8063c4:	00000206 	br	8063d0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8063c8:	00bffb44 	movi	r2,-19
  8063cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8063d0:	e0bff717 	ldw	r2,-36(fp)
  8063d4:	1004403a 	cmpge	r2,r2,zero
  8063d8:	1000091e 	bne	r2,zero,806400 <open+0x168>
  {
    alt_release_fd (index);  
  8063dc:	e13ff817 	ldw	r4,-32(fp)
  8063e0:	08040cc0 	call	8040cc <alt_release_fd>
    ALT_ERRNO = -status;
  8063e4:	08064200 	call	806420 <alt_get_errno>
  8063e8:	e0fff717 	ldw	r3,-36(fp)
  8063ec:	00c7c83a 	sub	r3,zero,r3
  8063f0:	10c00015 	stw	r3,0(r2)
    return -1;
  8063f4:	00bfffc4 	movi	r2,-1
  8063f8:	e0bffe15 	stw	r2,-8(fp)
  8063fc:	00000206 	br	806408 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  806400:	e0bff817 	ldw	r2,-32(fp)
  806404:	e0bffe15 	stw	r2,-8(fp)
  806408:	e0bffe17 	ldw	r2,-8(fp)
}
  80640c:	e037883a 	mov	sp,fp
  806410:	dfc00117 	ldw	ra,4(sp)
  806414:	df000017 	ldw	fp,0(sp)
  806418:	dec00204 	addi	sp,sp,8
  80641c:	f800283a 	ret

00806420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806420:	defffd04 	addi	sp,sp,-12
  806424:	dfc00215 	stw	ra,8(sp)
  806428:	df000115 	stw	fp,4(sp)
  80642c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  806430:	00802074 	movhi	r2,129
  806434:	10a2b904 	addi	r2,r2,-29980
  806438:	10800017 	ldw	r2,0(r2)
  80643c:	1005003a 	cmpeq	r2,r2,zero
  806440:	1000061e 	bne	r2,zero,80645c <alt_get_errno+0x3c>
  806444:	00802074 	movhi	r2,129
  806448:	10a2b904 	addi	r2,r2,-29980
  80644c:	10800017 	ldw	r2,0(r2)
  806450:	103ee83a 	callr	r2
  806454:	e0bfff15 	stw	r2,-4(fp)
  806458:	00000306 	br	806468 <alt_get_errno+0x48>
  80645c:	00802074 	movhi	r2,129
  806460:	10a98904 	addi	r2,r2,-23004
  806464:	e0bfff15 	stw	r2,-4(fp)
  806468:	e0bfff17 	ldw	r2,-4(fp)
}
  80646c:	e037883a 	mov	sp,fp
  806470:	dfc00117 	ldw	ra,4(sp)
  806474:	df000017 	ldw	fp,0(sp)
  806478:	dec00204 	addi	sp,sp,8
  80647c:	f800283a 	ret

00806480 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806480:	defffa04 	addi	sp,sp,-24
  806484:	df000515 	stw	fp,20(sp)
  806488:	df000504 	addi	fp,sp,20
  80648c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806490:	0005303a 	rdctl	r2,status
  806494:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806498:	e0fffd17 	ldw	r3,-12(fp)
  80649c:	00bfff84 	movi	r2,-2
  8064a0:	1884703a 	and	r2,r3,r2
  8064a4:	1001703a 	wrctl	status,r2
  
  return context;
  8064a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8064ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8064b0:	e0bfff17 	ldw	r2,-4(fp)
  8064b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8064b8:	e0bffc17 	ldw	r2,-16(fp)
  8064bc:	10c00017 	ldw	r3,0(r2)
  8064c0:	e0bffc17 	ldw	r2,-16(fp)
  8064c4:	10800117 	ldw	r2,4(r2)
  8064c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8064cc:	e0bffc17 	ldw	r2,-16(fp)
  8064d0:	10c00117 	ldw	r3,4(r2)
  8064d4:	e0bffc17 	ldw	r2,-16(fp)
  8064d8:	10800017 	ldw	r2,0(r2)
  8064dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8064e0:	e0fffc17 	ldw	r3,-16(fp)
  8064e4:	e0bffc17 	ldw	r2,-16(fp)
  8064e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8064ec:	e0fffc17 	ldw	r3,-16(fp)
  8064f0:	e0bffc17 	ldw	r2,-16(fp)
  8064f4:	18800015 	stw	r2,0(r3)
  8064f8:	e0bffe17 	ldw	r2,-8(fp)
  8064fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806500:	e0bffb17 	ldw	r2,-20(fp)
  806504:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  806508:	e037883a 	mov	sp,fp
  80650c:	df000017 	ldw	fp,0(sp)
  806510:	dec00104 	addi	sp,sp,4
  806514:	f800283a 	ret

00806518 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  806518:	defffb04 	addi	sp,sp,-20
  80651c:	dfc00415 	stw	ra,16(sp)
  806520:	df000315 	stw	fp,12(sp)
  806524:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  806528:	d0a00c17 	ldw	r2,-32720(gp)
  80652c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  806530:	d0a6df17 	ldw	r2,-25732(gp)
  806534:	10800044 	addi	r2,r2,1
  806538:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80653c:	00003106 	br	806604 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  806540:	e0bffe17 	ldw	r2,-8(fp)
  806544:	10800017 	ldw	r2,0(r2)
  806548:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80654c:	e0bffe17 	ldw	r2,-8(fp)
  806550:	10800403 	ldbu	r2,16(r2)
  806554:	10803fcc 	andi	r2,r2,255
  806558:	1005003a 	cmpeq	r2,r2,zero
  80655c:	1000051e 	bne	r2,zero,806574 <alt_tick+0x5c>
  806560:	d0a6df17 	ldw	r2,-25732(gp)
  806564:	1004c03a 	cmpne	r2,r2,zero
  806568:	1000021e 	bne	r2,zero,806574 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80656c:	e0bffe17 	ldw	r2,-8(fp)
  806570:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  806574:	e0bffe17 	ldw	r2,-8(fp)
  806578:	10c00217 	ldw	r3,8(r2)
  80657c:	d0a6df17 	ldw	r2,-25732(gp)
  806580:	10c01e36 	bltu	r2,r3,8065fc <alt_tick+0xe4>
  806584:	e0bffe17 	ldw	r2,-8(fp)
  806588:	10800403 	ldbu	r2,16(r2)
  80658c:	10803fcc 	andi	r2,r2,255
  806590:	1004c03a 	cmpne	r2,r2,zero
  806594:	1000191e 	bne	r2,zero,8065fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  806598:	e0bffe17 	ldw	r2,-8(fp)
  80659c:	10c00317 	ldw	r3,12(r2)
  8065a0:	e0bffe17 	ldw	r2,-8(fp)
  8065a4:	11000517 	ldw	r4,20(r2)
  8065a8:	183ee83a 	callr	r3
  8065ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8065b0:	e0bffd17 	ldw	r2,-12(fp)
  8065b4:	1004c03a 	cmpne	r2,r2,zero
  8065b8:	1000031e 	bne	r2,zero,8065c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8065bc:	e13ffe17 	ldw	r4,-8(fp)
  8065c0:	08064800 	call	806480 <alt_alarm_stop>
  8065c4:	00000d06 	br	8065fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8065c8:	e0bffe17 	ldw	r2,-8(fp)
  8065cc:	10c00217 	ldw	r3,8(r2)
  8065d0:	e0bffd17 	ldw	r2,-12(fp)
  8065d4:	1887883a 	add	r3,r3,r2
  8065d8:	e0bffe17 	ldw	r2,-8(fp)
  8065dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8065e0:	e0bffe17 	ldw	r2,-8(fp)
  8065e4:	10c00217 	ldw	r3,8(r2)
  8065e8:	d0a6df17 	ldw	r2,-25732(gp)
  8065ec:	1880032e 	bgeu	r3,r2,8065fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8065f0:	e0fffe17 	ldw	r3,-8(fp)
  8065f4:	00800044 	movi	r2,1
  8065f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8065fc:	e0bfff17 	ldw	r2,-4(fp)
  806600:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806604:	d0e00c04 	addi	r3,gp,-32720
  806608:	e0bffe17 	ldw	r2,-8(fp)
  80660c:	10ffcc1e 	bne	r2,r3,806540 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  806610:	e037883a 	mov	sp,fp
  806614:	dfc00117 	ldw	ra,4(sp)
  806618:	df000017 	ldw	fp,0(sp)
  80661c:	dec00204 	addi	sp,sp,8
  806620:	f800283a 	ret

00806624 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  806624:	deffff04 	addi	sp,sp,-4
  806628:	df000015 	stw	fp,0(sp)
  80662c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  806630:	000170fa 	wrctl	ienable,zero
}
  806634:	e037883a 	mov	sp,fp
  806638:	df000017 	ldw	fp,0(sp)
  80663c:	dec00104 	addi	sp,sp,4
  806640:	f800283a 	ret

00806644 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  806644:	defff904 	addi	sp,sp,-28
  806648:	dfc00615 	stw	ra,24(sp)
  80664c:	df000515 	stw	fp,20(sp)
  806650:	df000504 	addi	fp,sp,20
  806654:	e13ffd15 	stw	r4,-12(fp)
  806658:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80665c:	e0bffe17 	ldw	r2,-8(fp)
  806660:	10800017 	ldw	r2,0(r2)
  806664:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  806668:	e13ffd17 	ldw	r4,-12(fp)
  80666c:	0800bd40 	call	800bd4 <strlen>
  806670:	10800044 	addi	r2,r2,1
  806674:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806678:	00000d06 	br	8066b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80667c:	e0bffc17 	ldw	r2,-16(fp)
  806680:	11000217 	ldw	r4,8(r2)
  806684:	e1bffb17 	ldw	r6,-20(fp)
  806688:	e17ffd17 	ldw	r5,-12(fp)
  80668c:	080698c0 	call	80698c <memcmp>
  806690:	1004c03a 	cmpne	r2,r2,zero
  806694:	1000031e 	bne	r2,zero,8066a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  806698:	e0bffc17 	ldw	r2,-16(fp)
  80669c:	e0bfff15 	stw	r2,-4(fp)
  8066a0:	00000706 	br	8066c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8066a4:	e0bffc17 	ldw	r2,-16(fp)
  8066a8:	10800017 	ldw	r2,0(r2)
  8066ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8066b0:	e0fffe17 	ldw	r3,-8(fp)
  8066b4:	e0bffc17 	ldw	r2,-16(fp)
  8066b8:	10fff01e 	bne	r2,r3,80667c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8066bc:	e03fff15 	stw	zero,-4(fp)
  8066c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8066c4:	e037883a 	mov	sp,fp
  8066c8:	dfc00117 	ldw	ra,4(sp)
  8066cc:	df000017 	ldw	fp,0(sp)
  8066d0:	dec00204 	addi	sp,sp,8
  8066d4:	f800283a 	ret

008066d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8066d8:	defffa04 	addi	sp,sp,-24
  8066dc:	dfc00515 	stw	ra,20(sp)
  8066e0:	df000415 	stw	fp,16(sp)
  8066e4:	df000404 	addi	fp,sp,16
  8066e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8066ec:	00802074 	movhi	r2,129
  8066f0:	10a2b404 	addi	r2,r2,-30000
  8066f4:	10800017 	ldw	r2,0(r2)
  8066f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8066fc:	00003306 	br	8067cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  806700:	e0bffd17 	ldw	r2,-12(fp)
  806704:	11000217 	ldw	r4,8(r2)
  806708:	0800bd40 	call	800bd4 <strlen>
  80670c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  806710:	e0bffd17 	ldw	r2,-12(fp)
  806714:	10c00217 	ldw	r3,8(r2)
  806718:	e0bffc17 	ldw	r2,-16(fp)
  80671c:	1885883a 	add	r2,r3,r2
  806720:	10bfffc4 	addi	r2,r2,-1
  806724:	10800003 	ldbu	r2,0(r2)
  806728:	10803fcc 	andi	r2,r2,255
  80672c:	1080201c 	xori	r2,r2,128
  806730:	10bfe004 	addi	r2,r2,-128
  806734:	10800bd8 	cmpnei	r2,r2,47
  806738:	1000031e 	bne	r2,zero,806748 <alt_find_file+0x70>
    {
      len -= 1;
  80673c:	e0bffc17 	ldw	r2,-16(fp)
  806740:	10bfffc4 	addi	r2,r2,-1
  806744:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806748:	e0bffc17 	ldw	r2,-16(fp)
  80674c:	1007883a 	mov	r3,r2
  806750:	e0bffe17 	ldw	r2,-8(fp)
  806754:	1885883a 	add	r2,r3,r2
  806758:	10800003 	ldbu	r2,0(r2)
  80675c:	10803fcc 	andi	r2,r2,255
  806760:	1080201c 	xori	r2,r2,128
  806764:	10bfe004 	addi	r2,r2,-128
  806768:	10800be0 	cmpeqi	r2,r2,47
  80676c:	10000a1e 	bne	r2,zero,806798 <alt_find_file+0xc0>
  806770:	e0bffc17 	ldw	r2,-16(fp)
  806774:	1007883a 	mov	r3,r2
  806778:	e0bffe17 	ldw	r2,-8(fp)
  80677c:	1885883a 	add	r2,r3,r2
  806780:	10800003 	ldbu	r2,0(r2)
  806784:	10803fcc 	andi	r2,r2,255
  806788:	1080201c 	xori	r2,r2,128
  80678c:	10bfe004 	addi	r2,r2,-128
  806790:	1004c03a 	cmpne	r2,r2,zero
  806794:	10000a1e 	bne	r2,zero,8067c0 <alt_find_file+0xe8>
  806798:	e0bffd17 	ldw	r2,-12(fp)
  80679c:	11000217 	ldw	r4,8(r2)
  8067a0:	e1bffc17 	ldw	r6,-16(fp)
  8067a4:	e17ffe17 	ldw	r5,-8(fp)
  8067a8:	080698c0 	call	80698c <memcmp>
  8067ac:	1004c03a 	cmpne	r2,r2,zero
  8067b0:	1000031e 	bne	r2,zero,8067c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8067b4:	e0bffd17 	ldw	r2,-12(fp)
  8067b8:	e0bfff15 	stw	r2,-4(fp)
  8067bc:	00000806 	br	8067e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8067c0:	e0bffd17 	ldw	r2,-12(fp)
  8067c4:	10800017 	ldw	r2,0(r2)
  8067c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8067cc:	00c02074 	movhi	r3,129
  8067d0:	18e2b404 	addi	r3,r3,-30000
  8067d4:	e0bffd17 	ldw	r2,-12(fp)
  8067d8:	10ffc91e 	bne	r2,r3,806700 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8067dc:	e03fff15 	stw	zero,-4(fp)
  8067e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8067e4:	e037883a 	mov	sp,fp
  8067e8:	dfc00117 	ldw	ra,4(sp)
  8067ec:	df000017 	ldw	fp,0(sp)
  8067f0:	dec00204 	addi	sp,sp,8
  8067f4:	f800283a 	ret

008067f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8067f8:	defffc04 	addi	sp,sp,-16
  8067fc:	df000315 	stw	fp,12(sp)
  806800:	df000304 	addi	fp,sp,12
  806804:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806808:	00bffa04 	movi	r2,-24
  80680c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806810:	e03ffe15 	stw	zero,-8(fp)
  806814:	00001e06 	br	806890 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  806818:	e0bffe17 	ldw	r2,-8(fp)
  80681c:	00c02034 	movhi	r3,128
  806820:	18de0704 	addi	r3,r3,30748
  806824:	10800324 	muli	r2,r2,12
  806828:	10c5883a 	add	r2,r2,r3
  80682c:	10800017 	ldw	r2,0(r2)
  806830:	1004c03a 	cmpne	r2,r2,zero
  806834:	1000131e 	bne	r2,zero,806884 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  806838:	e0bffe17 	ldw	r2,-8(fp)
  80683c:	00c02034 	movhi	r3,128
  806840:	18de0704 	addi	r3,r3,30748
  806844:	10800324 	muli	r2,r2,12
  806848:	10c7883a 	add	r3,r2,r3
  80684c:	e0bfff17 	ldw	r2,-4(fp)
  806850:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  806854:	00802074 	movhi	r2,129
  806858:	10a2b804 	addi	r2,r2,-29984
  80685c:	10c00017 	ldw	r3,0(r2)
  806860:	e0bffe17 	ldw	r2,-8(fp)
  806864:	1880040e 	bge	r3,r2,806878 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  806868:	00c02074 	movhi	r3,129
  80686c:	18e2b804 	addi	r3,r3,-29984
  806870:	e0bffe17 	ldw	r2,-8(fp)
  806874:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  806878:	e0bffe17 	ldw	r2,-8(fp)
  80687c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  806880:	00000606 	br	80689c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806884:	e0bffe17 	ldw	r2,-8(fp)
  806888:	10800044 	addi	r2,r2,1
  80688c:	e0bffe15 	stw	r2,-8(fp)
  806890:	e0bffe17 	ldw	r2,-8(fp)
  806894:	10800810 	cmplti	r2,r2,32
  806898:	103fdf1e 	bne	r2,zero,806818 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80689c:	e0bffd17 	ldw	r2,-12(fp)
}
  8068a0:	e037883a 	mov	sp,fp
  8068a4:	df000017 	ldw	fp,0(sp)
  8068a8:	dec00104 	addi	sp,sp,4
  8068ac:	f800283a 	ret

008068b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8068b0:	defffb04 	addi	sp,sp,-20
  8068b4:	df000415 	stw	fp,16(sp)
  8068b8:	df000404 	addi	fp,sp,16
  8068bc:	e13ffe15 	stw	r4,-8(fp)
  8068c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8068c4:	e0bfff17 	ldw	r2,-4(fp)
  8068c8:	10840070 	cmpltui	r2,r2,4097
  8068cc:	1000021e 	bne	r2,zero,8068d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8068d0:	00840004 	movi	r2,4096
  8068d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8068d8:	e0fffe17 	ldw	r3,-8(fp)
  8068dc:	e0bfff17 	ldw	r2,-4(fp)
  8068e0:	1885883a 	add	r2,r3,r2
  8068e4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8068e8:	e0bffe17 	ldw	r2,-8(fp)
  8068ec:	e0bffd15 	stw	r2,-12(fp)
  8068f0:	00000506 	br	806908 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8068f4:	e0bffd17 	ldw	r2,-12(fp)
  8068f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8068fc:	e0bffd17 	ldw	r2,-12(fp)
  806900:	10800804 	addi	r2,r2,32
  806904:	e0bffd15 	stw	r2,-12(fp)
  806908:	e0fffd17 	ldw	r3,-12(fp)
  80690c:	e0bffc17 	ldw	r2,-16(fp)
  806910:	18bff836 	bltu	r3,r2,8068f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  806914:	e0bffe17 	ldw	r2,-8(fp)
  806918:	108007cc 	andi	r2,r2,31
  80691c:	1005003a 	cmpeq	r2,r2,zero
  806920:	1000021e 	bne	r2,zero,80692c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  806924:	e0bffd17 	ldw	r2,-12(fp)
  806928:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80692c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  806930:	e037883a 	mov	sp,fp
  806934:	df000017 	ldw	fp,0(sp)
  806938:	dec00104 	addi	sp,sp,4
  80693c:	f800283a 	ret

00806940 <atexit>:
  806940:	200b883a 	mov	r5,r4
  806944:	000d883a 	mov	r6,zero
  806948:	0009883a 	mov	r4,zero
  80694c:	000f883a 	mov	r7,zero
  806950:	0806a001 	jmpi	806a00 <__register_exitproc>

00806954 <exit>:
  806954:	defffe04 	addi	sp,sp,-8
  806958:	000b883a 	mov	r5,zero
  80695c:	dc000015 	stw	r16,0(sp)
  806960:	dfc00115 	stw	ra,4(sp)
  806964:	2021883a 	mov	r16,r4
  806968:	0806b380 	call	806b38 <__call_exitprocs>
  80696c:	00802074 	movhi	r2,129
  806970:	10a2b104 	addi	r2,r2,-30012
  806974:	11000017 	ldw	r4,0(r2)
  806978:	20800f17 	ldw	r2,60(r4)
  80697c:	10000126 	beq	r2,zero,806984 <exit+0x30>
  806980:	103ee83a 	callr	r2
  806984:	8009883a 	mov	r4,r16
  806988:	0806e740 	call	806e74 <_exit>

0080698c <memcmp>:
  80698c:	00c000c4 	movi	r3,3
  806990:	1980032e 	bgeu	r3,r6,8069a0 <memcmp+0x14>
  806994:	2144b03a 	or	r2,r4,r5
  806998:	10c4703a 	and	r2,r2,r3
  80699c:	10000f26 	beq	r2,zero,8069dc <memcmp+0x50>
  8069a0:	31ffffc4 	addi	r7,r6,-1
  8069a4:	3000061e 	bne	r6,zero,8069c0 <memcmp+0x34>
  8069a8:	00000a06 	br	8069d4 <memcmp+0x48>
  8069ac:	39ffffc4 	addi	r7,r7,-1
  8069b0:	00bfffc4 	movi	r2,-1
  8069b4:	21000044 	addi	r4,r4,1
  8069b8:	29400044 	addi	r5,r5,1
  8069bc:	38800526 	beq	r7,r2,8069d4 <memcmp+0x48>
  8069c0:	20c00003 	ldbu	r3,0(r4)
  8069c4:	28800003 	ldbu	r2,0(r5)
  8069c8:	18bff826 	beq	r3,r2,8069ac <memcmp+0x20>
  8069cc:	1885c83a 	sub	r2,r3,r2
  8069d0:	f800283a 	ret
  8069d4:	0005883a 	mov	r2,zero
  8069d8:	f800283a 	ret
  8069dc:	180f883a 	mov	r7,r3
  8069e0:	20c00017 	ldw	r3,0(r4)
  8069e4:	28800017 	ldw	r2,0(r5)
  8069e8:	18bfed1e 	bne	r3,r2,8069a0 <memcmp+0x14>
  8069ec:	31bfff04 	addi	r6,r6,-4
  8069f0:	21000104 	addi	r4,r4,4
  8069f4:	29400104 	addi	r5,r5,4
  8069f8:	39bff936 	bltu	r7,r6,8069e0 <memcmp+0x54>
  8069fc:	003fe806 	br	8069a0 <memcmp+0x14>

00806a00 <__register_exitproc>:
  806a00:	defffa04 	addi	sp,sp,-24
  806a04:	00802074 	movhi	r2,129
  806a08:	10a2b104 	addi	r2,r2,-30012
  806a0c:	dc000015 	stw	r16,0(sp)
  806a10:	14000017 	ldw	r16,0(r2)
  806a14:	dd000415 	stw	r20,16(sp)
  806a18:	2829883a 	mov	r20,r5
  806a1c:	81405217 	ldw	r5,328(r16)
  806a20:	dcc00315 	stw	r19,12(sp)
  806a24:	dc800215 	stw	r18,8(sp)
  806a28:	dc400115 	stw	r17,4(sp)
  806a2c:	dfc00515 	stw	ra,20(sp)
  806a30:	2023883a 	mov	r17,r4
  806a34:	3027883a 	mov	r19,r6
  806a38:	3825883a 	mov	r18,r7
  806a3c:	28002526 	beq	r5,zero,806ad4 <__register_exitproc+0xd4>
  806a40:	29000117 	ldw	r4,4(r5)
  806a44:	008007c4 	movi	r2,31
  806a48:	11002716 	blt	r2,r4,806ae8 <__register_exitproc+0xe8>
  806a4c:	8800101e 	bne	r17,zero,806a90 <__register_exitproc+0x90>
  806a50:	2105883a 	add	r2,r4,r4
  806a54:	1085883a 	add	r2,r2,r2
  806a58:	20c00044 	addi	r3,r4,1
  806a5c:	1145883a 	add	r2,r2,r5
  806a60:	0009883a 	mov	r4,zero
  806a64:	15000215 	stw	r20,8(r2)
  806a68:	28c00115 	stw	r3,4(r5)
  806a6c:	2005883a 	mov	r2,r4
  806a70:	dfc00517 	ldw	ra,20(sp)
  806a74:	dd000417 	ldw	r20,16(sp)
  806a78:	dcc00317 	ldw	r19,12(sp)
  806a7c:	dc800217 	ldw	r18,8(sp)
  806a80:	dc400117 	ldw	r17,4(sp)
  806a84:	dc000017 	ldw	r16,0(sp)
  806a88:	dec00604 	addi	sp,sp,24
  806a8c:	f800283a 	ret
  806a90:	29802204 	addi	r6,r5,136
  806a94:	00800044 	movi	r2,1
  806a98:	110e983a 	sll	r7,r2,r4
  806a9c:	30c04017 	ldw	r3,256(r6)
  806aa0:	2105883a 	add	r2,r4,r4
  806aa4:	1085883a 	add	r2,r2,r2
  806aa8:	1185883a 	add	r2,r2,r6
  806aac:	19c6b03a 	or	r3,r3,r7
  806ab0:	14802015 	stw	r18,128(r2)
  806ab4:	14c00015 	stw	r19,0(r2)
  806ab8:	00800084 	movi	r2,2
  806abc:	30c04015 	stw	r3,256(r6)
  806ac0:	88bfe31e 	bne	r17,r2,806a50 <__register_exitproc+0x50>
  806ac4:	30804117 	ldw	r2,260(r6)
  806ac8:	11c4b03a 	or	r2,r2,r7
  806acc:	30804115 	stw	r2,260(r6)
  806ad0:	003fdf06 	br	806a50 <__register_exitproc+0x50>
  806ad4:	00802074 	movhi	r2,129
  806ad8:	10a9da04 	addi	r2,r2,-22680
  806adc:	100b883a 	mov	r5,r2
  806ae0:	80805215 	stw	r2,328(r16)
  806ae4:	003fd606 	br	806a40 <__register_exitproc+0x40>
  806ae8:	00800034 	movhi	r2,0
  806aec:	10800004 	addi	r2,r2,0
  806af0:	1000021e 	bne	r2,zero,806afc <__register_exitproc+0xfc>
  806af4:	013fffc4 	movi	r4,-1
  806af8:	003fdc06 	br	806a6c <__register_exitproc+0x6c>
  806afc:	01006404 	movi	r4,400
  806b00:	103ee83a 	callr	r2
  806b04:	1007883a 	mov	r3,r2
  806b08:	103ffa26 	beq	r2,zero,806af4 <__register_exitproc+0xf4>
  806b0c:	80805217 	ldw	r2,328(r16)
  806b10:	180b883a 	mov	r5,r3
  806b14:	18000115 	stw	zero,4(r3)
  806b18:	18800015 	stw	r2,0(r3)
  806b1c:	80c05215 	stw	r3,328(r16)
  806b20:	18006215 	stw	zero,392(r3)
  806b24:	18006315 	stw	zero,396(r3)
  806b28:	0009883a 	mov	r4,zero
  806b2c:	883fc826 	beq	r17,zero,806a50 <__register_exitproc+0x50>
  806b30:	003fd706 	br	806a90 <__register_exitproc+0x90>

00806b34 <register_fini>:
  806b34:	f800283a 	ret

00806b38 <__call_exitprocs>:
  806b38:	00802074 	movhi	r2,129
  806b3c:	10a2b104 	addi	r2,r2,-30012
  806b40:	10800017 	ldw	r2,0(r2)
  806b44:	defff304 	addi	sp,sp,-52
  806b48:	df000b15 	stw	fp,44(sp)
  806b4c:	d8800115 	stw	r2,4(sp)
  806b50:	00800034 	movhi	r2,0
  806b54:	10800004 	addi	r2,r2,0
  806b58:	1005003a 	cmpeq	r2,r2,zero
  806b5c:	d8800215 	stw	r2,8(sp)
  806b60:	d8800117 	ldw	r2,4(sp)
  806b64:	dd400815 	stw	r21,32(sp)
  806b68:	dd000715 	stw	r20,28(sp)
  806b6c:	10805204 	addi	r2,r2,328
  806b70:	dfc00c15 	stw	ra,48(sp)
  806b74:	ddc00a15 	stw	r23,40(sp)
  806b78:	dd800915 	stw	r22,36(sp)
  806b7c:	dcc00615 	stw	r19,24(sp)
  806b80:	dc800515 	stw	r18,20(sp)
  806b84:	dc400415 	stw	r17,16(sp)
  806b88:	dc000315 	stw	r16,12(sp)
  806b8c:	282b883a 	mov	r21,r5
  806b90:	2039883a 	mov	fp,r4
  806b94:	d8800015 	stw	r2,0(sp)
  806b98:	2829003a 	cmpeq	r20,r5,zero
  806b9c:	d8800117 	ldw	r2,4(sp)
  806ba0:	14405217 	ldw	r17,328(r2)
  806ba4:	88001026 	beq	r17,zero,806be8 <__call_exitprocs+0xb0>
  806ba8:	ddc00017 	ldw	r23,0(sp)
  806bac:	88800117 	ldw	r2,4(r17)
  806bb0:	8c802204 	addi	r18,r17,136
  806bb4:	143fffc4 	addi	r16,r2,-1
  806bb8:	80000916 	blt	r16,zero,806be0 <__call_exitprocs+0xa8>
  806bbc:	05bfffc4 	movi	r22,-1
  806bc0:	a000151e 	bne	r20,zero,806c18 <__call_exitprocs+0xe0>
  806bc4:	8409883a 	add	r4,r16,r16
  806bc8:	2105883a 	add	r2,r4,r4
  806bcc:	1485883a 	add	r2,r2,r18
  806bd0:	10c02017 	ldw	r3,128(r2)
  806bd4:	a8c01126 	beq	r21,r3,806c1c <__call_exitprocs+0xe4>
  806bd8:	843fffc4 	addi	r16,r16,-1
  806bdc:	85bff81e 	bne	r16,r22,806bc0 <__call_exitprocs+0x88>
  806be0:	d8800217 	ldw	r2,8(sp)
  806be4:	10003126 	beq	r2,zero,806cac <__call_exitprocs+0x174>
  806be8:	dfc00c17 	ldw	ra,48(sp)
  806bec:	df000b17 	ldw	fp,44(sp)
  806bf0:	ddc00a17 	ldw	r23,40(sp)
  806bf4:	dd800917 	ldw	r22,36(sp)
  806bf8:	dd400817 	ldw	r21,32(sp)
  806bfc:	dd000717 	ldw	r20,28(sp)
  806c00:	dcc00617 	ldw	r19,24(sp)
  806c04:	dc800517 	ldw	r18,20(sp)
  806c08:	dc400417 	ldw	r17,16(sp)
  806c0c:	dc000317 	ldw	r16,12(sp)
  806c10:	dec00d04 	addi	sp,sp,52
  806c14:	f800283a 	ret
  806c18:	8409883a 	add	r4,r16,r16
  806c1c:	88c00117 	ldw	r3,4(r17)
  806c20:	2105883a 	add	r2,r4,r4
  806c24:	1445883a 	add	r2,r2,r17
  806c28:	18ffffc4 	addi	r3,r3,-1
  806c2c:	11800217 	ldw	r6,8(r2)
  806c30:	1c001526 	beq	r3,r16,806c88 <__call_exitprocs+0x150>
  806c34:	10000215 	stw	zero,8(r2)
  806c38:	303fe726 	beq	r6,zero,806bd8 <__call_exitprocs+0xa0>
  806c3c:	00c00044 	movi	r3,1
  806c40:	1c06983a 	sll	r3,r3,r16
  806c44:	90804017 	ldw	r2,256(r18)
  806c48:	8cc00117 	ldw	r19,4(r17)
  806c4c:	1884703a 	and	r2,r3,r2
  806c50:	10001426 	beq	r2,zero,806ca4 <__call_exitprocs+0x16c>
  806c54:	90804117 	ldw	r2,260(r18)
  806c58:	1884703a 	and	r2,r3,r2
  806c5c:	10000c1e 	bne	r2,zero,806c90 <__call_exitprocs+0x158>
  806c60:	2105883a 	add	r2,r4,r4
  806c64:	1485883a 	add	r2,r2,r18
  806c68:	11400017 	ldw	r5,0(r2)
  806c6c:	e009883a 	mov	r4,fp
  806c70:	303ee83a 	callr	r6
  806c74:	88800117 	ldw	r2,4(r17)
  806c78:	98bfc81e 	bne	r19,r2,806b9c <__call_exitprocs+0x64>
  806c7c:	b8800017 	ldw	r2,0(r23)
  806c80:	147fd526 	beq	r2,r17,806bd8 <__call_exitprocs+0xa0>
  806c84:	003fc506 	br	806b9c <__call_exitprocs+0x64>
  806c88:	8c000115 	stw	r16,4(r17)
  806c8c:	003fea06 	br	806c38 <__call_exitprocs+0x100>
  806c90:	2105883a 	add	r2,r4,r4
  806c94:	1485883a 	add	r2,r2,r18
  806c98:	11000017 	ldw	r4,0(r2)
  806c9c:	303ee83a 	callr	r6
  806ca0:	003ff406 	br	806c74 <__call_exitprocs+0x13c>
  806ca4:	303ee83a 	callr	r6
  806ca8:	003ff206 	br	806c74 <__call_exitprocs+0x13c>
  806cac:	88800117 	ldw	r2,4(r17)
  806cb0:	1000081e 	bne	r2,zero,806cd4 <__call_exitprocs+0x19c>
  806cb4:	89000017 	ldw	r4,0(r17)
  806cb8:	20000726 	beq	r4,zero,806cd8 <__call_exitprocs+0x1a0>
  806cbc:	b9000015 	stw	r4,0(r23)
  806cc0:	8809883a 	mov	r4,r17
  806cc4:	00000000 	call	0 <__reset-0x800000>
  806cc8:	bc400017 	ldw	r17,0(r23)
  806ccc:	883fb71e 	bne	r17,zero,806bac <__call_exitprocs+0x74>
  806cd0:	003fc506 	br	806be8 <__call_exitprocs+0xb0>
  806cd4:	89000017 	ldw	r4,0(r17)
  806cd8:	882f883a 	mov	r23,r17
  806cdc:	2023883a 	mov	r17,r4
  806ce0:	883fb21e 	bne	r17,zero,806bac <__call_exitprocs+0x74>
  806ce4:	003fc006 	br	806be8 <__call_exitprocs+0xb0>

00806ce8 <udivmodsi4>:
  806ce8:	29001b2e 	bgeu	r5,r4,806d58 <udivmodsi4+0x70>
  806cec:	28001a16 	blt	r5,zero,806d58 <udivmodsi4+0x70>
  806cf0:	00800044 	movi	r2,1
  806cf4:	0007883a 	mov	r3,zero
  806cf8:	01c007c4 	movi	r7,31
  806cfc:	00000306 	br	806d0c <udivmodsi4+0x24>
  806d00:	19c01326 	beq	r3,r7,806d50 <udivmodsi4+0x68>
  806d04:	18c00044 	addi	r3,r3,1
  806d08:	28000416 	blt	r5,zero,806d1c <udivmodsi4+0x34>
  806d0c:	294b883a 	add	r5,r5,r5
  806d10:	1085883a 	add	r2,r2,r2
  806d14:	293ffa36 	bltu	r5,r4,806d00 <udivmodsi4+0x18>
  806d18:	10000d26 	beq	r2,zero,806d50 <udivmodsi4+0x68>
  806d1c:	0007883a 	mov	r3,zero
  806d20:	21400236 	bltu	r4,r5,806d2c <udivmodsi4+0x44>
  806d24:	2149c83a 	sub	r4,r4,r5
  806d28:	1886b03a 	or	r3,r3,r2
  806d2c:	1004d07a 	srli	r2,r2,1
  806d30:	280ad07a 	srli	r5,r5,1
  806d34:	103ffa1e 	bne	r2,zero,806d20 <udivmodsi4+0x38>
  806d38:	30000226 	beq	r6,zero,806d44 <udivmodsi4+0x5c>
  806d3c:	2005883a 	mov	r2,r4
  806d40:	f800283a 	ret
  806d44:	1809883a 	mov	r4,r3
  806d48:	2005883a 	mov	r2,r4
  806d4c:	f800283a 	ret
  806d50:	0007883a 	mov	r3,zero
  806d54:	003ff806 	br	806d38 <udivmodsi4+0x50>
  806d58:	00800044 	movi	r2,1
  806d5c:	0007883a 	mov	r3,zero
  806d60:	003fef06 	br	806d20 <udivmodsi4+0x38>

00806d64 <__divsi3>:
  806d64:	defffe04 	addi	sp,sp,-8
  806d68:	dc000015 	stw	r16,0(sp)
  806d6c:	dfc00115 	stw	ra,4(sp)
  806d70:	0021883a 	mov	r16,zero
  806d74:	20000c16 	blt	r4,zero,806da8 <__divsi3+0x44>
  806d78:	000d883a 	mov	r6,zero
  806d7c:	28000e16 	blt	r5,zero,806db8 <__divsi3+0x54>
  806d80:	0806ce80 	call	806ce8 <udivmodsi4>
  806d84:	1007883a 	mov	r3,r2
  806d88:	8005003a 	cmpeq	r2,r16,zero
  806d8c:	1000011e 	bne	r2,zero,806d94 <__divsi3+0x30>
  806d90:	00c7c83a 	sub	r3,zero,r3
  806d94:	1805883a 	mov	r2,r3
  806d98:	dfc00117 	ldw	ra,4(sp)
  806d9c:	dc000017 	ldw	r16,0(sp)
  806da0:	dec00204 	addi	sp,sp,8
  806da4:	f800283a 	ret
  806da8:	0109c83a 	sub	r4,zero,r4
  806dac:	04000044 	movi	r16,1
  806db0:	000d883a 	mov	r6,zero
  806db4:	283ff20e 	bge	r5,zero,806d80 <__divsi3+0x1c>
  806db8:	014bc83a 	sub	r5,zero,r5
  806dbc:	8021003a 	cmpeq	r16,r16,zero
  806dc0:	003fef06 	br	806d80 <__divsi3+0x1c>

00806dc4 <__modsi3>:
  806dc4:	deffff04 	addi	sp,sp,-4
  806dc8:	dfc00015 	stw	ra,0(sp)
  806dcc:	01800044 	movi	r6,1
  806dd0:	2807883a 	mov	r3,r5
  806dd4:	20000416 	blt	r4,zero,806de8 <__modsi3+0x24>
  806dd8:	28000c16 	blt	r5,zero,806e0c <__modsi3+0x48>
  806ddc:	dfc00017 	ldw	ra,0(sp)
  806de0:	dec00104 	addi	sp,sp,4
  806de4:	0806ce81 	jmpi	806ce8 <udivmodsi4>
  806de8:	0109c83a 	sub	r4,zero,r4
  806dec:	28000b16 	blt	r5,zero,806e1c <__modsi3+0x58>
  806df0:	180b883a 	mov	r5,r3
  806df4:	01800044 	movi	r6,1
  806df8:	0806ce80 	call	806ce8 <udivmodsi4>
  806dfc:	0085c83a 	sub	r2,zero,r2
  806e00:	dfc00017 	ldw	ra,0(sp)
  806e04:	dec00104 	addi	sp,sp,4
  806e08:	f800283a 	ret
  806e0c:	014bc83a 	sub	r5,zero,r5
  806e10:	dfc00017 	ldw	ra,0(sp)
  806e14:	dec00104 	addi	sp,sp,4
  806e18:	0806ce81 	jmpi	806ce8 <udivmodsi4>
  806e1c:	0147c83a 	sub	r3,zero,r5
  806e20:	003ff306 	br	806df0 <__modsi3+0x2c>

00806e24 <__udivsi3>:
  806e24:	000d883a 	mov	r6,zero
  806e28:	0806ce81 	jmpi	806ce8 <udivmodsi4>

00806e2c <__umodsi3>:
  806e2c:	01800044 	movi	r6,1
  806e30:	0806ce81 	jmpi	806ce8 <udivmodsi4>

00806e34 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  806e34:	defffd04 	addi	sp,sp,-12
  806e38:	df000215 	stw	fp,8(sp)
  806e3c:	df000204 	addi	fp,sp,8
  806e40:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  806e44:	e0bfff17 	ldw	r2,-4(fp)
  806e48:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806e4c:	e0bffe17 	ldw	r2,-8(fp)
  806e50:	1005003a 	cmpeq	r2,r2,zero
  806e54:	1000021e 	bne	r2,zero,806e60 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  806e58:	002af070 	cmpltui	zero,zero,43969
  806e5c:	00000106 	br	806e64 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  806e60:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  806e64:	e037883a 	mov	sp,fp
  806e68:	df000017 	ldw	fp,0(sp)
  806e6c:	dec00104 	addi	sp,sp,4
  806e70:	f800283a 	ret

00806e74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806e74:	defffd04 	addi	sp,sp,-12
  806e78:	dfc00215 	stw	ra,8(sp)
  806e7c:	df000115 	stw	fp,4(sp)
  806e80:	df000104 	addi	fp,sp,4
  806e84:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  806e88:	e13fff17 	ldw	r4,-4(fp)
  806e8c:	0806e340 	call	806e34 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806e90:	003fff06 	br	806e90 <_exit+0x1c>
  806e94:	00806b34 	movhi	r2,428

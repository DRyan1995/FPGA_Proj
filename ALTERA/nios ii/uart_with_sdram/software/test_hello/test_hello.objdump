
test_hello.elf:     file format elf32-littlenios2
test_hello.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006818 memsz 0x00006818 flags r-x
    LOAD off    0x00007838 vaddr 0x00806838 paddr 0x00808344 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x00009e50 vaddr 0x00809e50 paddr 0x00809e50 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006628  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  008067dc  008067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  00806838  00808344  00007838  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00809e50  00809e50  00009e50  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009344  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  00009368  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000fa5  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001cd92  00000000  00000000  0000ad45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b20  00000000  00000000  00027ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e4ee  00000000  00000000  0002d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001374  00000000  00000000  0003bae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001852  00000000  00000000  0003ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000465f  00000000  00000000  0003e6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00042d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00042d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00045986  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00045989  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004598e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004598f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00045990  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00045994  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00045998  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004599c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000459a5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000459ae  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000459b7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000017  00000000  00000000  000459bb  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000303b0  00000000  00000000  000459d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
008067dc l    d  .rodata	00000000 .rodata
00806838 l    d  .rwdata	00000000 .rwdata
00809e50 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00806838 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00802034 l     F .text	00000058 std
00802140 l     F .text	00000008 __fp_lock
00802148 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00803108 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803168 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803268 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00803548 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803628 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803784 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008039b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00808338 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00803c7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008071e8 l     O .rwdata	00001060 jtag_uart
00808248 l     O .rwdata	000000c4 RS232
00803d74 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00803fb4 l     F .text	00000228 altera_avalon_jtag_uart_irq
008041dc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00804a18 l     F .text	0000009c altera_avalon_uart_irq
00804ab4 l     F .text	000000e0 altera_avalon_uart_rxirq
00804b94 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00804f80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008051a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008055a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008059c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00805b00 l     F .text	000000dc alt_file_locked
00805d64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00806478 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080662c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00806778 l     F .text	00000040 alt_sim_halt
008003a0 g     F .text	0000001c putchar
00802eac g     F .text	00000070 _isatty_r
008037e4 g     F .text	0000006c alt_main
008002c8 g     F .text	00000044 Uart_ISR
008003c4 g     F .text	000000a0 _puts_r
00809ea0 g     O .bss	00000100 alt_irq
00802f1c g     F .text	00000078 _lseek_r
00808344 g       *ABS*	00000000 __flash_rwdata_start
00800264 g     F .text	00000064 Uart_send_n
0080a130 g       *ABS*	00000000 __alt_heap_start
00802ae8 g     F .text	00000068 __sseek
0080209c g     F .text	000000a4 __sinit
00801b7c g     F .text	00000130 __swbuf_r
0080219c g     F .text	00000068 __sfmoreglue
00803870 g     F .text	00000020 __malloc_unlock
0080124c g     F .text	000000e0 memmove
0080218c g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802e38 g     F .text	00000074 _fstat_r
00809e5c g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00809e68 g     O .bss	00000004 alt_argv
0081030c g       *ABS*	00000000 _gp
00803b2c g     F .text	00000030 usleep
00807068 g     O .rwdata	00000180 alt_fd_list
008003bc g     F .text	00000008 _putchar_r
00805f88 g     F .text	00000094 alt_find_dev
008011ac g     F .text	000000a0 memcpy
00802180 g     F .text	0000000c _cleanup_r
00805a88 g     F .text	00000078 alt_io_redirect
008067dc g       *ABS*	00000000 __DTOR_END__
00800464 g     F .text	00000014 puts
008043f4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00806768 g     F .text	00000008 __udivsi3
00803488 g     F .text	000000c0 isatty
00800200 g     F .text	00000064 Uart_send
008061f4 g     F .text	00000090 alt_icache_flush
00809e50 g     O .bss	00000004 __malloc_top_pad
008004ec g     F .text	0000049c __sfvwrite_r
00801b0c g     F .text	00000070 _sbrk_r
00802f94 g     F .text	00000078 _read_r
0080832c g     O .rwdata	00000004 alt_max_fd
00802d14 g     F .text	00000110 _fclose_r
00802000 g     F .text	00000034 fflush
00809e54 g     O .bss	00000004 __malloc_max_sbrked_mem
008032c8 g     F .text	000001c0 alt_irq_register
00803694 g     F .text	000000f0 lseek
00808310 g     O .rwdata	00000004 _global_impure_ptr
00801518 g     F .text	000005f4 _realloc_r
0080a130 g       *ABS*	00000000 __bss_end
008058cc g     F .text	000000f8 alt_iic_isr_register
00805e5c g     F .text	0000010c alt_tick
00804950 g     F .text	000000c8 altera_avalon_uart_init
00802168 g     F .text	00000018 __fp_lock_all
00805884 g     F .text	00000048 alt_ic_irq_enabled
00805dc4 g     F .text	00000098 alt_alarm_stop
00809e60 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
00807040 g     O .rwdata	00000028 alt_dev_null
008054a8 g     F .text	00000044 alt_dcache_flush_all
00808344 g       *ABS*	00000000 __ram_rwdata_end
00808324 g     O .rwdata	00000008 alt_dev_list
00803b5c g     F .text	00000120 write
00801430 g     F .text	000000e8 _putc_r
00806838 g       *ABS*	00000000 __ram_rodata_end
00803194 g     F .text	000000d4 fstat
00806770 g     F .text	00000008 __umodsi3
0080a130 g       *ABS*	00000000 end
00804fe0 g     F .text	000001c8 altera_avalon_uart_write
00803ef4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008067d8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008048b0 g     F .text	00000058 altera_avalon_uart_write_fd
00804908 g     F .text	00000048 altera_avalon_uart_close_fd
00804618 g     F .text	00000240 altera_avalon_jtag_uart_write
0080208c g     F .text	00000004 __sfp_lock_acquire
008010c8 g     F .text	000000e4 memchr
00802420 g     F .text	00000314 _free_r
0080647c g     F .text	000001b0 __call_exitprocs
00808318 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00809e70 g     O .bss	00000004 _alt_tick_rate
00809e74 g     O .bss	00000004 _alt_nticks
00803890 g     F .text	00000120 read
00803d10 g     F .text	00000064 alt_sys_init
00806344 g     F .text	00000134 __register_exitproc
0080428c g     F .text	00000074 altera_avalon_jtag_uart_close
00806838 g       *ABS*	00000000 __ram_rwdata_start
008067dc g       *ABS*	00000000 __ram_rodata_start
00809e78 g     O .bss	00000028 __malloc_current_mallinfo
00803dac g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080613c g     F .text	000000b8 alt_get_fd
0080535c g     F .text	0000014c alt_busy_sleep
00802ca4 g     F .text	00000070 _close_r
008062d0 g     F .text	00000074 memcmp
00803e5c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080a130 g       *ABS*	00000000 __alt_stack_base
00803ea4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00801cc8 g     F .text	0000013c __swsetup_r
00802204 g     F .text	000000f0 __sfp
00806c38 g     O .rwdata	00000408 __malloc_av_
00802098 g     F .text	00000004 __sinit_lock_release
00802bcc g     F .text	00000060 __sread
0080601c g     F .text	00000120 alt_find_file
008054ec g     F .text	000000b4 alt_dev_llist_insert
00803850 g     F .text	00000020 __malloc_lock
00803a70 g     F .text	000000bc sbrk
00801e04 g     F .text	000001fc _fflush_r
00809e50 g       *ABS*	00000000 __bss_start
00802a48 g     F .text	00000098 memset
00800360 g     F .text	00000040 main
00809e6c g     O .bss	00000004 alt_envp
00809e58 g     O .bss	00000004 __malloc_max_total_mem
00803e04 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00801cac g     F .text	0000001c __swbuf
00802ae0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802e24 g     F .text	00000014 fclose
00809fa0 g     O .bss	00000190 _atexit0
00800988 g     F .text	00000740 _malloc_r
00808330 g     O .rwdata	00000004 alt_errno
008027fc g     F .text	000000b8 _fwalk
0080132c g     F .text	00000104 putc
008066a8 g     F .text	00000060 __divsi3
008022f4 g     F .text	0000012c _malloc_trim_r
008067dc g       *ABS*	00000000 __CTOR_END__
008067dc g       *ABS*	00000000 __flash_rodata_start
008067dc g       *ABS*	00000000 __DTOR_LIST__
00803cdc g     F .text	00000034 alt_irq_init
00803a10 g     F .text	00000060 alt_release_fd
00806284 g     F .text	00000014 atexit
00802c2c g     F .text	00000078 _write_r
0080830c g     O .rwdata	00000004 _impure_ptr
00809e64 g     O .bss	00000004 alt_argc
00805664 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00802150 g     F .text	00000018 __fp_unlock_all
0080831c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008056f8 g     F .text	00000050 alt_ic_isr_register
00808344 g       *ABS*	00000000 _edata
00804858 g     F .text	00000058 altera_avalon_uart_read_fd
0080a130 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00804300 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008057e4 g     F .text	000000a0 alt_ic_irq_disable
00802b50 g     F .text	0000007c __swrite
00808314 g     O .rwdata	00000004 __malloc_trim_threshold
00805f68 g     F .text	00000020 altera_nios2_qsys_irq_init
00806298 g     F .text	00000038 exit
00802734 g     F .text	000000c8 _fwalk_reent
00806708 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802090 g     F .text	00000004 __sfp_lock_release
00804cf0 g     F .text	00000060 altera_avalon_uart_close
008067b8 g     F .text	00000020 _exit
00805208 g     F .text	00000154 alt_alarm_start
008028b4 g     F .text	00000194 __smakebuf_r
00800478 g     F .text	00000074 strlen
0080030c g     F .text	00000054 Uart_init
00805bdc g     F .text	00000188 open
008056c8 g     F .text	00000030 alt_icache_flush_all
00808334 g     O .rwdata	00000004 alt_priority_mask
00805748 g     F .text	0000009c alt_ic_irq_enable
00804d50 g     F .text	00000230 altera_avalon_uart_read
0080833c g     O .rwdata	00000008 alt_alarm_list
00805600 g     F .text	00000064 _do_ctors
0080300c g     F .text	000000fc close
008035a8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00802094 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18e7a804 	addi	r3,r3,-24928
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18e7a804 	addi	r3,r3,-24928
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d680c314 	ori	gp,gp,780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a79414 	ori	r2,r2,40528

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e84c14 	ori	r3,r3,41264

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08035a80 	call	8035a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08037e40 	call	8037e4 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <Uart_send>:
#include <system.h>
#include <string.h>


void Uart_send(unsigned char data)
{
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff05 	stb	r4,-4(fp)
	alt_u16 status;
	status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
  800210:	00804034 	movhi	r2,256
  800214:	10840204 	addi	r2,r2,4104
  800218:	10800037 	ldwio	r2,0(r2)
  80021c:	e0bffe0d 	sth	r2,-8(fp)
	while(!(status&0x0040))//waiting the tx_done
  800220:	00000406 	br	800234 <Uart_send+0x34>
	{
		status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
  800224:	00804034 	movhi	r2,256
  800228:	10840204 	addi	r2,r2,4104
  80022c:	10800037 	ldwio	r2,0(r2)
  800230:	e0bffe0d 	sth	r2,-8(fp)

void Uart_send(unsigned char data)
{
	alt_u16 status;
	status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
	while(!(status&0x0040))//waiting the tx_done
  800234:	e0bffe0b 	ldhu	r2,-8(fp)
  800238:	1080100c 	andi	r2,r2,64
  80023c:	1005003a 	cmpeq	r2,r2,zero
  800240:	103ff81e 	bne	r2,zero,800224 <Uart_send+0x24>
	{
		status = IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE);
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE,data);
  800244:	e0ffff03 	ldbu	r3,-4(fp)
  800248:	00804034 	movhi	r2,256
  80024c:	10840104 	addi	r2,r2,4100
  800250:	10c00035 	stwio	r3,0(r2)

}
  800254:	e037883a 	mov	sp,fp
  800258:	df000017 	ldw	fp,0(sp)
  80025c:	dec00104 	addi	sp,sp,4
  800260:	f800283a 	ret

00800264 <Uart_send_n>:
void Uart_send_n(unsigned char *ptr,unsigned char n)
{
  800264:	defffc04 	addi	sp,sp,-16
  800268:	dfc00315 	stw	ra,12(sp)
  80026c:	df000215 	stw	fp,8(sp)
  800270:	df000204 	addi	fp,sp,8
  800274:	e13ffe15 	stw	r4,-8(fp)
  800278:	e17fff05 	stb	r5,-4(fp)
	for(;n>0;n--)
  80027c:	00000a06 	br	8002a8 <Uart_send_n+0x44>
	{
		Uart_send(*(ptr++));
  800280:	e0bffe17 	ldw	r2,-8(fp)
  800284:	10800003 	ldbu	r2,0(r2)
  800288:	11003fcc 	andi	r4,r2,255
  80028c:	e0bffe17 	ldw	r2,-8(fp)
  800290:	10800044 	addi	r2,r2,1
  800294:	e0bffe15 	stw	r2,-8(fp)
  800298:	08002000 	call	800200 <Uart_send>
	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE,data);

}
void Uart_send_n(unsigned char *ptr,unsigned char n)
{
	for(;n>0;n--)
  80029c:	e0bfff03 	ldbu	r2,-4(fp)
  8002a0:	10bfffc4 	addi	r2,r2,-1
  8002a4:	e0bfff05 	stb	r2,-4(fp)
  8002a8:	e0bfff03 	ldbu	r2,-4(fp)
  8002ac:	1004c03a 	cmpne	r2,r2,zero
  8002b0:	103ff31e 	bne	r2,zero,800280 <Uart_send_n+0x1c>
	{
		Uart_send(*(ptr++));

	}
}
  8002b4:	e037883a 	mov	sp,fp
  8002b8:	dfc00117 	ldw	ra,4(sp)
  8002bc:	df000017 	ldw	fp,0(sp)
  8002c0:	dec00204 	addi	sp,sp,8
  8002c4:	f800283a 	ret

008002c8 <Uart_ISR>:
void Uart_ISR(void *context,alt_u32 id)
{
  8002c8:	defffb04 	addi	sp,sp,-20
  8002cc:	dfc00415 	stw	ra,16(sp)
  8002d0:	df000315 	stw	fp,12(sp)
  8002d4:	df000304 	addi	fp,sp,12
  8002d8:	e13ffe15 	stw	r4,-8(fp)
  8002dc:	e17fff15 	stw	r5,-4(fp)
	unsigned char temp;
	temp =  IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
  8002e0:	00804034 	movhi	r2,256
  8002e4:	10840004 	addi	r2,r2,4096
  8002e8:	10800037 	ldwio	r2,0(r2)
  8002ec:	e0bffd05 	stb	r2,-12(fp)

	printf("%c",temp);
  8002f0:	e13ffd03 	ldbu	r4,-12(fp)
  8002f4:	08003a00 	call	8003a0 <putchar>
}
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	dfc00117 	ldw	ra,4(sp)
  800300:	df000017 	ldw	fp,0(sp)
  800304:	dec00204 	addi	sp,sp,8
  800308:	f800283a 	ret

0080030c <Uart_init>:
void Uart_init()
{
  80030c:	defffe04 	addi	sp,sp,-8
  800310:	dfc00115 	stw	ra,4(sp)
  800314:	df000015 	stw	fp,0(sp)
  800318:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_UART_CONTROL(RS232_BASE,0x80);
  80031c:	00804034 	movhi	r2,256
  800320:	10840304 	addi	r2,r2,4108
  800324:	00c02004 	movi	r3,128
  800328:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_STATUS(RS232_BASE,0x0);
  80032c:	00804034 	movhi	r2,256
  800330:	10840204 	addi	r2,r2,4104
  800334:	10000035 	stwio	zero,0(r2)
	alt_irq_register(RS232_IRQ,1,Uart_ISR);
  800338:	0009883a 	mov	r4,zero
  80033c:	01400044 	movi	r5,1
  800340:	01802034 	movhi	r6,128
  800344:	3180b204 	addi	r6,r6,712
  800348:	08032c80 	call	8032c8 <alt_irq_register>

}
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <main>:

int main()
{
  800360:	defffe04 	addi	sp,sp,-8
  800364:	dfc00115 	stw	ra,4(sp)
  800368:	df000015 	stw	fp,0(sp)
  80036c:	d839883a 	mov	fp,sp
  printf("System Restarted!!!\n");
  800370:	01002034 	movhi	r4,128
  800374:	2119f704 	addi	r4,r4,26588
  800378:	08004640 	call	800464 <puts>
  //unsigned char mydata[8];

  //puts(mydata);

  Uart_init();
  80037c:	080030c0 	call	80030c <Uart_init>
	  //Uart_send('h');
  while(1)
  {
   Uart_send_n("Hello!\n",7);
  800380:	01002034 	movhi	r4,128
  800384:	2119fc04 	addi	r4,r4,26608
  800388:	014001c4 	movi	r5,7
  80038c:	08002640 	call	800264 <Uart_send_n>
   usleep(500000);
  800390:	01000234 	movhi	r4,8
  800394:	21284804 	addi	r4,r4,-24288
  800398:	0803b2c0 	call	803b2c <usleep>
  }
  80039c:	003ff806 	br	800380 <main+0x20>

008003a0 <putchar>:
  8003a0:	00802074 	movhi	r2,129
  8003a4:	10a0c304 	addi	r2,r2,-31988
  8003a8:	11800017 	ldw	r6,0(r2)
  8003ac:	200b883a 	mov	r5,r4
  8003b0:	3009883a 	mov	r4,r6
  8003b4:	31800217 	ldw	r6,8(r6)
  8003b8:	08014301 	jmpi	801430 <_putc_r>

008003bc <_putchar_r>:
  8003bc:	21800217 	ldw	r6,8(r4)
  8003c0:	08014301 	jmpi	801430 <_putc_r>

008003c4 <_puts_r>:
  8003c4:	defff604 	addi	sp,sp,-40
  8003c8:	dc400715 	stw	r17,28(sp)
  8003cc:	2023883a 	mov	r17,r4
  8003d0:	2809883a 	mov	r4,r5
  8003d4:	dfc00915 	stw	ra,36(sp)
  8003d8:	dcc00815 	stw	r19,32(sp)
  8003dc:	2827883a 	mov	r19,r5
  8003e0:	08004780 	call	800478 <strlen>
  8003e4:	89400217 	ldw	r5,8(r17)
  8003e8:	00c02034 	movhi	r3,128
  8003ec:	18d9fe04 	addi	r3,r3,26616
  8003f0:	01c00044 	movi	r7,1
  8003f4:	12000044 	addi	r8,r2,1
  8003f8:	d8c00515 	stw	r3,20(sp)
  8003fc:	d9c00615 	stw	r7,24(sp)
  800400:	d8c00304 	addi	r3,sp,12
  800404:	01c00084 	movi	r7,2
  800408:	8809883a 	mov	r4,r17
  80040c:	d80d883a 	mov	r6,sp
  800410:	d8c00015 	stw	r3,0(sp)
  800414:	dcc00315 	stw	r19,12(sp)
  800418:	da000215 	stw	r8,8(sp)
  80041c:	d9c00115 	stw	r7,4(sp)
  800420:	d8800415 	stw	r2,16(sp)
  800424:	08004ec0 	call	8004ec <__sfvwrite_r>
  800428:	00ffffc4 	movi	r3,-1
  80042c:	10000626 	beq	r2,zero,800448 <_puts_r+0x84>
  800430:	1805883a 	mov	r2,r3
  800434:	dfc00917 	ldw	ra,36(sp)
  800438:	dcc00817 	ldw	r19,32(sp)
  80043c:	dc400717 	ldw	r17,28(sp)
  800440:	dec00a04 	addi	sp,sp,40
  800444:	f800283a 	ret
  800448:	00c00284 	movi	r3,10
  80044c:	1805883a 	mov	r2,r3
  800450:	dfc00917 	ldw	ra,36(sp)
  800454:	dcc00817 	ldw	r19,32(sp)
  800458:	dc400717 	ldw	r17,28(sp)
  80045c:	dec00a04 	addi	sp,sp,40
  800460:	f800283a 	ret

00800464 <puts>:
  800464:	00802074 	movhi	r2,129
  800468:	10a0c304 	addi	r2,r2,-31988
  80046c:	200b883a 	mov	r5,r4
  800470:	11000017 	ldw	r4,0(r2)
  800474:	08003c41 	jmpi	8003c4 <_puts_r>

00800478 <strlen>:
  800478:	208000cc 	andi	r2,r4,3
  80047c:	2011883a 	mov	r8,r4
  800480:	1000161e 	bne	r2,zero,8004dc <strlen+0x64>
  800484:	20c00017 	ldw	r3,0(r4)
  800488:	017fbff4 	movhi	r5,65279
  80048c:	297fbfc4 	addi	r5,r5,-257
  800490:	01e02074 	movhi	r7,32897
  800494:	39e02004 	addi	r7,r7,-32640
  800498:	1945883a 	add	r2,r3,r5
  80049c:	11c4703a 	and	r2,r2,r7
  8004a0:	00c6303a 	nor	r3,zero,r3
  8004a4:	1886703a 	and	r3,r3,r2
  8004a8:	18000c1e 	bne	r3,zero,8004dc <strlen+0x64>
  8004ac:	280d883a 	mov	r6,r5
  8004b0:	380b883a 	mov	r5,r7
  8004b4:	21000104 	addi	r4,r4,4
  8004b8:	20800017 	ldw	r2,0(r4)
  8004bc:	1187883a 	add	r3,r2,r6
  8004c0:	1946703a 	and	r3,r3,r5
  8004c4:	0084303a 	nor	r2,zero,r2
  8004c8:	10c4703a 	and	r2,r2,r3
  8004cc:	103ff926 	beq	r2,zero,8004b4 <strlen+0x3c>
  8004d0:	20800007 	ldb	r2,0(r4)
  8004d4:	10000326 	beq	r2,zero,8004e4 <strlen+0x6c>
  8004d8:	21000044 	addi	r4,r4,1
  8004dc:	20800007 	ldb	r2,0(r4)
  8004e0:	103ffd1e 	bne	r2,zero,8004d8 <strlen+0x60>
  8004e4:	2205c83a 	sub	r2,r4,r8
  8004e8:	f800283a 	ret

008004ec <__sfvwrite_r>:
  8004ec:	30800217 	ldw	r2,8(r6)
  8004f0:	defff504 	addi	sp,sp,-44
  8004f4:	df000915 	stw	fp,36(sp)
  8004f8:	dd800715 	stw	r22,28(sp)
  8004fc:	dc800315 	stw	r18,12(sp)
  800500:	dfc00a15 	stw	ra,40(sp)
  800504:	ddc00815 	stw	r23,32(sp)
  800508:	dd400615 	stw	r21,24(sp)
  80050c:	dd000515 	stw	r20,20(sp)
  800510:	dcc00415 	stw	r19,16(sp)
  800514:	dc400215 	stw	r17,8(sp)
  800518:	dc000115 	stw	r16,4(sp)
  80051c:	302d883a 	mov	r22,r6
  800520:	2039883a 	mov	fp,r4
  800524:	2825883a 	mov	r18,r5
  800528:	10001c26 	beq	r2,zero,80059c <__sfvwrite_r+0xb0>
  80052c:	29c0030b 	ldhu	r7,12(r5)
  800530:	3880020c 	andi	r2,r7,8
  800534:	10002726 	beq	r2,zero,8005d4 <__sfvwrite_r+0xe8>
  800538:	28800417 	ldw	r2,16(r5)
  80053c:	10002526 	beq	r2,zero,8005d4 <__sfvwrite_r+0xe8>
  800540:	3880008c 	andi	r2,r7,2
  800544:	b5400017 	ldw	r21,0(r22)
  800548:	10002826 	beq	r2,zero,8005ec <__sfvwrite_r+0x100>
  80054c:	0021883a 	mov	r16,zero
  800550:	0023883a 	mov	r17,zero
  800554:	880d883a 	mov	r6,r17
  800558:	e009883a 	mov	r4,fp
  80055c:	00810004 	movi	r2,1024
  800560:	80006e26 	beq	r16,zero,80071c <__sfvwrite_r+0x230>
  800564:	800f883a 	mov	r7,r16
  800568:	91400717 	ldw	r5,28(r18)
  80056c:	1400012e 	bgeu	r2,r16,800574 <__sfvwrite_r+0x88>
  800570:	100f883a 	mov	r7,r2
  800574:	90c00917 	ldw	r3,36(r18)
  800578:	183ee83a 	callr	r3
  80057c:	1007883a 	mov	r3,r2
  800580:	80a1c83a 	sub	r16,r16,r2
  800584:	88a3883a 	add	r17,r17,r2
  800588:	00806d0e 	bge	zero,r2,800740 <__sfvwrite_r+0x254>
  80058c:	b0800217 	ldw	r2,8(r22)
  800590:	10c5c83a 	sub	r2,r2,r3
  800594:	b0800215 	stw	r2,8(r22)
  800598:	103fee1e 	bne	r2,zero,800554 <__sfvwrite_r+0x68>
  80059c:	0009883a 	mov	r4,zero
  8005a0:	2005883a 	mov	r2,r4
  8005a4:	dfc00a17 	ldw	ra,40(sp)
  8005a8:	df000917 	ldw	fp,36(sp)
  8005ac:	ddc00817 	ldw	r23,32(sp)
  8005b0:	dd800717 	ldw	r22,28(sp)
  8005b4:	dd400617 	ldw	r21,24(sp)
  8005b8:	dd000517 	ldw	r20,20(sp)
  8005bc:	dcc00417 	ldw	r19,16(sp)
  8005c0:	dc800317 	ldw	r18,12(sp)
  8005c4:	dc400217 	ldw	r17,8(sp)
  8005c8:	dc000117 	ldw	r16,4(sp)
  8005cc:	dec00b04 	addi	sp,sp,44
  8005d0:	f800283a 	ret
  8005d4:	0801cc80 	call	801cc8 <__swsetup_r>
  8005d8:	1000e41e 	bne	r2,zero,80096c <__sfvwrite_r+0x480>
  8005dc:	91c0030b 	ldhu	r7,12(r18)
  8005e0:	b5400017 	ldw	r21,0(r22)
  8005e4:	3880008c 	andi	r2,r7,2
  8005e8:	103fd81e 	bne	r2,zero,80054c <__sfvwrite_r+0x60>
  8005ec:	3880004c 	andi	r2,r7,1
  8005f0:	1005003a 	cmpeq	r2,r2,zero
  8005f4:	10005726 	beq	r2,zero,800754 <__sfvwrite_r+0x268>
  8005f8:	0029883a 	mov	r20,zero
  8005fc:	002f883a 	mov	r23,zero
  800600:	a0004226 	beq	r20,zero,80070c <__sfvwrite_r+0x220>
  800604:	3880800c 	andi	r2,r7,512
  800608:	94000217 	ldw	r16,8(r18)
  80060c:	10008b26 	beq	r2,zero,80083c <__sfvwrite_r+0x350>
  800610:	800d883a 	mov	r6,r16
  800614:	a400a536 	bltu	r20,r16,8008ac <__sfvwrite_r+0x3c0>
  800618:	3881200c 	andi	r2,r7,1152
  80061c:	10002726 	beq	r2,zero,8006bc <__sfvwrite_r+0x1d0>
  800620:	90800517 	ldw	r2,20(r18)
  800624:	92000417 	ldw	r8,16(r18)
  800628:	91400017 	ldw	r5,0(r18)
  80062c:	1087883a 	add	r3,r2,r2
  800630:	1887883a 	add	r3,r3,r2
  800634:	1808d7fa 	srli	r4,r3,31
  800638:	2a21c83a 	sub	r16,r5,r8
  80063c:	80800044 	addi	r2,r16,1
  800640:	20c9883a 	add	r4,r4,r3
  800644:	2027d07a 	srai	r19,r4,1
  800648:	a085883a 	add	r2,r20,r2
  80064c:	980d883a 	mov	r6,r19
  800650:	9880022e 	bgeu	r19,r2,80065c <__sfvwrite_r+0x170>
  800654:	1027883a 	mov	r19,r2
  800658:	100d883a 	mov	r6,r2
  80065c:	3881000c 	andi	r2,r7,1024
  800660:	1000b826 	beq	r2,zero,800944 <__sfvwrite_r+0x458>
  800664:	300b883a 	mov	r5,r6
  800668:	e009883a 	mov	r4,fp
  80066c:	08009880 	call	800988 <_malloc_r>
  800670:	10003126 	beq	r2,zero,800738 <__sfvwrite_r+0x24c>
  800674:	91400417 	ldw	r5,16(r18)
  800678:	1009883a 	mov	r4,r2
  80067c:	800d883a 	mov	r6,r16
  800680:	1023883a 	mov	r17,r2
  800684:	08011ac0 	call	8011ac <memcpy>
  800688:	90c0030b 	ldhu	r3,12(r18)
  80068c:	00beffc4 	movi	r2,-1025
  800690:	1886703a 	and	r3,r3,r2
  800694:	18c02014 	ori	r3,r3,128
  800698:	90c0030d 	sth	r3,12(r18)
  80069c:	9c07c83a 	sub	r3,r19,r16
  8006a0:	8c05883a 	add	r2,r17,r16
  8006a4:	a00d883a 	mov	r6,r20
  8006a8:	a021883a 	mov	r16,r20
  8006ac:	90800015 	stw	r2,0(r18)
  8006b0:	90c00215 	stw	r3,8(r18)
  8006b4:	94400415 	stw	r17,16(r18)
  8006b8:	94c00515 	stw	r19,20(r18)
  8006bc:	91000017 	ldw	r4,0(r18)
  8006c0:	b80b883a 	mov	r5,r23
  8006c4:	a023883a 	mov	r17,r20
  8006c8:	080124c0 	call	80124c <memmove>
  8006cc:	90c00217 	ldw	r3,8(r18)
  8006d0:	90800017 	ldw	r2,0(r18)
  8006d4:	a027883a 	mov	r19,r20
  8006d8:	1c07c83a 	sub	r3,r3,r16
  8006dc:	1405883a 	add	r2,r2,r16
  8006e0:	90c00215 	stw	r3,8(r18)
  8006e4:	a021883a 	mov	r16,r20
  8006e8:	90800015 	stw	r2,0(r18)
  8006ec:	b0800217 	ldw	r2,8(r22)
  8006f0:	1405c83a 	sub	r2,r2,r16
  8006f4:	b0800215 	stw	r2,8(r22)
  8006f8:	103fa826 	beq	r2,zero,80059c <__sfvwrite_r+0xb0>
  8006fc:	a469c83a 	sub	r20,r20,r17
  800700:	91c0030b 	ldhu	r7,12(r18)
  800704:	bcef883a 	add	r23,r23,r19
  800708:	a03fbe1e 	bne	r20,zero,800604 <__sfvwrite_r+0x118>
  80070c:	adc00017 	ldw	r23,0(r21)
  800710:	ad000117 	ldw	r20,4(r21)
  800714:	ad400204 	addi	r21,r21,8
  800718:	003fb906 	br	800600 <__sfvwrite_r+0x114>
  80071c:	ac400017 	ldw	r17,0(r21)
  800720:	ac000117 	ldw	r16,4(r21)
  800724:	ad400204 	addi	r21,r21,8
  800728:	003f8a06 	br	800554 <__sfvwrite_r+0x68>
  80072c:	91400417 	ldw	r5,16(r18)
  800730:	e009883a 	mov	r4,fp
  800734:	08024200 	call	802420 <_free_r>
  800738:	00800304 	movi	r2,12
  80073c:	e0800015 	stw	r2,0(fp)
  800740:	9080030b 	ldhu	r2,12(r18)
  800744:	013fffc4 	movi	r4,-1
  800748:	10801014 	ori	r2,r2,64
  80074c:	9080030d 	sth	r2,12(r18)
  800750:	003f9306 	br	8005a0 <__sfvwrite_r+0xb4>
  800754:	0027883a 	mov	r19,zero
  800758:	002f883a 	mov	r23,zero
  80075c:	d8000015 	stw	zero,0(sp)
  800760:	0029883a 	mov	r20,zero
  800764:	98001e26 	beq	r19,zero,8007e0 <__sfvwrite_r+0x2f4>
  800768:	d8c00017 	ldw	r3,0(sp)
  80076c:	1804c03a 	cmpne	r2,r3,zero
  800770:	10005e26 	beq	r2,zero,8008ec <__sfvwrite_r+0x400>
  800774:	9821883a 	mov	r16,r19
  800778:	a4c0012e 	bgeu	r20,r19,800780 <__sfvwrite_r+0x294>
  80077c:	a021883a 	mov	r16,r20
  800780:	91000017 	ldw	r4,0(r18)
  800784:	90800417 	ldw	r2,16(r18)
  800788:	91800217 	ldw	r6,8(r18)
  80078c:	91c00517 	ldw	r7,20(r18)
  800790:	1100022e 	bgeu	r2,r4,80079c <__sfvwrite_r+0x2b0>
  800794:	31e3883a 	add	r17,r6,r7
  800798:	8c001616 	blt	r17,r16,8007f4 <__sfvwrite_r+0x308>
  80079c:	81c03816 	blt	r16,r7,800880 <__sfvwrite_r+0x394>
  8007a0:	90c00917 	ldw	r3,36(r18)
  8007a4:	91400717 	ldw	r5,28(r18)
  8007a8:	e009883a 	mov	r4,fp
  8007ac:	b80d883a 	mov	r6,r23
  8007b0:	183ee83a 	callr	r3
  8007b4:	1023883a 	mov	r17,r2
  8007b8:	00bfe10e 	bge	zero,r2,800740 <__sfvwrite_r+0x254>
  8007bc:	a469c83a 	sub	r20,r20,r17
  8007c0:	a0001826 	beq	r20,zero,800824 <__sfvwrite_r+0x338>
  8007c4:	b0800217 	ldw	r2,8(r22)
  8007c8:	1445c83a 	sub	r2,r2,r17
  8007cc:	b0800215 	stw	r2,8(r22)
  8007d0:	103f7226 	beq	r2,zero,80059c <__sfvwrite_r+0xb0>
  8007d4:	9c67c83a 	sub	r19,r19,r17
  8007d8:	bc6f883a 	add	r23,r23,r17
  8007dc:	983fe21e 	bne	r19,zero,800768 <__sfvwrite_r+0x27c>
  8007e0:	adc00017 	ldw	r23,0(r21)
  8007e4:	acc00117 	ldw	r19,4(r21)
  8007e8:	ad400204 	addi	r21,r21,8
  8007ec:	d8000015 	stw	zero,0(sp)
  8007f0:	003fdc06 	br	800764 <__sfvwrite_r+0x278>
  8007f4:	b80b883a 	mov	r5,r23
  8007f8:	880d883a 	mov	r6,r17
  8007fc:	080124c0 	call	80124c <memmove>
  800800:	90c00017 	ldw	r3,0(r18)
  800804:	e009883a 	mov	r4,fp
  800808:	900b883a 	mov	r5,r18
  80080c:	1c47883a 	add	r3,r3,r17
  800810:	90c00015 	stw	r3,0(r18)
  800814:	0801e040 	call	801e04 <_fflush_r>
  800818:	103fc91e 	bne	r2,zero,800740 <__sfvwrite_r+0x254>
  80081c:	a469c83a 	sub	r20,r20,r17
  800820:	a03fe81e 	bne	r20,zero,8007c4 <__sfvwrite_r+0x2d8>
  800824:	e009883a 	mov	r4,fp
  800828:	900b883a 	mov	r5,r18
  80082c:	0801e040 	call	801e04 <_fflush_r>
  800830:	103fc31e 	bne	r2,zero,800740 <__sfvwrite_r+0x254>
  800834:	d8000015 	stw	zero,0(sp)
  800838:	003fe206 	br	8007c4 <__sfvwrite_r+0x2d8>
  80083c:	91000017 	ldw	r4,0(r18)
  800840:	90800417 	ldw	r2,16(r18)
  800844:	1100022e 	bgeu	r2,r4,800850 <__sfvwrite_r+0x364>
  800848:	8023883a 	mov	r17,r16
  80084c:	85003136 	bltu	r16,r20,800914 <__sfvwrite_r+0x428>
  800850:	91c00517 	ldw	r7,20(r18)
  800854:	a1c01836 	bltu	r20,r7,8008b8 <__sfvwrite_r+0x3cc>
  800858:	90c00917 	ldw	r3,36(r18)
  80085c:	91400717 	ldw	r5,28(r18)
  800860:	e009883a 	mov	r4,fp
  800864:	b80d883a 	mov	r6,r23
  800868:	183ee83a 	callr	r3
  80086c:	1021883a 	mov	r16,r2
  800870:	00bfb30e 	bge	zero,r2,800740 <__sfvwrite_r+0x254>
  800874:	1023883a 	mov	r17,r2
  800878:	1027883a 	mov	r19,r2
  80087c:	003f9b06 	br	8006ec <__sfvwrite_r+0x200>
  800880:	b80b883a 	mov	r5,r23
  800884:	800d883a 	mov	r6,r16
  800888:	080124c0 	call	80124c <memmove>
  80088c:	90c00217 	ldw	r3,8(r18)
  800890:	90800017 	ldw	r2,0(r18)
  800894:	8023883a 	mov	r17,r16
  800898:	1c07c83a 	sub	r3,r3,r16
  80089c:	1405883a 	add	r2,r2,r16
  8008a0:	90c00215 	stw	r3,8(r18)
  8008a4:	90800015 	stw	r2,0(r18)
  8008a8:	003fc406 	br	8007bc <__sfvwrite_r+0x2d0>
  8008ac:	a00d883a 	mov	r6,r20
  8008b0:	a021883a 	mov	r16,r20
  8008b4:	003f8106 	br	8006bc <__sfvwrite_r+0x1d0>
  8008b8:	b80b883a 	mov	r5,r23
  8008bc:	a00d883a 	mov	r6,r20
  8008c0:	080124c0 	call	80124c <memmove>
  8008c4:	90c00217 	ldw	r3,8(r18)
  8008c8:	90800017 	ldw	r2,0(r18)
  8008cc:	a021883a 	mov	r16,r20
  8008d0:	1d07c83a 	sub	r3,r3,r20
  8008d4:	1505883a 	add	r2,r2,r20
  8008d8:	a023883a 	mov	r17,r20
  8008dc:	a027883a 	mov	r19,r20
  8008e0:	90c00215 	stw	r3,8(r18)
  8008e4:	90800015 	stw	r2,0(r18)
  8008e8:	003f8006 	br	8006ec <__sfvwrite_r+0x200>
  8008ec:	b809883a 	mov	r4,r23
  8008f0:	01400284 	movi	r5,10
  8008f4:	980d883a 	mov	r6,r19
  8008f8:	08010c80 	call	8010c8 <memchr>
  8008fc:	10001726 	beq	r2,zero,80095c <__sfvwrite_r+0x470>
  800900:	15c5c83a 	sub	r2,r2,r23
  800904:	15000044 	addi	r20,r2,1
  800908:	00800044 	movi	r2,1
  80090c:	d8800015 	stw	r2,0(sp)
  800910:	003f9806 	br	800774 <__sfvwrite_r+0x288>
  800914:	b80b883a 	mov	r5,r23
  800918:	800d883a 	mov	r6,r16
  80091c:	080124c0 	call	80124c <memmove>
  800920:	90c00017 	ldw	r3,0(r18)
  800924:	e009883a 	mov	r4,fp
  800928:	900b883a 	mov	r5,r18
  80092c:	1c07883a 	add	r3,r3,r16
  800930:	90c00015 	stw	r3,0(r18)
  800934:	8027883a 	mov	r19,r16
  800938:	0801e040 	call	801e04 <_fflush_r>
  80093c:	103f6b26 	beq	r2,zero,8006ec <__sfvwrite_r+0x200>
  800940:	003f7f06 	br	800740 <__sfvwrite_r+0x254>
  800944:	400b883a 	mov	r5,r8
  800948:	e009883a 	mov	r4,fp
  80094c:	08015180 	call	801518 <_realloc_r>
  800950:	103f7626 	beq	r2,zero,80072c <__sfvwrite_r+0x240>
  800954:	1023883a 	mov	r17,r2
  800958:	003f5006 	br	80069c <__sfvwrite_r+0x1b0>
  80095c:	00c00044 	movi	r3,1
  800960:	9d000044 	addi	r20,r19,1
  800964:	d8c00015 	stw	r3,0(sp)
  800968:	003f8206 	br	800774 <__sfvwrite_r+0x288>
  80096c:	9080030b 	ldhu	r2,12(r18)
  800970:	00c00244 	movi	r3,9
  800974:	013fffc4 	movi	r4,-1
  800978:	10801014 	ori	r2,r2,64
  80097c:	9080030d 	sth	r2,12(r18)
  800980:	e0c00015 	stw	r3,0(fp)
  800984:	003f0606 	br	8005a0 <__sfvwrite_r+0xb4>

00800988 <_malloc_r>:
  800988:	defff604 	addi	sp,sp,-40
  80098c:	28c002c4 	addi	r3,r5,11
  800990:	00800584 	movi	r2,22
  800994:	dc800215 	stw	r18,8(sp)
  800998:	dfc00915 	stw	ra,36(sp)
  80099c:	df000815 	stw	fp,32(sp)
  8009a0:	ddc00715 	stw	r23,28(sp)
  8009a4:	dd800615 	stw	r22,24(sp)
  8009a8:	dd400515 	stw	r21,20(sp)
  8009ac:	dd000415 	stw	r20,16(sp)
  8009b0:	dcc00315 	stw	r19,12(sp)
  8009b4:	dc400115 	stw	r17,4(sp)
  8009b8:	dc000015 	stw	r16,0(sp)
  8009bc:	2025883a 	mov	r18,r4
  8009c0:	10c01236 	bltu	r2,r3,800a0c <_malloc_r+0x84>
  8009c4:	04400404 	movi	r17,16
  8009c8:	8940142e 	bgeu	r17,r5,800a1c <_malloc_r+0x94>
  8009cc:	00800304 	movi	r2,12
  8009d0:	0007883a 	mov	r3,zero
  8009d4:	90800015 	stw	r2,0(r18)
  8009d8:	1805883a 	mov	r2,r3
  8009dc:	dfc00917 	ldw	ra,36(sp)
  8009e0:	df000817 	ldw	fp,32(sp)
  8009e4:	ddc00717 	ldw	r23,28(sp)
  8009e8:	dd800617 	ldw	r22,24(sp)
  8009ec:	dd400517 	ldw	r21,20(sp)
  8009f0:	dd000417 	ldw	r20,16(sp)
  8009f4:	dcc00317 	ldw	r19,12(sp)
  8009f8:	dc800217 	ldw	r18,8(sp)
  8009fc:	dc400117 	ldw	r17,4(sp)
  800a00:	dc000017 	ldw	r16,0(sp)
  800a04:	dec00a04 	addi	sp,sp,40
  800a08:	f800283a 	ret
  800a0c:	00bffe04 	movi	r2,-8
  800a10:	18a2703a 	and	r17,r3,r2
  800a14:	883fed16 	blt	r17,zero,8009cc <_malloc_r+0x44>
  800a18:	897fec36 	bltu	r17,r5,8009cc <_malloc_r+0x44>
  800a1c:	9009883a 	mov	r4,r18
  800a20:	08038500 	call	803850 <__malloc_lock>
  800a24:	00807dc4 	movi	r2,503
  800a28:	14402b2e 	bgeu	r2,r17,800ad8 <_malloc_r+0x150>
  800a2c:	8806d27a 	srli	r3,r17,9
  800a30:	18003f1e 	bne	r3,zero,800b30 <_malloc_r+0x1a8>
  800a34:	880cd0fa 	srli	r6,r17,3
  800a38:	300490fa 	slli	r2,r6,3
  800a3c:	02c02034 	movhi	r11,128
  800a40:	5adb0e04 	addi	r11,r11,27704
  800a44:	12cb883a 	add	r5,r2,r11
  800a48:	2c000317 	ldw	r16,12(r5)
  800a4c:	580f883a 	mov	r7,r11
  800a50:	2c00041e 	bne	r5,r16,800a64 <_malloc_r+0xdc>
  800a54:	00000a06 	br	800a80 <_malloc_r+0xf8>
  800a58:	1800860e 	bge	r3,zero,800c74 <_malloc_r+0x2ec>
  800a5c:	84000317 	ldw	r16,12(r16)
  800a60:	2c000726 	beq	r5,r16,800a80 <_malloc_r+0xf8>
  800a64:	80800117 	ldw	r2,4(r16)
  800a68:	00ffff04 	movi	r3,-4
  800a6c:	10c8703a 	and	r4,r2,r3
  800a70:	2447c83a 	sub	r3,r4,r17
  800a74:	008003c4 	movi	r2,15
  800a78:	10fff70e 	bge	r2,r3,800a58 <_malloc_r+0xd0>
  800a7c:	31bfffc4 	addi	r6,r6,-1
  800a80:	32400044 	addi	r9,r6,1
  800a84:	02802034 	movhi	r10,128
  800a88:	529b1004 	addi	r10,r10,27712
  800a8c:	54000217 	ldw	r16,8(r10)
  800a90:	8280a026 	beq	r16,r10,800d14 <_malloc_r+0x38c>
  800a94:	80800117 	ldw	r2,4(r16)
  800a98:	00ffff04 	movi	r3,-4
  800a9c:	10ca703a 	and	r5,r2,r3
  800aa0:	2c4dc83a 	sub	r6,r5,r17
  800aa4:	008003c4 	movi	r2,15
  800aa8:	11808316 	blt	r2,r6,800cb8 <_malloc_r+0x330>
  800aac:	52800315 	stw	r10,12(r10)
  800ab0:	52800215 	stw	r10,8(r10)
  800ab4:	30002916 	blt	r6,zero,800b5c <_malloc_r+0x1d4>
  800ab8:	8147883a 	add	r3,r16,r5
  800abc:	18800117 	ldw	r2,4(r3)
  800ac0:	9009883a 	mov	r4,r18
  800ac4:	10800054 	ori	r2,r2,1
  800ac8:	18800115 	stw	r2,4(r3)
  800acc:	08038700 	call	803870 <__malloc_unlock>
  800ad0:	80c00204 	addi	r3,r16,8
  800ad4:	003fc006 	br	8009d8 <_malloc_r+0x50>
  800ad8:	02c02034 	movhi	r11,128
  800adc:	5adb0e04 	addi	r11,r11,27704
  800ae0:	8ac5883a 	add	r2,r17,r11
  800ae4:	14000317 	ldw	r16,12(r2)
  800ae8:	580f883a 	mov	r7,r11
  800aec:	8806d0fa 	srli	r3,r17,3
  800af0:	14006c26 	beq	r2,r16,800ca4 <_malloc_r+0x31c>
  800af4:	80c00117 	ldw	r3,4(r16)
  800af8:	00bfff04 	movi	r2,-4
  800afc:	81800317 	ldw	r6,12(r16)
  800b00:	1886703a 	and	r3,r3,r2
  800b04:	80c7883a 	add	r3,r16,r3
  800b08:	18800117 	ldw	r2,4(r3)
  800b0c:	81400217 	ldw	r5,8(r16)
  800b10:	9009883a 	mov	r4,r18
  800b14:	10800054 	ori	r2,r2,1
  800b18:	18800115 	stw	r2,4(r3)
  800b1c:	31400215 	stw	r5,8(r6)
  800b20:	29800315 	stw	r6,12(r5)
  800b24:	08038700 	call	803870 <__malloc_unlock>
  800b28:	80c00204 	addi	r3,r16,8
  800b2c:	003faa06 	br	8009d8 <_malloc_r+0x50>
  800b30:	00800104 	movi	r2,4
  800b34:	10c0052e 	bgeu	r2,r3,800b4c <_malloc_r+0x1c4>
  800b38:	00800504 	movi	r2,20
  800b3c:	10c07836 	bltu	r2,r3,800d20 <_malloc_r+0x398>
  800b40:	198016c4 	addi	r6,r3,91
  800b44:	300490fa 	slli	r2,r6,3
  800b48:	003fbc06 	br	800a3c <_malloc_r+0xb4>
  800b4c:	8804d1ba 	srli	r2,r17,6
  800b50:	11800e04 	addi	r6,r2,56
  800b54:	300490fa 	slli	r2,r6,3
  800b58:	003fb806 	br	800a3c <_malloc_r+0xb4>
  800b5c:	00807fc4 	movi	r2,511
  800b60:	1140bb36 	bltu	r2,r5,800e50 <_malloc_r+0x4c8>
  800b64:	2806d0fa 	srli	r3,r5,3
  800b68:	573ffe04 	addi	fp,r10,-8
  800b6c:	00800044 	movi	r2,1
  800b70:	180890fa 	slli	r4,r3,3
  800b74:	1807d0ba 	srai	r3,r3,2
  800b78:	e1c00117 	ldw	r7,4(fp)
  800b7c:	5909883a 	add	r4,r11,r4
  800b80:	21400217 	ldw	r5,8(r4)
  800b84:	10c4983a 	sll	r2,r2,r3
  800b88:	81000315 	stw	r4,12(r16)
  800b8c:	81400215 	stw	r5,8(r16)
  800b90:	388eb03a 	or	r7,r7,r2
  800b94:	2c000315 	stw	r16,12(r5)
  800b98:	24000215 	stw	r16,8(r4)
  800b9c:	e1c00115 	stw	r7,4(fp)
  800ba0:	4807883a 	mov	r3,r9
  800ba4:	4800cd16 	blt	r9,zero,800edc <_malloc_r+0x554>
  800ba8:	1807d0ba 	srai	r3,r3,2
  800bac:	00800044 	movi	r2,1
  800bb0:	10c8983a 	sll	r4,r2,r3
  800bb4:	39004436 	bltu	r7,r4,800cc8 <_malloc_r+0x340>
  800bb8:	21c4703a 	and	r2,r4,r7
  800bbc:	10000a1e 	bne	r2,zero,800be8 <_malloc_r+0x260>
  800bc0:	2109883a 	add	r4,r4,r4
  800bc4:	00bfff04 	movi	r2,-4
  800bc8:	4884703a 	and	r2,r9,r2
  800bcc:	3906703a 	and	r3,r7,r4
  800bd0:	12400104 	addi	r9,r2,4
  800bd4:	1800041e 	bne	r3,zero,800be8 <_malloc_r+0x260>
  800bd8:	2109883a 	add	r4,r4,r4
  800bdc:	3904703a 	and	r2,r7,r4
  800be0:	4a400104 	addi	r9,r9,4
  800be4:	103ffc26 	beq	r2,zero,800bd8 <_malloc_r+0x250>
  800be8:	480490fa 	slli	r2,r9,3
  800bec:	4819883a 	mov	r12,r9
  800bf0:	023fff04 	movi	r8,-4
  800bf4:	589b883a 	add	r13,r11,r2
  800bf8:	6807883a 	mov	r3,r13
  800bfc:	014003c4 	movi	r5,15
  800c00:	1c000317 	ldw	r16,12(r3)
  800c04:	1c00041e 	bne	r3,r16,800c18 <_malloc_r+0x290>
  800c08:	0000a706 	br	800ea8 <_malloc_r+0x520>
  800c0c:	3000ab0e 	bge	r6,zero,800ebc <_malloc_r+0x534>
  800c10:	84000317 	ldw	r16,12(r16)
  800c14:	1c00a426 	beq	r3,r16,800ea8 <_malloc_r+0x520>
  800c18:	80800117 	ldw	r2,4(r16)
  800c1c:	1204703a 	and	r2,r2,r8
  800c20:	144dc83a 	sub	r6,r2,r17
  800c24:	29bff90e 	bge	r5,r6,800c0c <_malloc_r+0x284>
  800c28:	81000317 	ldw	r4,12(r16)
  800c2c:	80c00217 	ldw	r3,8(r16)
  800c30:	89400054 	ori	r5,r17,1
  800c34:	8445883a 	add	r2,r16,r17
  800c38:	20c00215 	stw	r3,8(r4)
  800c3c:	19000315 	stw	r4,12(r3)
  800c40:	81400115 	stw	r5,4(r16)
  800c44:	1187883a 	add	r3,r2,r6
  800c48:	31000054 	ori	r4,r6,1
  800c4c:	50800315 	stw	r2,12(r10)
  800c50:	50800215 	stw	r2,8(r10)
  800c54:	19800015 	stw	r6,0(r3)
  800c58:	11000115 	stw	r4,4(r2)
  800c5c:	12800215 	stw	r10,8(r2)
  800c60:	12800315 	stw	r10,12(r2)
  800c64:	9009883a 	mov	r4,r18
  800c68:	08038700 	call	803870 <__malloc_unlock>
  800c6c:	80c00204 	addi	r3,r16,8
  800c70:	003f5906 	br	8009d8 <_malloc_r+0x50>
  800c74:	8109883a 	add	r4,r16,r4
  800c78:	20800117 	ldw	r2,4(r4)
  800c7c:	80c00217 	ldw	r3,8(r16)
  800c80:	81400317 	ldw	r5,12(r16)
  800c84:	10800054 	ori	r2,r2,1
  800c88:	20800115 	stw	r2,4(r4)
  800c8c:	28c00215 	stw	r3,8(r5)
  800c90:	19400315 	stw	r5,12(r3)
  800c94:	9009883a 	mov	r4,r18
  800c98:	08038700 	call	803870 <__malloc_unlock>
  800c9c:	80c00204 	addi	r3,r16,8
  800ca0:	003f4d06 	br	8009d8 <_malloc_r+0x50>
  800ca4:	80800204 	addi	r2,r16,8
  800ca8:	14000317 	ldw	r16,12(r2)
  800cac:	143f911e 	bne	r2,r16,800af4 <_malloc_r+0x16c>
  800cb0:	1a400084 	addi	r9,r3,2
  800cb4:	003f7306 	br	800a84 <_malloc_r+0xfc>
  800cb8:	88c00054 	ori	r3,r17,1
  800cbc:	8445883a 	add	r2,r16,r17
  800cc0:	80c00115 	stw	r3,4(r16)
  800cc4:	003fdf06 	br	800c44 <_malloc_r+0x2bc>
  800cc8:	e4000217 	ldw	r16,8(fp)
  800ccc:	00bfff04 	movi	r2,-4
  800cd0:	80c00117 	ldw	r3,4(r16)
  800cd4:	802d883a 	mov	r22,r16
  800cd8:	18aa703a 	and	r21,r3,r2
  800cdc:	ac401636 	bltu	r21,r17,800d38 <_malloc_r+0x3b0>
  800ce0:	ac49c83a 	sub	r4,r21,r17
  800ce4:	008003c4 	movi	r2,15
  800ce8:	1100130e 	bge	r2,r4,800d38 <_malloc_r+0x3b0>
  800cec:	88800054 	ori	r2,r17,1
  800cf0:	8447883a 	add	r3,r16,r17
  800cf4:	80800115 	stw	r2,4(r16)
  800cf8:	20800054 	ori	r2,r4,1
  800cfc:	18800115 	stw	r2,4(r3)
  800d00:	e0c00215 	stw	r3,8(fp)
  800d04:	9009883a 	mov	r4,r18
  800d08:	08038700 	call	803870 <__malloc_unlock>
  800d0c:	80c00204 	addi	r3,r16,8
  800d10:	003f3106 	br	8009d8 <_malloc_r+0x50>
  800d14:	39c00117 	ldw	r7,4(r7)
  800d18:	573ffe04 	addi	fp,r10,-8
  800d1c:	003fa006 	br	800ba0 <_malloc_r+0x218>
  800d20:	00801504 	movi	r2,84
  800d24:	10c06736 	bltu	r2,r3,800ec4 <_malloc_r+0x53c>
  800d28:	8804d33a 	srli	r2,r17,12
  800d2c:	11801b84 	addi	r6,r2,110
  800d30:	300490fa 	slli	r2,r6,3
  800d34:	003f4106 	br	800a3c <_malloc_r+0xb4>
  800d38:	d0a6d117 	ldw	r2,-25788(gp)
  800d3c:	d0e00317 	ldw	r3,-32756(gp)
  800d40:	053fffc4 	movi	r20,-1
  800d44:	10800404 	addi	r2,r2,16
  800d48:	88a7883a 	add	r19,r17,r2
  800d4c:	1d000326 	beq	r3,r20,800d5c <_malloc_r+0x3d4>
  800d50:	98c3ffc4 	addi	r3,r19,4095
  800d54:	00bc0004 	movi	r2,-4096
  800d58:	18a6703a 	and	r19,r3,r2
  800d5c:	9009883a 	mov	r4,r18
  800d60:	980b883a 	mov	r5,r19
  800d64:	0801b0c0 	call	801b0c <_sbrk_r>
  800d68:	1009883a 	mov	r4,r2
  800d6c:	15000426 	beq	r2,r20,800d80 <_malloc_r+0x3f8>
  800d70:	854b883a 	add	r5,r16,r21
  800d74:	1029883a 	mov	r20,r2
  800d78:	11405a2e 	bgeu	r2,r5,800ee4 <_malloc_r+0x55c>
  800d7c:	87000c26 	beq	r16,fp,800db0 <_malloc_r+0x428>
  800d80:	e4000217 	ldw	r16,8(fp)
  800d84:	80c00117 	ldw	r3,4(r16)
  800d88:	00bfff04 	movi	r2,-4
  800d8c:	1884703a 	and	r2,r3,r2
  800d90:	14400336 	bltu	r2,r17,800da0 <_malloc_r+0x418>
  800d94:	1449c83a 	sub	r4,r2,r17
  800d98:	008003c4 	movi	r2,15
  800d9c:	113fd316 	blt	r2,r4,800cec <_malloc_r+0x364>
  800da0:	9009883a 	mov	r4,r18
  800da4:	08038700 	call	803870 <__malloc_unlock>
  800da8:	0007883a 	mov	r3,zero
  800dac:	003f0a06 	br	8009d8 <_malloc_r+0x50>
  800db0:	05c02074 	movhi	r23,129
  800db4:	bde79e04 	addi	r23,r23,-24968
  800db8:	b8800017 	ldw	r2,0(r23)
  800dbc:	988d883a 	add	r6,r19,r2
  800dc0:	b9800015 	stw	r6,0(r23)
  800dc4:	d0e00317 	ldw	r3,-32756(gp)
  800dc8:	00bfffc4 	movi	r2,-1
  800dcc:	18808e26 	beq	r3,r2,801008 <_malloc_r+0x680>
  800dd0:	2145c83a 	sub	r2,r4,r5
  800dd4:	3085883a 	add	r2,r6,r2
  800dd8:	b8800015 	stw	r2,0(r23)
  800ddc:	20c001cc 	andi	r3,r4,7
  800de0:	18005f1e 	bne	r3,zero,800f60 <_malloc_r+0x5d8>
  800de4:	000b883a 	mov	r5,zero
  800de8:	a4c5883a 	add	r2,r20,r19
  800dec:	1083ffcc 	andi	r2,r2,4095
  800df0:	00c40004 	movi	r3,4096
  800df4:	1887c83a 	sub	r3,r3,r2
  800df8:	28e7883a 	add	r19,r5,r3
  800dfc:	9009883a 	mov	r4,r18
  800e00:	980b883a 	mov	r5,r19
  800e04:	0801b0c0 	call	801b0c <_sbrk_r>
  800e08:	1007883a 	mov	r3,r2
  800e0c:	00bfffc4 	movi	r2,-1
  800e10:	18807a26 	beq	r3,r2,800ffc <_malloc_r+0x674>
  800e14:	1d05c83a 	sub	r2,r3,r20
  800e18:	9885883a 	add	r2,r19,r2
  800e1c:	10c00054 	ori	r3,r2,1
  800e20:	b8800017 	ldw	r2,0(r23)
  800e24:	a021883a 	mov	r16,r20
  800e28:	a0c00115 	stw	r3,4(r20)
  800e2c:	9885883a 	add	r2,r19,r2
  800e30:	b8800015 	stw	r2,0(r23)
  800e34:	e5000215 	stw	r20,8(fp)
  800e38:	b7003626 	beq	r22,fp,800f14 <_malloc_r+0x58c>
  800e3c:	018003c4 	movi	r6,15
  800e40:	35404b36 	bltu	r6,r21,800f70 <_malloc_r+0x5e8>
  800e44:	00800044 	movi	r2,1
  800e48:	a0800115 	stw	r2,4(r20)
  800e4c:	003fcd06 	br	800d84 <_malloc_r+0x3fc>
  800e50:	2808d27a 	srli	r4,r5,9
  800e54:	2000371e 	bne	r4,zero,800f34 <_malloc_r+0x5ac>
  800e58:	2808d0fa 	srli	r4,r5,3
  800e5c:	200690fa 	slli	r3,r4,3
  800e60:	1ad1883a 	add	r8,r3,r11
  800e64:	41800217 	ldw	r6,8(r8)
  800e68:	41805b26 	beq	r8,r6,800fd8 <_malloc_r+0x650>
  800e6c:	30800117 	ldw	r2,4(r6)
  800e70:	00ffff04 	movi	r3,-4
  800e74:	10c4703a 	and	r2,r2,r3
  800e78:	2880022e 	bgeu	r5,r2,800e84 <_malloc_r+0x4fc>
  800e7c:	31800217 	ldw	r6,8(r6)
  800e80:	41bffa1e 	bne	r8,r6,800e6c <_malloc_r+0x4e4>
  800e84:	32000317 	ldw	r8,12(r6)
  800e88:	39c00117 	ldw	r7,4(r7)
  800e8c:	82000315 	stw	r8,12(r16)
  800e90:	81800215 	stw	r6,8(r16)
  800e94:	07002034 	movhi	fp,128
  800e98:	e71b0e04 	addi	fp,fp,27704
  800e9c:	34000315 	stw	r16,12(r6)
  800ea0:	44000215 	stw	r16,8(r8)
  800ea4:	003f3e06 	br	800ba0 <_malloc_r+0x218>
  800ea8:	63000044 	addi	r12,r12,1
  800eac:	608000cc 	andi	r2,r12,3
  800eb0:	10005d26 	beq	r2,zero,801028 <_malloc_r+0x6a0>
  800eb4:	18c00204 	addi	r3,r3,8
  800eb8:	003f5106 	br	800c00 <_malloc_r+0x278>
  800ebc:	8089883a 	add	r4,r16,r2
  800ec0:	003f6d06 	br	800c78 <_malloc_r+0x2f0>
  800ec4:	00805504 	movi	r2,340
  800ec8:	10c02036 	bltu	r2,r3,800f4c <_malloc_r+0x5c4>
  800ecc:	8804d3fa 	srli	r2,r17,15
  800ed0:	11801dc4 	addi	r6,r2,119
  800ed4:	300490fa 	slli	r2,r6,3
  800ed8:	003ed806 	br	800a3c <_malloc_r+0xb4>
  800edc:	48c000c4 	addi	r3,r9,3
  800ee0:	003f3106 	br	800ba8 <_malloc_r+0x220>
  800ee4:	05c02074 	movhi	r23,129
  800ee8:	bde79e04 	addi	r23,r23,-24968
  800eec:	b8800017 	ldw	r2,0(r23)
  800ef0:	988d883a 	add	r6,r19,r2
  800ef4:	b9800015 	stw	r6,0(r23)
  800ef8:	293fb21e 	bne	r5,r4,800dc4 <_malloc_r+0x43c>
  800efc:	2083ffcc 	andi	r2,r4,4095
  800f00:	103fb01e 	bne	r2,zero,800dc4 <_malloc_r+0x43c>
  800f04:	e4000217 	ldw	r16,8(fp)
  800f08:	9d45883a 	add	r2,r19,r21
  800f0c:	10800054 	ori	r2,r2,1
  800f10:	80800115 	stw	r2,4(r16)
  800f14:	b8c00017 	ldw	r3,0(r23)
  800f18:	d0a6d217 	ldw	r2,-25784(gp)
  800f1c:	10c0012e 	bgeu	r2,r3,800f24 <_malloc_r+0x59c>
  800f20:	d0e6d215 	stw	r3,-25784(gp)
  800f24:	d0a6d317 	ldw	r2,-25780(gp)
  800f28:	10ff962e 	bgeu	r2,r3,800d84 <_malloc_r+0x3fc>
  800f2c:	d0e6d315 	stw	r3,-25780(gp)
  800f30:	003f9406 	br	800d84 <_malloc_r+0x3fc>
  800f34:	00800104 	movi	r2,4
  800f38:	11001e36 	bltu	r2,r4,800fb4 <_malloc_r+0x62c>
  800f3c:	2804d1ba 	srli	r2,r5,6
  800f40:	11000e04 	addi	r4,r2,56
  800f44:	200690fa 	slli	r3,r4,3
  800f48:	003fc506 	br	800e60 <_malloc_r+0x4d8>
  800f4c:	00815504 	movi	r2,1364
  800f50:	10c01d2e 	bgeu	r2,r3,800fc8 <_malloc_r+0x640>
  800f54:	01801f84 	movi	r6,126
  800f58:	0080fc04 	movi	r2,1008
  800f5c:	003eb706 	br	800a3c <_malloc_r+0xb4>
  800f60:	00800204 	movi	r2,8
  800f64:	10cbc83a 	sub	r5,r2,r3
  800f68:	2169883a 	add	r20,r4,r5
  800f6c:	003f9e06 	br	800de8 <_malloc_r+0x460>
  800f70:	00bffe04 	movi	r2,-8
  800f74:	a93ffd04 	addi	r4,r21,-12
  800f78:	2088703a 	and	r4,r4,r2
  800f7c:	b10b883a 	add	r5,r22,r4
  800f80:	00c00144 	movi	r3,5
  800f84:	28c00215 	stw	r3,8(r5)
  800f88:	28c00115 	stw	r3,4(r5)
  800f8c:	b0800117 	ldw	r2,4(r22)
  800f90:	1080004c 	andi	r2,r2,1
  800f94:	2084b03a 	or	r2,r4,r2
  800f98:	b0800115 	stw	r2,4(r22)
  800f9c:	313fdd2e 	bgeu	r6,r4,800f14 <_malloc_r+0x58c>
  800fa0:	b1400204 	addi	r5,r22,8
  800fa4:	9009883a 	mov	r4,r18
  800fa8:	08024200 	call	802420 <_free_r>
  800fac:	e4000217 	ldw	r16,8(fp)
  800fb0:	003fd806 	br	800f14 <_malloc_r+0x58c>
  800fb4:	00800504 	movi	r2,20
  800fb8:	11001536 	bltu	r2,r4,801010 <_malloc_r+0x688>
  800fbc:	210016c4 	addi	r4,r4,91
  800fc0:	200690fa 	slli	r3,r4,3
  800fc4:	003fa606 	br	800e60 <_malloc_r+0x4d8>
  800fc8:	8804d4ba 	srli	r2,r17,18
  800fcc:	11801f04 	addi	r6,r2,124
  800fd0:	300490fa 	slli	r2,r6,3
  800fd4:	003e9906 	br	800a3c <_malloc_r+0xb4>
  800fd8:	2009d0ba 	srai	r4,r4,2
  800fdc:	01402034 	movhi	r5,128
  800fe0:	295b0e04 	addi	r5,r5,27704
  800fe4:	00c00044 	movi	r3,1
  800fe8:	28800117 	ldw	r2,4(r5)
  800fec:	1906983a 	sll	r3,r3,r4
  800ff0:	10c4b03a 	or	r2,r2,r3
  800ff4:	28800115 	stw	r2,4(r5)
  800ff8:	003fa306 	br	800e88 <_malloc_r+0x500>
  800ffc:	0027883a 	mov	r19,zero
  801000:	00c00044 	movi	r3,1
  801004:	003f8606 	br	800e20 <_malloc_r+0x498>
  801008:	d1200315 	stw	r4,-32756(gp)
  80100c:	003f7306 	br	800ddc <_malloc_r+0x454>
  801010:	00801504 	movi	r2,84
  801014:	11001936 	bltu	r2,r4,80107c <_malloc_r+0x6f4>
  801018:	2804d33a 	srli	r2,r5,12
  80101c:	11001b84 	addi	r4,r2,110
  801020:	200690fa 	slli	r3,r4,3
  801024:	003f8e06 	br	800e60 <_malloc_r+0x4d8>
  801028:	480b883a 	mov	r5,r9
  80102c:	6807883a 	mov	r3,r13
  801030:	288000cc 	andi	r2,r5,3
  801034:	18fffe04 	addi	r3,r3,-8
  801038:	297fffc4 	addi	r5,r5,-1
  80103c:	10001526 	beq	r2,zero,801094 <_malloc_r+0x70c>
  801040:	18800217 	ldw	r2,8(r3)
  801044:	10fffa26 	beq	r2,r3,801030 <_malloc_r+0x6a8>
  801048:	2109883a 	add	r4,r4,r4
  80104c:	393f1e36 	bltu	r7,r4,800cc8 <_malloc_r+0x340>
  801050:	203f1d26 	beq	r4,zero,800cc8 <_malloc_r+0x340>
  801054:	21c4703a 	and	r2,r4,r7
  801058:	10000226 	beq	r2,zero,801064 <_malloc_r+0x6dc>
  80105c:	6013883a 	mov	r9,r12
  801060:	003ee106 	br	800be8 <_malloc_r+0x260>
  801064:	2109883a 	add	r4,r4,r4
  801068:	3904703a 	and	r2,r7,r4
  80106c:	63000104 	addi	r12,r12,4
  801070:	103ffc26 	beq	r2,zero,801064 <_malloc_r+0x6dc>
  801074:	6013883a 	mov	r9,r12
  801078:	003edb06 	br	800be8 <_malloc_r+0x260>
  80107c:	00805504 	movi	r2,340
  801080:	11000836 	bltu	r2,r4,8010a4 <_malloc_r+0x71c>
  801084:	2804d3fa 	srli	r2,r5,15
  801088:	11001dc4 	addi	r4,r2,119
  80108c:	200690fa 	slli	r3,r4,3
  801090:	003f7306 	br	800e60 <_malloc_r+0x4d8>
  801094:	0104303a 	nor	r2,zero,r4
  801098:	388e703a 	and	r7,r7,r2
  80109c:	e1c00115 	stw	r7,4(fp)
  8010a0:	003fe906 	br	801048 <_malloc_r+0x6c0>
  8010a4:	00815504 	movi	r2,1364
  8010a8:	1100032e 	bgeu	r2,r4,8010b8 <_malloc_r+0x730>
  8010ac:	01001f84 	movi	r4,126
  8010b0:	00c0fc04 	movi	r3,1008
  8010b4:	003f6a06 	br	800e60 <_malloc_r+0x4d8>
  8010b8:	2804d4ba 	srli	r2,r5,18
  8010bc:	11001f04 	addi	r4,r2,124
  8010c0:	200690fa 	slli	r3,r4,3
  8010c4:	003f6606 	br	800e60 <_malloc_r+0x4d8>

008010c8 <memchr>:
  8010c8:	008000c4 	movi	r2,3
  8010cc:	29403fcc 	andi	r5,r5,255
  8010d0:	2007883a 	mov	r3,r4
  8010d4:	1180022e 	bgeu	r2,r6,8010e0 <memchr+0x18>
  8010d8:	2084703a 	and	r2,r4,r2
  8010dc:	10000b26 	beq	r2,zero,80110c <memchr+0x44>
  8010e0:	313fffc4 	addi	r4,r6,-1
  8010e4:	3000051e 	bne	r6,zero,8010fc <memchr+0x34>
  8010e8:	00002c06 	br	80119c <memchr+0xd4>
  8010ec:	213fffc4 	addi	r4,r4,-1
  8010f0:	00bfffc4 	movi	r2,-1
  8010f4:	18c00044 	addi	r3,r3,1
  8010f8:	20802826 	beq	r4,r2,80119c <memchr+0xd4>
  8010fc:	18800003 	ldbu	r2,0(r3)
  801100:	28bffa1e 	bne	r5,r2,8010ec <memchr+0x24>
  801104:	1805883a 	mov	r2,r3
  801108:	f800283a 	ret
  80110c:	0011883a 	mov	r8,zero
  801110:	0007883a 	mov	r3,zero
  801114:	01c00104 	movi	r7,4
  801118:	4004923a 	slli	r2,r8,8
  80111c:	18c00044 	addi	r3,r3,1
  801120:	1151883a 	add	r8,r2,r5
  801124:	19fffc1e 	bne	r3,r7,801118 <memchr+0x50>
  801128:	02bfbff4 	movhi	r10,65279
  80112c:	52bfbfc4 	addi	r10,r10,-257
  801130:	02602074 	movhi	r9,32897
  801134:	4a602004 	addi	r9,r9,-32640
  801138:	02c000c4 	movi	r11,3
  80113c:	20800017 	ldw	r2,0(r4)
  801140:	31bfff04 	addi	r6,r6,-4
  801144:	200f883a 	mov	r7,r4
  801148:	1204f03a 	xor	r2,r2,r8
  80114c:	1287883a 	add	r3,r2,r10
  801150:	1a46703a 	and	r3,r3,r9
  801154:	0084303a 	nor	r2,zero,r2
  801158:	10c4703a 	and	r2,r2,r3
  80115c:	10000b26 	beq	r2,zero,80118c <memchr+0xc4>
  801160:	20800003 	ldbu	r2,0(r4)
  801164:	28800f26 	beq	r5,r2,8011a4 <memchr+0xdc>
  801168:	20800043 	ldbu	r2,1(r4)
  80116c:	21c00044 	addi	r7,r4,1
  801170:	28800c26 	beq	r5,r2,8011a4 <memchr+0xdc>
  801174:	20800083 	ldbu	r2,2(r4)
  801178:	21c00084 	addi	r7,r4,2
  80117c:	28800926 	beq	r5,r2,8011a4 <memchr+0xdc>
  801180:	208000c3 	ldbu	r2,3(r4)
  801184:	21c000c4 	addi	r7,r4,3
  801188:	28800626 	beq	r5,r2,8011a4 <memchr+0xdc>
  80118c:	21000104 	addi	r4,r4,4
  801190:	59bfea36 	bltu	r11,r6,80113c <memchr+0x74>
  801194:	2007883a 	mov	r3,r4
  801198:	003fd106 	br	8010e0 <memchr+0x18>
  80119c:	0005883a 	mov	r2,zero
  8011a0:	f800283a 	ret
  8011a4:	3805883a 	mov	r2,r7
  8011a8:	f800283a 	ret

008011ac <memcpy>:
  8011ac:	01c003c4 	movi	r7,15
  8011b0:	2007883a 	mov	r3,r4
  8011b4:	3980032e 	bgeu	r7,r6,8011c4 <memcpy+0x18>
  8011b8:	2904b03a 	or	r2,r5,r4
  8011bc:	108000cc 	andi	r2,r2,3
  8011c0:	10000926 	beq	r2,zero,8011e8 <memcpy+0x3c>
  8011c4:	30000626 	beq	r6,zero,8011e0 <memcpy+0x34>
  8011c8:	30cd883a 	add	r6,r6,r3
  8011cc:	28800003 	ldbu	r2,0(r5)
  8011d0:	29400044 	addi	r5,r5,1
  8011d4:	18800005 	stb	r2,0(r3)
  8011d8:	18c00044 	addi	r3,r3,1
  8011dc:	30fffb1e 	bne	r6,r3,8011cc <memcpy+0x20>
  8011e0:	2005883a 	mov	r2,r4
  8011e4:	f800283a 	ret
  8011e8:	3811883a 	mov	r8,r7
  8011ec:	200f883a 	mov	r7,r4
  8011f0:	28c00017 	ldw	r3,0(r5)
  8011f4:	31bffc04 	addi	r6,r6,-16
  8011f8:	38c00015 	stw	r3,0(r7)
  8011fc:	28800117 	ldw	r2,4(r5)
  801200:	38800115 	stw	r2,4(r7)
  801204:	28c00217 	ldw	r3,8(r5)
  801208:	38c00215 	stw	r3,8(r7)
  80120c:	28800317 	ldw	r2,12(r5)
  801210:	29400404 	addi	r5,r5,16
  801214:	38800315 	stw	r2,12(r7)
  801218:	39c00404 	addi	r7,r7,16
  80121c:	41bff436 	bltu	r8,r6,8011f0 <memcpy+0x44>
  801220:	008000c4 	movi	r2,3
  801224:	1180072e 	bgeu	r2,r6,801244 <memcpy+0x98>
  801228:	1007883a 	mov	r3,r2
  80122c:	28800017 	ldw	r2,0(r5)
  801230:	31bfff04 	addi	r6,r6,-4
  801234:	29400104 	addi	r5,r5,4
  801238:	38800015 	stw	r2,0(r7)
  80123c:	39c00104 	addi	r7,r7,4
  801240:	19bffa36 	bltu	r3,r6,80122c <memcpy+0x80>
  801244:	3807883a 	mov	r3,r7
  801248:	003fde06 	br	8011c4 <memcpy+0x18>

0080124c <memmove>:
  80124c:	2807883a 	mov	r3,r5
  801250:	2011883a 	mov	r8,r4
  801254:	29000c2e 	bgeu	r5,r4,801288 <memmove+0x3c>
  801258:	298f883a 	add	r7,r5,r6
  80125c:	21c00a2e 	bgeu	r4,r7,801288 <memmove+0x3c>
  801260:	30000726 	beq	r6,zero,801280 <memmove+0x34>
  801264:	2187883a 	add	r3,r4,r6
  801268:	198dc83a 	sub	r6,r3,r6
  80126c:	39ffffc4 	addi	r7,r7,-1
  801270:	38800003 	ldbu	r2,0(r7)
  801274:	18ffffc4 	addi	r3,r3,-1
  801278:	18800005 	stb	r2,0(r3)
  80127c:	19bffb1e 	bne	r3,r6,80126c <memmove+0x20>
  801280:	2005883a 	mov	r2,r4
  801284:	f800283a 	ret
  801288:	01c003c4 	movi	r7,15
  80128c:	39800a36 	bltu	r7,r6,8012b8 <memmove+0x6c>
  801290:	303ffb26 	beq	r6,zero,801280 <memmove+0x34>
  801294:	400f883a 	mov	r7,r8
  801298:	320d883a 	add	r6,r6,r8
  80129c:	28800003 	ldbu	r2,0(r5)
  8012a0:	29400044 	addi	r5,r5,1
  8012a4:	38800005 	stb	r2,0(r7)
  8012a8:	39c00044 	addi	r7,r7,1
  8012ac:	39bffb1e 	bne	r7,r6,80129c <memmove+0x50>
  8012b0:	2005883a 	mov	r2,r4
  8012b4:	f800283a 	ret
  8012b8:	1904b03a 	or	r2,r3,r4
  8012bc:	108000cc 	andi	r2,r2,3
  8012c0:	103ff31e 	bne	r2,zero,801290 <memmove+0x44>
  8012c4:	3811883a 	mov	r8,r7
  8012c8:	180b883a 	mov	r5,r3
  8012cc:	200f883a 	mov	r7,r4
  8012d0:	28c00017 	ldw	r3,0(r5)
  8012d4:	31bffc04 	addi	r6,r6,-16
  8012d8:	38c00015 	stw	r3,0(r7)
  8012dc:	28800117 	ldw	r2,4(r5)
  8012e0:	38800115 	stw	r2,4(r7)
  8012e4:	28c00217 	ldw	r3,8(r5)
  8012e8:	38c00215 	stw	r3,8(r7)
  8012ec:	28800317 	ldw	r2,12(r5)
  8012f0:	29400404 	addi	r5,r5,16
  8012f4:	38800315 	stw	r2,12(r7)
  8012f8:	39c00404 	addi	r7,r7,16
  8012fc:	41bff436 	bltu	r8,r6,8012d0 <memmove+0x84>
  801300:	008000c4 	movi	r2,3
  801304:	1180072e 	bgeu	r2,r6,801324 <memmove+0xd8>
  801308:	1007883a 	mov	r3,r2
  80130c:	28800017 	ldw	r2,0(r5)
  801310:	31bfff04 	addi	r6,r6,-4
  801314:	29400104 	addi	r5,r5,4
  801318:	38800015 	stw	r2,0(r7)
  80131c:	39c00104 	addi	r7,r7,4
  801320:	19bffa36 	bltu	r3,r6,80130c <memmove+0xc0>
  801324:	3811883a 	mov	r8,r7
  801328:	003fd906 	br	801290 <memmove+0x44>

0080132c <putc>:
  80132c:	defffc04 	addi	sp,sp,-16
  801330:	dc800215 	stw	r18,8(sp)
  801334:	04802074 	movhi	r18,129
  801338:	94a0c304 	addi	r18,r18,-31988
  80133c:	90c00017 	ldw	r3,0(r18)
  801340:	dc400115 	stw	r17,4(sp)
  801344:	dc000015 	stw	r16,0(sp)
  801348:	dfc00315 	stw	ra,12(sp)
  80134c:	2023883a 	mov	r17,r4
  801350:	2821883a 	mov	r16,r5
  801354:	18000226 	beq	r3,zero,801360 <putc+0x34>
  801358:	18800e17 	ldw	r2,56(r3)
  80135c:	10001126 	beq	r2,zero,8013a4 <putc+0x78>
  801360:	80800217 	ldw	r2,8(r16)
  801364:	10ffffc4 	addi	r3,r2,-1
  801368:	80c00215 	stw	r3,8(r16)
  80136c:	18001316 	blt	r3,zero,8013bc <putc+0x90>
  801370:	80800017 	ldw	r2,0(r16)
  801374:	14400005 	stb	r17,0(r2)
  801378:	80c00017 	ldw	r3,0(r16)
  80137c:	18800044 	addi	r2,r3,1
  801380:	18c00003 	ldbu	r3,0(r3)
  801384:	80800015 	stw	r2,0(r16)
  801388:	1805883a 	mov	r2,r3
  80138c:	dfc00317 	ldw	ra,12(sp)
  801390:	dc800217 	ldw	r18,8(sp)
  801394:	dc400117 	ldw	r17,4(sp)
  801398:	dc000017 	ldw	r16,0(sp)
  80139c:	dec00404 	addi	sp,sp,16
  8013a0:	f800283a 	ret
  8013a4:	1809883a 	mov	r4,r3
  8013a8:	080209c0 	call	80209c <__sinit>
  8013ac:	80800217 	ldw	r2,8(r16)
  8013b0:	10ffffc4 	addi	r3,r2,-1
  8013b4:	80c00215 	stw	r3,8(r16)
  8013b8:	183fed0e 	bge	r3,zero,801370 <putc+0x44>
  8013bc:	80800617 	ldw	r2,24(r16)
  8013c0:	18800f16 	blt	r3,r2,801400 <putc+0xd4>
  8013c4:	80800017 	ldw	r2,0(r16)
  8013c8:	14400005 	stb	r17,0(r2)
  8013cc:	81000017 	ldw	r4,0(r16)
  8013d0:	00800284 	movi	r2,10
  8013d4:	20c00003 	ldbu	r3,0(r4)
  8013d8:	18801226 	beq	r3,r2,801424 <putc+0xf8>
  8013dc:	20800044 	addi	r2,r4,1
  8013e0:	80800015 	stw	r2,0(r16)
  8013e4:	1805883a 	mov	r2,r3
  8013e8:	dfc00317 	ldw	ra,12(sp)
  8013ec:	dc800217 	ldw	r18,8(sp)
  8013f0:	dc400117 	ldw	r17,4(sp)
  8013f4:	dc000017 	ldw	r16,0(sp)
  8013f8:	dec00404 	addi	sp,sp,16
  8013fc:	f800283a 	ret
  801400:	91000017 	ldw	r4,0(r18)
  801404:	880b883a 	mov	r5,r17
  801408:	800d883a 	mov	r6,r16
  80140c:	dfc00317 	ldw	ra,12(sp)
  801410:	dc800217 	ldw	r18,8(sp)
  801414:	dc400117 	ldw	r17,4(sp)
  801418:	dc000017 	ldw	r16,0(sp)
  80141c:	dec00404 	addi	sp,sp,16
  801420:	0801b7c1 	jmpi	801b7c <__swbuf_r>
  801424:	91000017 	ldw	r4,0(r18)
  801428:	180b883a 	mov	r5,r3
  80142c:	003ff606 	br	801408 <putc+0xdc>

00801430 <_putc_r>:
  801430:	defffc04 	addi	sp,sp,-16
  801434:	dc400215 	stw	r17,8(sp)
  801438:	dc000115 	stw	r16,4(sp)
  80143c:	dfc00315 	stw	ra,12(sp)
  801440:	2021883a 	mov	r16,r4
  801444:	2823883a 	mov	r17,r5
  801448:	20000226 	beq	r4,zero,801454 <_putc_r+0x24>
  80144c:	20800e17 	ldw	r2,56(r4)
  801450:	10001026 	beq	r2,zero,801494 <_putc_r+0x64>
  801454:	30800217 	ldw	r2,8(r6)
  801458:	10ffffc4 	addi	r3,r2,-1
  80145c:	30c00215 	stw	r3,8(r6)
  801460:	18001316 	blt	r3,zero,8014b0 <_putc_r+0x80>
  801464:	30800017 	ldw	r2,0(r6)
  801468:	14400005 	stb	r17,0(r2)
  80146c:	30c00017 	ldw	r3,0(r6)
  801470:	18800044 	addi	r2,r3,1
  801474:	18c00003 	ldbu	r3,0(r3)
  801478:	30800015 	stw	r2,0(r6)
  80147c:	1805883a 	mov	r2,r3
  801480:	dfc00317 	ldw	ra,12(sp)
  801484:	dc400217 	ldw	r17,8(sp)
  801488:	dc000117 	ldw	r16,4(sp)
  80148c:	dec00404 	addi	sp,sp,16
  801490:	f800283a 	ret
  801494:	d9800015 	stw	r6,0(sp)
  801498:	080209c0 	call	80209c <__sinit>
  80149c:	d9800017 	ldw	r6,0(sp)
  8014a0:	30800217 	ldw	r2,8(r6)
  8014a4:	10ffffc4 	addi	r3,r2,-1
  8014a8:	30c00215 	stw	r3,8(r6)
  8014ac:	183fed0e 	bge	r3,zero,801464 <_putc_r+0x34>
  8014b0:	30800617 	ldw	r2,24(r6)
  8014b4:	18800e16 	blt	r3,r2,8014f0 <_putc_r+0xc0>
  8014b8:	30800017 	ldw	r2,0(r6)
  8014bc:	14400005 	stb	r17,0(r2)
  8014c0:	31000017 	ldw	r4,0(r6)
  8014c4:	00800284 	movi	r2,10
  8014c8:	20c00003 	ldbu	r3,0(r4)
  8014cc:	18800f26 	beq	r3,r2,80150c <_putc_r+0xdc>
  8014d0:	20800044 	addi	r2,r4,1
  8014d4:	30800015 	stw	r2,0(r6)
  8014d8:	1805883a 	mov	r2,r3
  8014dc:	dfc00317 	ldw	ra,12(sp)
  8014e0:	dc400217 	ldw	r17,8(sp)
  8014e4:	dc000117 	ldw	r16,4(sp)
  8014e8:	dec00404 	addi	sp,sp,16
  8014ec:	f800283a 	ret
  8014f0:	8009883a 	mov	r4,r16
  8014f4:	880b883a 	mov	r5,r17
  8014f8:	dfc00317 	ldw	ra,12(sp)
  8014fc:	dc400217 	ldw	r17,8(sp)
  801500:	dc000117 	ldw	r16,4(sp)
  801504:	dec00404 	addi	sp,sp,16
  801508:	0801b7c1 	jmpi	801b7c <__swbuf_r>
  80150c:	8009883a 	mov	r4,r16
  801510:	180b883a 	mov	r5,r3
  801514:	003ff806 	br	8014f8 <_putc_r+0xc8>

00801518 <_realloc_r>:
  801518:	defff404 	addi	sp,sp,-48
  80151c:	dd800815 	stw	r22,32(sp)
  801520:	dc800415 	stw	r18,16(sp)
  801524:	dc400315 	stw	r17,12(sp)
  801528:	dfc00b15 	stw	ra,44(sp)
  80152c:	df000a15 	stw	fp,40(sp)
  801530:	ddc00915 	stw	r23,36(sp)
  801534:	dd400715 	stw	r21,28(sp)
  801538:	dd000615 	stw	r20,24(sp)
  80153c:	dcc00515 	stw	r19,20(sp)
  801540:	dc000215 	stw	r16,8(sp)
  801544:	2825883a 	mov	r18,r5
  801548:	3023883a 	mov	r17,r6
  80154c:	202d883a 	mov	r22,r4
  801550:	2800c926 	beq	r5,zero,801878 <_realloc_r+0x360>
  801554:	08038500 	call	803850 <__malloc_lock>
  801558:	943ffe04 	addi	r16,r18,-8
  80155c:	88c002c4 	addi	r3,r17,11
  801560:	00800584 	movi	r2,22
  801564:	82000117 	ldw	r8,4(r16)
  801568:	10c01b2e 	bgeu	r2,r3,8015d8 <_realloc_r+0xc0>
  80156c:	00bffe04 	movi	r2,-8
  801570:	188e703a 	and	r7,r3,r2
  801574:	3839883a 	mov	fp,r7
  801578:	38001a16 	blt	r7,zero,8015e4 <_realloc_r+0xcc>
  80157c:	e4401936 	bltu	fp,r17,8015e4 <_realloc_r+0xcc>
  801580:	013fff04 	movi	r4,-4
  801584:	4126703a 	and	r19,r8,r4
  801588:	99c02616 	blt	r19,r7,801624 <_realloc_r+0x10c>
  80158c:	802b883a 	mov	r21,r16
  801590:	9829883a 	mov	r20,r19
  801594:	84000204 	addi	r16,r16,8
  801598:	a80f883a 	mov	r7,r21
  80159c:	a70dc83a 	sub	r6,r20,fp
  8015a0:	008003c4 	movi	r2,15
  8015a4:	1180c136 	bltu	r2,r6,8018ac <_realloc_r+0x394>
  8015a8:	38800117 	ldw	r2,4(r7)
  8015ac:	a549883a 	add	r4,r20,r21
  8015b0:	1080004c 	andi	r2,r2,1
  8015b4:	a084b03a 	or	r2,r20,r2
  8015b8:	38800115 	stw	r2,4(r7)
  8015bc:	20c00117 	ldw	r3,4(r4)
  8015c0:	18c00054 	ori	r3,r3,1
  8015c4:	20c00115 	stw	r3,4(r4)
  8015c8:	b009883a 	mov	r4,r22
  8015cc:	08038700 	call	803870 <__malloc_unlock>
  8015d0:	8023883a 	mov	r17,r16
  8015d4:	00000606 	br	8015f0 <_realloc_r+0xd8>
  8015d8:	01c00404 	movi	r7,16
  8015dc:	3839883a 	mov	fp,r7
  8015e0:	e47fe72e 	bgeu	fp,r17,801580 <_realloc_r+0x68>
  8015e4:	00800304 	movi	r2,12
  8015e8:	0023883a 	mov	r17,zero
  8015ec:	b0800015 	stw	r2,0(r22)
  8015f0:	8805883a 	mov	r2,r17
  8015f4:	dfc00b17 	ldw	ra,44(sp)
  8015f8:	df000a17 	ldw	fp,40(sp)
  8015fc:	ddc00917 	ldw	r23,36(sp)
  801600:	dd800817 	ldw	r22,32(sp)
  801604:	dd400717 	ldw	r21,28(sp)
  801608:	dd000617 	ldw	r20,24(sp)
  80160c:	dcc00517 	ldw	r19,20(sp)
  801610:	dc800417 	ldw	r18,16(sp)
  801614:	dc400317 	ldw	r17,12(sp)
  801618:	dc000217 	ldw	r16,8(sp)
  80161c:	dec00c04 	addi	sp,sp,48
  801620:	f800283a 	ret
  801624:	00802034 	movhi	r2,128
  801628:	109b0e04 	addi	r2,r2,27704
  80162c:	12400217 	ldw	r9,8(r2)
  801630:	84cd883a 	add	r6,r16,r19
  801634:	802b883a 	mov	r21,r16
  801638:	3240b926 	beq	r6,r9,801920 <_realloc_r+0x408>
  80163c:	31400117 	ldw	r5,4(r6)
  801640:	00bfff84 	movi	r2,-2
  801644:	2884703a 	and	r2,r5,r2
  801648:	1185883a 	add	r2,r2,r6
  80164c:	10c00117 	ldw	r3,4(r2)
  801650:	18c0004c 	andi	r3,r3,1
  801654:	1807003a 	cmpeq	r3,r3,zero
  801658:	1800a326 	beq	r3,zero,8018e8 <_realloc_r+0x3d0>
  80165c:	2908703a 	and	r4,r5,r4
  801660:	9929883a 	add	r20,r19,r4
  801664:	a1c0a30e 	bge	r20,r7,8018f4 <_realloc_r+0x3dc>
  801668:	4080004c 	andi	r2,r8,1
  80166c:	1000551e 	bne	r2,zero,8017c4 <_realloc_r+0x2ac>
  801670:	80800017 	ldw	r2,0(r16)
  801674:	80afc83a 	sub	r23,r16,r2
  801678:	b8c00117 	ldw	r3,4(r23)
  80167c:	00bfff04 	movi	r2,-4
  801680:	1884703a 	and	r2,r3,r2
  801684:	30002e26 	beq	r6,zero,801740 <_realloc_r+0x228>
  801688:	3240b926 	beq	r6,r9,801970 <_realloc_r+0x458>
  80168c:	98a9883a 	add	r20,r19,r2
  801690:	2509883a 	add	r4,r4,r20
  801694:	d9000015 	stw	r4,0(sp)
  801698:	21c02a16 	blt	r4,r7,801744 <_realloc_r+0x22c>
  80169c:	30800317 	ldw	r2,12(r6)
  8016a0:	30c00217 	ldw	r3,8(r6)
  8016a4:	01400904 	movi	r5,36
  8016a8:	99bfff04 	addi	r6,r19,-4
  8016ac:	18800315 	stw	r2,12(r3)
  8016b0:	10c00215 	stw	r3,8(r2)
  8016b4:	b9000317 	ldw	r4,12(r23)
  8016b8:	b8800217 	ldw	r2,8(r23)
  8016bc:	b82b883a 	mov	r21,r23
  8016c0:	bc000204 	addi	r16,r23,8
  8016c4:	20800215 	stw	r2,8(r4)
  8016c8:	11000315 	stw	r4,12(r2)
  8016cc:	2980e436 	bltu	r5,r6,801a60 <_realloc_r+0x548>
  8016d0:	008004c4 	movi	r2,19
  8016d4:	9009883a 	mov	r4,r18
  8016d8:	8011883a 	mov	r8,r16
  8016dc:	11800f2e 	bgeu	r2,r6,80171c <_realloc_r+0x204>
  8016e0:	90800017 	ldw	r2,0(r18)
  8016e4:	ba000404 	addi	r8,r23,16
  8016e8:	91000204 	addi	r4,r18,8
  8016ec:	b8800215 	stw	r2,8(r23)
  8016f0:	90c00117 	ldw	r3,4(r18)
  8016f4:	008006c4 	movi	r2,27
  8016f8:	b8c00315 	stw	r3,12(r23)
  8016fc:	1180072e 	bgeu	r2,r6,80171c <_realloc_r+0x204>
  801700:	90c00217 	ldw	r3,8(r18)
  801704:	ba000604 	addi	r8,r23,24
  801708:	91000404 	addi	r4,r18,16
  80170c:	b8c00415 	stw	r3,16(r23)
  801710:	90800317 	ldw	r2,12(r18)
  801714:	b8800515 	stw	r2,20(r23)
  801718:	3140e726 	beq	r6,r5,801ab8 <_realloc_r+0x5a0>
  80171c:	20800017 	ldw	r2,0(r4)
  801720:	dd000017 	ldw	r20,0(sp)
  801724:	b80f883a 	mov	r7,r23
  801728:	40800015 	stw	r2,0(r8)
  80172c:	20c00117 	ldw	r3,4(r4)
  801730:	40c00115 	stw	r3,4(r8)
  801734:	20800217 	ldw	r2,8(r4)
  801738:	40800215 	stw	r2,8(r8)
  80173c:	003f9706 	br	80159c <_realloc_r+0x84>
  801740:	98a9883a 	add	r20,r19,r2
  801744:	a1c01f16 	blt	r20,r7,8017c4 <_realloc_r+0x2ac>
  801748:	b8c00317 	ldw	r3,12(r23)
  80174c:	b8800217 	ldw	r2,8(r23)
  801750:	99bfff04 	addi	r6,r19,-4
  801754:	01400904 	movi	r5,36
  801758:	b82b883a 	mov	r21,r23
  80175c:	18800215 	stw	r2,8(r3)
  801760:	10c00315 	stw	r3,12(r2)
  801764:	bc000204 	addi	r16,r23,8
  801768:	2980c336 	bltu	r5,r6,801a78 <_realloc_r+0x560>
  80176c:	008004c4 	movi	r2,19
  801770:	9009883a 	mov	r4,r18
  801774:	8011883a 	mov	r8,r16
  801778:	11800f2e 	bgeu	r2,r6,8017b8 <_realloc_r+0x2a0>
  80177c:	90800017 	ldw	r2,0(r18)
  801780:	ba000404 	addi	r8,r23,16
  801784:	91000204 	addi	r4,r18,8
  801788:	b8800215 	stw	r2,8(r23)
  80178c:	90c00117 	ldw	r3,4(r18)
  801790:	008006c4 	movi	r2,27
  801794:	b8c00315 	stw	r3,12(r23)
  801798:	1180072e 	bgeu	r2,r6,8017b8 <_realloc_r+0x2a0>
  80179c:	90c00217 	ldw	r3,8(r18)
  8017a0:	ba000604 	addi	r8,r23,24
  8017a4:	91000404 	addi	r4,r18,16
  8017a8:	b8c00415 	stw	r3,16(r23)
  8017ac:	90800317 	ldw	r2,12(r18)
  8017b0:	b8800515 	stw	r2,20(r23)
  8017b4:	3140c726 	beq	r6,r5,801ad4 <_realloc_r+0x5bc>
  8017b8:	20800017 	ldw	r2,0(r4)
  8017bc:	b80f883a 	mov	r7,r23
  8017c0:	003fd906 	br	801728 <_realloc_r+0x210>
  8017c4:	880b883a 	mov	r5,r17
  8017c8:	b009883a 	mov	r4,r22
  8017cc:	08009880 	call	800988 <_malloc_r>
  8017d0:	1023883a 	mov	r17,r2
  8017d4:	10002526 	beq	r2,zero,80186c <_realloc_r+0x354>
  8017d8:	80800117 	ldw	r2,4(r16)
  8017dc:	00ffff84 	movi	r3,-2
  8017e0:	893ffe04 	addi	r4,r17,-8
  8017e4:	10c4703a 	and	r2,r2,r3
  8017e8:	8085883a 	add	r2,r16,r2
  8017ec:	20809526 	beq	r4,r2,801a44 <_realloc_r+0x52c>
  8017f0:	99bfff04 	addi	r6,r19,-4
  8017f4:	01c00904 	movi	r7,36
  8017f8:	39804536 	bltu	r7,r6,801910 <_realloc_r+0x3f8>
  8017fc:	008004c4 	movi	r2,19
  801800:	9009883a 	mov	r4,r18
  801804:	880b883a 	mov	r5,r17
  801808:	11800f2e 	bgeu	r2,r6,801848 <_realloc_r+0x330>
  80180c:	90800017 	ldw	r2,0(r18)
  801810:	89400204 	addi	r5,r17,8
  801814:	91000204 	addi	r4,r18,8
  801818:	88800015 	stw	r2,0(r17)
  80181c:	90c00117 	ldw	r3,4(r18)
  801820:	008006c4 	movi	r2,27
  801824:	88c00115 	stw	r3,4(r17)
  801828:	1180072e 	bgeu	r2,r6,801848 <_realloc_r+0x330>
  80182c:	90c00217 	ldw	r3,8(r18)
  801830:	89400404 	addi	r5,r17,16
  801834:	91000404 	addi	r4,r18,16
  801838:	88c00215 	stw	r3,8(r17)
  80183c:	90800317 	ldw	r2,12(r18)
  801840:	88800315 	stw	r2,12(r17)
  801844:	31c09126 	beq	r6,r7,801a8c <_realloc_r+0x574>
  801848:	20800017 	ldw	r2,0(r4)
  80184c:	28800015 	stw	r2,0(r5)
  801850:	20c00117 	ldw	r3,4(r4)
  801854:	28c00115 	stw	r3,4(r5)
  801858:	20800217 	ldw	r2,8(r4)
  80185c:	28800215 	stw	r2,8(r5)
  801860:	900b883a 	mov	r5,r18
  801864:	b009883a 	mov	r4,r22
  801868:	08024200 	call	802420 <_free_r>
  80186c:	b009883a 	mov	r4,r22
  801870:	08038700 	call	803870 <__malloc_unlock>
  801874:	003f5e06 	br	8015f0 <_realloc_r+0xd8>
  801878:	300b883a 	mov	r5,r6
  80187c:	dfc00b17 	ldw	ra,44(sp)
  801880:	df000a17 	ldw	fp,40(sp)
  801884:	ddc00917 	ldw	r23,36(sp)
  801888:	dd800817 	ldw	r22,32(sp)
  80188c:	dd400717 	ldw	r21,28(sp)
  801890:	dd000617 	ldw	r20,24(sp)
  801894:	dcc00517 	ldw	r19,20(sp)
  801898:	dc800417 	ldw	r18,16(sp)
  80189c:	dc400317 	ldw	r17,12(sp)
  8018a0:	dc000217 	ldw	r16,8(sp)
  8018a4:	dec00c04 	addi	sp,sp,48
  8018a8:	08009881 	jmpi	800988 <_malloc_r>
  8018ac:	38800117 	ldw	r2,4(r7)
  8018b0:	e54b883a 	add	r5,fp,r21
  8018b4:	31000054 	ori	r4,r6,1
  8018b8:	1080004c 	andi	r2,r2,1
  8018bc:	1704b03a 	or	r2,r2,fp
  8018c0:	38800115 	stw	r2,4(r7)
  8018c4:	29000115 	stw	r4,4(r5)
  8018c8:	2987883a 	add	r3,r5,r6
  8018cc:	18800117 	ldw	r2,4(r3)
  8018d0:	29400204 	addi	r5,r5,8
  8018d4:	b009883a 	mov	r4,r22
  8018d8:	10800054 	ori	r2,r2,1
  8018dc:	18800115 	stw	r2,4(r3)
  8018e0:	08024200 	call	802420 <_free_r>
  8018e4:	003f3806 	br	8015c8 <_realloc_r+0xb0>
  8018e8:	000d883a 	mov	r6,zero
  8018ec:	0009883a 	mov	r4,zero
  8018f0:	003f5d06 	br	801668 <_realloc_r+0x150>
  8018f4:	30c00217 	ldw	r3,8(r6)
  8018f8:	30800317 	ldw	r2,12(r6)
  8018fc:	800f883a 	mov	r7,r16
  801900:	84000204 	addi	r16,r16,8
  801904:	10c00215 	stw	r3,8(r2)
  801908:	18800315 	stw	r2,12(r3)
  80190c:	003f2306 	br	80159c <_realloc_r+0x84>
  801910:	8809883a 	mov	r4,r17
  801914:	900b883a 	mov	r5,r18
  801918:	080124c0 	call	80124c <memmove>
  80191c:	003fd006 	br	801860 <_realloc_r+0x348>
  801920:	30800117 	ldw	r2,4(r6)
  801924:	e0c00404 	addi	r3,fp,16
  801928:	1108703a 	and	r4,r2,r4
  80192c:	9905883a 	add	r2,r19,r4
  801930:	10ff4d16 	blt	r2,r3,801668 <_realloc_r+0x150>
  801934:	1705c83a 	sub	r2,r2,fp
  801938:	870b883a 	add	r5,r16,fp
  80193c:	10800054 	ori	r2,r2,1
  801940:	28800115 	stw	r2,4(r5)
  801944:	80c00117 	ldw	r3,4(r16)
  801948:	00802034 	movhi	r2,128
  80194c:	109b0e04 	addi	r2,r2,27704
  801950:	b009883a 	mov	r4,r22
  801954:	18c0004c 	andi	r3,r3,1
  801958:	e0c6b03a 	or	r3,fp,r3
  80195c:	11400215 	stw	r5,8(r2)
  801960:	80c00115 	stw	r3,4(r16)
  801964:	08038700 	call	803870 <__malloc_unlock>
  801968:	84400204 	addi	r17,r16,8
  80196c:	003f2006 	br	8015f0 <_realloc_r+0xd8>
  801970:	98a9883a 	add	r20,r19,r2
  801974:	2509883a 	add	r4,r4,r20
  801978:	e0800404 	addi	r2,fp,16
  80197c:	d9000115 	stw	r4,4(sp)
  801980:	20bf7016 	blt	r4,r2,801744 <_realloc_r+0x22c>
  801984:	b8c00317 	ldw	r3,12(r23)
  801988:	b8800217 	ldw	r2,8(r23)
  80198c:	99bfff04 	addi	r6,r19,-4
  801990:	01400904 	movi	r5,36
  801994:	18800215 	stw	r2,8(r3)
  801998:	10c00315 	stw	r3,12(r2)
  80199c:	bc400204 	addi	r17,r23,8
  8019a0:	29804136 	bltu	r5,r6,801aa8 <_realloc_r+0x590>
  8019a4:	008004c4 	movi	r2,19
  8019a8:	9009883a 	mov	r4,r18
  8019ac:	880f883a 	mov	r7,r17
  8019b0:	11800f2e 	bgeu	r2,r6,8019f0 <_realloc_r+0x4d8>
  8019b4:	90800017 	ldw	r2,0(r18)
  8019b8:	b9c00404 	addi	r7,r23,16
  8019bc:	91000204 	addi	r4,r18,8
  8019c0:	b8800215 	stw	r2,8(r23)
  8019c4:	90c00117 	ldw	r3,4(r18)
  8019c8:	008006c4 	movi	r2,27
  8019cc:	b8c00315 	stw	r3,12(r23)
  8019d0:	1180072e 	bgeu	r2,r6,8019f0 <_realloc_r+0x4d8>
  8019d4:	90c00217 	ldw	r3,8(r18)
  8019d8:	b9c00604 	addi	r7,r23,24
  8019dc:	91000404 	addi	r4,r18,16
  8019e0:	b8c00415 	stw	r3,16(r23)
  8019e4:	90800317 	ldw	r2,12(r18)
  8019e8:	b8800515 	stw	r2,20(r23)
  8019ec:	31404026 	beq	r6,r5,801af0 <_realloc_r+0x5d8>
  8019f0:	20800017 	ldw	r2,0(r4)
  8019f4:	38800015 	stw	r2,0(r7)
  8019f8:	20c00117 	ldw	r3,4(r4)
  8019fc:	38c00115 	stw	r3,4(r7)
  801a00:	20800217 	ldw	r2,8(r4)
  801a04:	38800215 	stw	r2,8(r7)
  801a08:	d8c00117 	ldw	r3,4(sp)
  801a0c:	bf0b883a 	add	r5,r23,fp
  801a10:	b009883a 	mov	r4,r22
  801a14:	1f05c83a 	sub	r2,r3,fp
  801a18:	10800054 	ori	r2,r2,1
  801a1c:	28800115 	stw	r2,4(r5)
  801a20:	b8c00117 	ldw	r3,4(r23)
  801a24:	00802034 	movhi	r2,128
  801a28:	109b0e04 	addi	r2,r2,27704
  801a2c:	11400215 	stw	r5,8(r2)
  801a30:	18c0004c 	andi	r3,r3,1
  801a34:	e0c6b03a 	or	r3,fp,r3
  801a38:	b8c00115 	stw	r3,4(r23)
  801a3c:	08038700 	call	803870 <__malloc_unlock>
  801a40:	003eeb06 	br	8015f0 <_realloc_r+0xd8>
  801a44:	20800117 	ldw	r2,4(r4)
  801a48:	00ffff04 	movi	r3,-4
  801a4c:	800f883a 	mov	r7,r16
  801a50:	10c4703a 	and	r2,r2,r3
  801a54:	98a9883a 	add	r20,r19,r2
  801a58:	84000204 	addi	r16,r16,8
  801a5c:	003ecf06 	br	80159c <_realloc_r+0x84>
  801a60:	900b883a 	mov	r5,r18
  801a64:	8009883a 	mov	r4,r16
  801a68:	080124c0 	call	80124c <memmove>
  801a6c:	dd000017 	ldw	r20,0(sp)
  801a70:	b80f883a 	mov	r7,r23
  801a74:	003ec906 	br	80159c <_realloc_r+0x84>
  801a78:	900b883a 	mov	r5,r18
  801a7c:	8009883a 	mov	r4,r16
  801a80:	080124c0 	call	80124c <memmove>
  801a84:	b80f883a 	mov	r7,r23
  801a88:	003ec406 	br	80159c <_realloc_r+0x84>
  801a8c:	90c00417 	ldw	r3,16(r18)
  801a90:	89400604 	addi	r5,r17,24
  801a94:	91000604 	addi	r4,r18,24
  801a98:	88c00415 	stw	r3,16(r17)
  801a9c:	90800517 	ldw	r2,20(r18)
  801aa0:	88800515 	stw	r2,20(r17)
  801aa4:	003f6806 	br	801848 <_realloc_r+0x330>
  801aa8:	900b883a 	mov	r5,r18
  801aac:	8809883a 	mov	r4,r17
  801ab0:	080124c0 	call	80124c <memmove>
  801ab4:	003fd406 	br	801a08 <_realloc_r+0x4f0>
  801ab8:	90c00417 	ldw	r3,16(r18)
  801abc:	91000604 	addi	r4,r18,24
  801ac0:	ba000804 	addi	r8,r23,32
  801ac4:	b8c00615 	stw	r3,24(r23)
  801ac8:	90800517 	ldw	r2,20(r18)
  801acc:	b8800715 	stw	r2,28(r23)
  801ad0:	003f1206 	br	80171c <_realloc_r+0x204>
  801ad4:	90c00417 	ldw	r3,16(r18)
  801ad8:	91000604 	addi	r4,r18,24
  801adc:	ba000804 	addi	r8,r23,32
  801ae0:	b8c00615 	stw	r3,24(r23)
  801ae4:	90800517 	ldw	r2,20(r18)
  801ae8:	b8800715 	stw	r2,28(r23)
  801aec:	003f3206 	br	8017b8 <_realloc_r+0x2a0>
  801af0:	90c00417 	ldw	r3,16(r18)
  801af4:	91000604 	addi	r4,r18,24
  801af8:	b9c00804 	addi	r7,r23,32
  801afc:	b8c00615 	stw	r3,24(r23)
  801b00:	90800517 	ldw	r2,20(r18)
  801b04:	b8800715 	stw	r2,28(r23)
  801b08:	003fb906 	br	8019f0 <_realloc_r+0x4d8>

00801b0c <_sbrk_r>:
  801b0c:	defffd04 	addi	sp,sp,-12
  801b10:	dc000015 	stw	r16,0(sp)
  801b14:	04002074 	movhi	r16,129
  801b18:	84279704 	addi	r16,r16,-24996
  801b1c:	dc400115 	stw	r17,4(sp)
  801b20:	80000015 	stw	zero,0(r16)
  801b24:	2023883a 	mov	r17,r4
  801b28:	2809883a 	mov	r4,r5
  801b2c:	dfc00215 	stw	ra,8(sp)
  801b30:	0803a700 	call	803a70 <sbrk>
  801b34:	1007883a 	mov	r3,r2
  801b38:	00bfffc4 	movi	r2,-1
  801b3c:	18800626 	beq	r3,r2,801b58 <_sbrk_r+0x4c>
  801b40:	1805883a 	mov	r2,r3
  801b44:	dfc00217 	ldw	ra,8(sp)
  801b48:	dc400117 	ldw	r17,4(sp)
  801b4c:	dc000017 	ldw	r16,0(sp)
  801b50:	dec00304 	addi	sp,sp,12
  801b54:	f800283a 	ret
  801b58:	80800017 	ldw	r2,0(r16)
  801b5c:	103ff826 	beq	r2,zero,801b40 <_sbrk_r+0x34>
  801b60:	88800015 	stw	r2,0(r17)
  801b64:	1805883a 	mov	r2,r3
  801b68:	dfc00217 	ldw	ra,8(sp)
  801b6c:	dc400117 	ldw	r17,4(sp)
  801b70:	dc000017 	ldw	r16,0(sp)
  801b74:	dec00304 	addi	sp,sp,12
  801b78:	f800283a 	ret

00801b7c <__swbuf_r>:
  801b7c:	defffc04 	addi	sp,sp,-16
  801b80:	dc400215 	stw	r17,8(sp)
  801b84:	dc000115 	stw	r16,4(sp)
  801b88:	dfc00315 	stw	ra,12(sp)
  801b8c:	2023883a 	mov	r17,r4
  801b90:	2821883a 	mov	r16,r5
  801b94:	20000226 	beq	r4,zero,801ba0 <__swbuf_r+0x24>
  801b98:	20800e17 	ldw	r2,56(r4)
  801b9c:	10002f26 	beq	r2,zero,801c5c <__swbuf_r+0xe0>
  801ba0:	3080030b 	ldhu	r2,12(r6)
  801ba4:	30c00617 	ldw	r3,24(r6)
  801ba8:	1080020c 	andi	r2,r2,8
  801bac:	30c00215 	stw	r3,8(r6)
  801bb0:	10002226 	beq	r2,zero,801c3c <__swbuf_r+0xc0>
  801bb4:	30c00417 	ldw	r3,16(r6)
  801bb8:	18002026 	beq	r3,zero,801c3c <__swbuf_r+0xc0>
  801bbc:	31000017 	ldw	r4,0(r6)
  801bc0:	30800517 	ldw	r2,20(r6)
  801bc4:	20c7c83a 	sub	r3,r4,r3
  801bc8:	18802f0e 	bge	r3,r2,801c88 <__swbuf_r+0x10c>
  801bcc:	19400044 	addi	r5,r3,1
  801bd0:	30800217 	ldw	r2,8(r6)
  801bd4:	84003fcc 	andi	r16,r16,255
  801bd8:	20c00044 	addi	r3,r4,1
  801bdc:	10bfffc4 	addi	r2,r2,-1
  801be0:	30800215 	stw	r2,8(r6)
  801be4:	24000005 	stb	r16,0(r4)
  801be8:	30800517 	ldw	r2,20(r6)
  801bec:	30c00015 	stw	r3,0(r6)
  801bf0:	11400c26 	beq	r2,r5,801c24 <__swbuf_r+0xa8>
  801bf4:	3080030b 	ldhu	r2,12(r6)
  801bf8:	1080004c 	andi	r2,r2,1
  801bfc:	1005003a 	cmpeq	r2,r2,zero
  801c00:	10000626 	beq	r2,zero,801c1c <__swbuf_r+0xa0>
  801c04:	8005883a 	mov	r2,r16
  801c08:	dfc00317 	ldw	ra,12(sp)
  801c0c:	dc400217 	ldw	r17,8(sp)
  801c10:	dc000117 	ldw	r16,4(sp)
  801c14:	dec00404 	addi	sp,sp,16
  801c18:	f800283a 	ret
  801c1c:	00800284 	movi	r2,10
  801c20:	80bff81e 	bne	r16,r2,801c04 <__swbuf_r+0x88>
  801c24:	8809883a 	mov	r4,r17
  801c28:	300b883a 	mov	r5,r6
  801c2c:	0801e040 	call	801e04 <_fflush_r>
  801c30:	103ff426 	beq	r2,zero,801c04 <__swbuf_r+0x88>
  801c34:	043fffc4 	movi	r16,-1
  801c38:	003ff206 	br	801c04 <__swbuf_r+0x88>
  801c3c:	300b883a 	mov	r5,r6
  801c40:	8809883a 	mov	r4,r17
  801c44:	d9800015 	stw	r6,0(sp)
  801c48:	0801cc80 	call	801cc8 <__swsetup_r>
  801c4c:	d9800017 	ldw	r6,0(sp)
  801c50:	1000061e 	bne	r2,zero,801c6c <__swbuf_r+0xf0>
  801c54:	30c00417 	ldw	r3,16(r6)
  801c58:	003fd806 	br	801bbc <__swbuf_r+0x40>
  801c5c:	d9800015 	stw	r6,0(sp)
  801c60:	080209c0 	call	80209c <__sinit>
  801c64:	d9800017 	ldw	r6,0(sp)
  801c68:	003fcd06 	br	801ba0 <__swbuf_r+0x24>
  801c6c:	3080030b 	ldhu	r2,12(r6)
  801c70:	00c00244 	movi	r3,9
  801c74:	043fffc4 	movi	r16,-1
  801c78:	10801014 	ori	r2,r2,64
  801c7c:	3080030d 	sth	r2,12(r6)
  801c80:	88c00015 	stw	r3,0(r17)
  801c84:	003fdf06 	br	801c04 <__swbuf_r+0x88>
  801c88:	300b883a 	mov	r5,r6
  801c8c:	8809883a 	mov	r4,r17
  801c90:	d9800015 	stw	r6,0(sp)
  801c94:	0801e040 	call	801e04 <_fflush_r>
  801c98:	d9800017 	ldw	r6,0(sp)
  801c9c:	103fe51e 	bne	r2,zero,801c34 <__swbuf_r+0xb8>
  801ca0:	31000017 	ldw	r4,0(r6)
  801ca4:	01400044 	movi	r5,1
  801ca8:	003fc906 	br	801bd0 <__swbuf_r+0x54>

00801cac <__swbuf>:
  801cac:	01802074 	movhi	r6,129
  801cb0:	31a0c304 	addi	r6,r6,-31988
  801cb4:	2007883a 	mov	r3,r4
  801cb8:	31000017 	ldw	r4,0(r6)
  801cbc:	280d883a 	mov	r6,r5
  801cc0:	180b883a 	mov	r5,r3
  801cc4:	0801b7c1 	jmpi	801b7c <__swbuf_r>

00801cc8 <__swsetup_r>:
  801cc8:	00802074 	movhi	r2,129
  801ccc:	10a0c304 	addi	r2,r2,-31988
  801cd0:	10c00017 	ldw	r3,0(r2)
  801cd4:	defffd04 	addi	sp,sp,-12
  801cd8:	dc400115 	stw	r17,4(sp)
  801cdc:	dc000015 	stw	r16,0(sp)
  801ce0:	dfc00215 	stw	ra,8(sp)
  801ce4:	2023883a 	mov	r17,r4
  801ce8:	2821883a 	mov	r16,r5
  801cec:	18000226 	beq	r3,zero,801cf8 <__swsetup_r+0x30>
  801cf0:	18800e17 	ldw	r2,56(r3)
  801cf4:	10001f26 	beq	r2,zero,801d74 <__swsetup_r+0xac>
  801cf8:	8100030b 	ldhu	r4,12(r16)
  801cfc:	2080020c 	andi	r2,r4,8
  801d00:	10002826 	beq	r2,zero,801da4 <__swsetup_r+0xdc>
  801d04:	81400417 	ldw	r5,16(r16)
  801d08:	28001d26 	beq	r5,zero,801d80 <__swsetup_r+0xb8>
  801d0c:	2080004c 	andi	r2,r4,1
  801d10:	1005003a 	cmpeq	r2,r2,zero
  801d14:	10000b26 	beq	r2,zero,801d44 <__swsetup_r+0x7c>
  801d18:	2080008c 	andi	r2,r4,2
  801d1c:	10001226 	beq	r2,zero,801d68 <__swsetup_r+0xa0>
  801d20:	0005883a 	mov	r2,zero
  801d24:	80800215 	stw	r2,8(r16)
  801d28:	28000b26 	beq	r5,zero,801d58 <__swsetup_r+0x90>
  801d2c:	0005883a 	mov	r2,zero
  801d30:	dfc00217 	ldw	ra,8(sp)
  801d34:	dc400117 	ldw	r17,4(sp)
  801d38:	dc000017 	ldw	r16,0(sp)
  801d3c:	dec00304 	addi	sp,sp,12
  801d40:	f800283a 	ret
  801d44:	80800517 	ldw	r2,20(r16)
  801d48:	80000215 	stw	zero,8(r16)
  801d4c:	0085c83a 	sub	r2,zero,r2
  801d50:	80800615 	stw	r2,24(r16)
  801d54:	283ff51e 	bne	r5,zero,801d2c <__swsetup_r+0x64>
  801d58:	2080200c 	andi	r2,r4,128
  801d5c:	103ff326 	beq	r2,zero,801d2c <__swsetup_r+0x64>
  801d60:	00bfffc4 	movi	r2,-1
  801d64:	003ff206 	br	801d30 <__swsetup_r+0x68>
  801d68:	80800517 	ldw	r2,20(r16)
  801d6c:	80800215 	stw	r2,8(r16)
  801d70:	003fed06 	br	801d28 <__swsetup_r+0x60>
  801d74:	1809883a 	mov	r4,r3
  801d78:	080209c0 	call	80209c <__sinit>
  801d7c:	003fde06 	br	801cf8 <__swsetup_r+0x30>
  801d80:	20c0a00c 	andi	r3,r4,640
  801d84:	00808004 	movi	r2,512
  801d88:	18bfe026 	beq	r3,r2,801d0c <__swsetup_r+0x44>
  801d8c:	8809883a 	mov	r4,r17
  801d90:	800b883a 	mov	r5,r16
  801d94:	08028b40 	call	8028b4 <__smakebuf_r>
  801d98:	8100030b 	ldhu	r4,12(r16)
  801d9c:	81400417 	ldw	r5,16(r16)
  801da0:	003fda06 	br	801d0c <__swsetup_r+0x44>
  801da4:	2080040c 	andi	r2,r4,16
  801da8:	103fed26 	beq	r2,zero,801d60 <__swsetup_r+0x98>
  801dac:	2080010c 	andi	r2,r4,4
  801db0:	10001226 	beq	r2,zero,801dfc <__swsetup_r+0x134>
  801db4:	81400c17 	ldw	r5,48(r16)
  801db8:	28000526 	beq	r5,zero,801dd0 <__swsetup_r+0x108>
  801dbc:	80801004 	addi	r2,r16,64
  801dc0:	28800226 	beq	r5,r2,801dcc <__swsetup_r+0x104>
  801dc4:	8809883a 	mov	r4,r17
  801dc8:	08024200 	call	802420 <_free_r>
  801dcc:	80000c15 	stw	zero,48(r16)
  801dd0:	8080030b 	ldhu	r2,12(r16)
  801dd4:	81400417 	ldw	r5,16(r16)
  801dd8:	80000115 	stw	zero,4(r16)
  801ddc:	10bff6cc 	andi	r2,r2,65499
  801de0:	8080030d 	sth	r2,12(r16)
  801de4:	81400015 	stw	r5,0(r16)
  801de8:	8080030b 	ldhu	r2,12(r16)
  801dec:	10800214 	ori	r2,r2,8
  801df0:	113fffcc 	andi	r4,r2,65535
  801df4:	8080030d 	sth	r2,12(r16)
  801df8:	003fc306 	br	801d08 <__swsetup_r+0x40>
  801dfc:	81400417 	ldw	r5,16(r16)
  801e00:	003ff906 	br	801de8 <__swsetup_r+0x120>

00801e04 <_fflush_r>:
  801e04:	defffb04 	addi	sp,sp,-20
  801e08:	dcc00315 	stw	r19,12(sp)
  801e0c:	dc800215 	stw	r18,8(sp)
  801e10:	dfc00415 	stw	ra,16(sp)
  801e14:	dc400115 	stw	r17,4(sp)
  801e18:	dc000015 	stw	r16,0(sp)
  801e1c:	2027883a 	mov	r19,r4
  801e20:	2825883a 	mov	r18,r5
  801e24:	20000226 	beq	r4,zero,801e30 <_fflush_r+0x2c>
  801e28:	20800e17 	ldw	r2,56(r4)
  801e2c:	10005626 	beq	r2,zero,801f88 <_fflush_r+0x184>
  801e30:	9100030b 	ldhu	r4,12(r18)
  801e34:	20ffffcc 	andi	r3,r4,65535
  801e38:	18e0001c 	xori	r3,r3,32768
  801e3c:	18e00004 	addi	r3,r3,-32768
  801e40:	1880020c 	andi	r2,r3,8
  801e44:	1000261e 	bne	r2,zero,801ee0 <_fflush_r+0xdc>
  801e48:	90c00117 	ldw	r3,4(r18)
  801e4c:	20820014 	ori	r2,r4,2048
  801e50:	9080030d 	sth	r2,12(r18)
  801e54:	1009883a 	mov	r4,r2
  801e58:	00c0400e 	bge	zero,r3,801f5c <_fflush_r+0x158>
  801e5c:	92000a17 	ldw	r8,40(r18)
  801e60:	40004026 	beq	r8,zero,801f64 <_fflush_r+0x160>
  801e64:	2084000c 	andi	r2,r4,4096
  801e68:	10005326 	beq	r2,zero,801fb8 <_fflush_r+0x1b4>
  801e6c:	94001417 	ldw	r16,80(r18)
  801e70:	9080030b 	ldhu	r2,12(r18)
  801e74:	1080010c 	andi	r2,r2,4
  801e78:	1000481e 	bne	r2,zero,801f9c <_fflush_r+0x198>
  801e7c:	91400717 	ldw	r5,28(r18)
  801e80:	9809883a 	mov	r4,r19
  801e84:	800d883a 	mov	r6,r16
  801e88:	000f883a 	mov	r7,zero
  801e8c:	403ee83a 	callr	r8
  801e90:	8080261e 	bne	r16,r2,801f2c <_fflush_r+0x128>
  801e94:	9080030b 	ldhu	r2,12(r18)
  801e98:	91000417 	ldw	r4,16(r18)
  801e9c:	90000115 	stw	zero,4(r18)
  801ea0:	10bdffcc 	andi	r2,r2,63487
  801ea4:	10ffffcc 	andi	r3,r2,65535
  801ea8:	18c4000c 	andi	r3,r3,4096
  801eac:	9080030d 	sth	r2,12(r18)
  801eb0:	91000015 	stw	r4,0(r18)
  801eb4:	18002b26 	beq	r3,zero,801f64 <_fflush_r+0x160>
  801eb8:	0007883a 	mov	r3,zero
  801ebc:	1805883a 	mov	r2,r3
  801ec0:	94001415 	stw	r16,80(r18)
  801ec4:	dfc00417 	ldw	ra,16(sp)
  801ec8:	dcc00317 	ldw	r19,12(sp)
  801ecc:	dc800217 	ldw	r18,8(sp)
  801ed0:	dc400117 	ldw	r17,4(sp)
  801ed4:	dc000017 	ldw	r16,0(sp)
  801ed8:	dec00504 	addi	sp,sp,20
  801edc:	f800283a 	ret
  801ee0:	94400417 	ldw	r17,16(r18)
  801ee4:	88001f26 	beq	r17,zero,801f64 <_fflush_r+0x160>
  801ee8:	90800017 	ldw	r2,0(r18)
  801eec:	18c000cc 	andi	r3,r3,3
  801ef0:	94400015 	stw	r17,0(r18)
  801ef4:	1461c83a 	sub	r16,r2,r17
  801ef8:	18002526 	beq	r3,zero,801f90 <_fflush_r+0x18c>
  801efc:	0005883a 	mov	r2,zero
  801f00:	90800215 	stw	r2,8(r18)
  801f04:	0400170e 	bge	zero,r16,801f64 <_fflush_r+0x160>
  801f08:	90c00917 	ldw	r3,36(r18)
  801f0c:	91400717 	ldw	r5,28(r18)
  801f10:	880d883a 	mov	r6,r17
  801f14:	800f883a 	mov	r7,r16
  801f18:	9809883a 	mov	r4,r19
  801f1c:	183ee83a 	callr	r3
  801f20:	88a3883a 	add	r17,r17,r2
  801f24:	80a1c83a 	sub	r16,r16,r2
  801f28:	00bff616 	blt	zero,r2,801f04 <_fflush_r+0x100>
  801f2c:	9080030b 	ldhu	r2,12(r18)
  801f30:	00ffffc4 	movi	r3,-1
  801f34:	10801014 	ori	r2,r2,64
  801f38:	9080030d 	sth	r2,12(r18)
  801f3c:	1805883a 	mov	r2,r3
  801f40:	dfc00417 	ldw	ra,16(sp)
  801f44:	dcc00317 	ldw	r19,12(sp)
  801f48:	dc800217 	ldw	r18,8(sp)
  801f4c:	dc400117 	ldw	r17,4(sp)
  801f50:	dc000017 	ldw	r16,0(sp)
  801f54:	dec00504 	addi	sp,sp,20
  801f58:	f800283a 	ret
  801f5c:	90800f17 	ldw	r2,60(r18)
  801f60:	00bfbe16 	blt	zero,r2,801e5c <_fflush_r+0x58>
  801f64:	0007883a 	mov	r3,zero
  801f68:	1805883a 	mov	r2,r3
  801f6c:	dfc00417 	ldw	ra,16(sp)
  801f70:	dcc00317 	ldw	r19,12(sp)
  801f74:	dc800217 	ldw	r18,8(sp)
  801f78:	dc400117 	ldw	r17,4(sp)
  801f7c:	dc000017 	ldw	r16,0(sp)
  801f80:	dec00504 	addi	sp,sp,20
  801f84:	f800283a 	ret
  801f88:	080209c0 	call	80209c <__sinit>
  801f8c:	003fa806 	br	801e30 <_fflush_r+0x2c>
  801f90:	90800517 	ldw	r2,20(r18)
  801f94:	90800215 	stw	r2,8(r18)
  801f98:	003fda06 	br	801f04 <_fflush_r+0x100>
  801f9c:	90800117 	ldw	r2,4(r18)
  801fa0:	90c00c17 	ldw	r3,48(r18)
  801fa4:	80a1c83a 	sub	r16,r16,r2
  801fa8:	183fb426 	beq	r3,zero,801e7c <_fflush_r+0x78>
  801fac:	90800f17 	ldw	r2,60(r18)
  801fb0:	80a1c83a 	sub	r16,r16,r2
  801fb4:	003fb106 	br	801e7c <_fflush_r+0x78>
  801fb8:	91400717 	ldw	r5,28(r18)
  801fbc:	9809883a 	mov	r4,r19
  801fc0:	000d883a 	mov	r6,zero
  801fc4:	01c00044 	movi	r7,1
  801fc8:	403ee83a 	callr	r8
  801fcc:	1021883a 	mov	r16,r2
  801fd0:	00bfffc4 	movi	r2,-1
  801fd4:	80800226 	beq	r16,r2,801fe0 <_fflush_r+0x1dc>
  801fd8:	92000a17 	ldw	r8,40(r18)
  801fdc:	003fa406 	br	801e70 <_fflush_r+0x6c>
  801fe0:	98c00017 	ldw	r3,0(r19)
  801fe4:	00800744 	movi	r2,29
  801fe8:	18bfde26 	beq	r3,r2,801f64 <_fflush_r+0x160>
  801fec:	9080030b 	ldhu	r2,12(r18)
  801ff0:	8007883a 	mov	r3,r16
  801ff4:	10801014 	ori	r2,r2,64
  801ff8:	9080030d 	sth	r2,12(r18)
  801ffc:	003fcf06 	br	801f3c <_fflush_r+0x138>

00802000 <fflush>:
  802000:	01402034 	movhi	r5,128
  802004:	29478104 	addi	r5,r5,7684
  802008:	2007883a 	mov	r3,r4
  80200c:	20000526 	beq	r4,zero,802024 <fflush+0x24>
  802010:	00802074 	movhi	r2,129
  802014:	10a0c304 	addi	r2,r2,-31988
  802018:	11000017 	ldw	r4,0(r2)
  80201c:	180b883a 	mov	r5,r3
  802020:	0801e041 	jmpi	801e04 <_fflush_r>
  802024:	00802074 	movhi	r2,129
  802028:	10a0c404 	addi	r2,r2,-31984
  80202c:	11000017 	ldw	r4,0(r2)
  802030:	08027341 	jmpi	802734 <_fwalk_reent>

00802034 <std>:
  802034:	00802034 	movhi	r2,128
  802038:	108ab804 	addi	r2,r2,10976
  80203c:	20800b15 	stw	r2,44(r4)
  802040:	00802034 	movhi	r2,128
  802044:	108af304 	addi	r2,r2,11212
  802048:	20800815 	stw	r2,32(r4)
  80204c:	00c02034 	movhi	r3,128
  802050:	18cad404 	addi	r3,r3,11088
  802054:	00802034 	movhi	r2,128
  802058:	108aba04 	addi	r2,r2,10984
  80205c:	2140030d 	sth	r5,12(r4)
  802060:	2180038d 	sth	r6,14(r4)
  802064:	20c00915 	stw	r3,36(r4)
  802068:	20800a15 	stw	r2,40(r4)
  80206c:	20000015 	stw	zero,0(r4)
  802070:	20000115 	stw	zero,4(r4)
  802074:	20000215 	stw	zero,8(r4)
  802078:	20000415 	stw	zero,16(r4)
  80207c:	20000515 	stw	zero,20(r4)
  802080:	20000615 	stw	zero,24(r4)
  802084:	21000715 	stw	r4,28(r4)
  802088:	f800283a 	ret

0080208c <__sfp_lock_acquire>:
  80208c:	f800283a 	ret

00802090 <__sfp_lock_release>:
  802090:	f800283a 	ret

00802094 <__sinit_lock_acquire>:
  802094:	f800283a 	ret

00802098 <__sinit_lock_release>:
  802098:	f800283a 	ret

0080209c <__sinit>:
  80209c:	20800e17 	ldw	r2,56(r4)
  8020a0:	defffd04 	addi	sp,sp,-12
  8020a4:	dc400115 	stw	r17,4(sp)
  8020a8:	dc000015 	stw	r16,0(sp)
  8020ac:	dfc00215 	stw	ra,8(sp)
  8020b0:	04400044 	movi	r17,1
  8020b4:	01400104 	movi	r5,4
  8020b8:	000d883a 	mov	r6,zero
  8020bc:	2021883a 	mov	r16,r4
  8020c0:	2200bb04 	addi	r8,r4,748
  8020c4:	200f883a 	mov	r7,r4
  8020c8:	10000526 	beq	r2,zero,8020e0 <__sinit+0x44>
  8020cc:	dfc00217 	ldw	ra,8(sp)
  8020d0:	dc400117 	ldw	r17,4(sp)
  8020d4:	dc000017 	ldw	r16,0(sp)
  8020d8:	dec00304 	addi	sp,sp,12
  8020dc:	f800283a 	ret
  8020e0:	21000117 	ldw	r4,4(r4)
  8020e4:	00802034 	movhi	r2,128
  8020e8:	10886004 	addi	r2,r2,8576
  8020ec:	00c000c4 	movi	r3,3
  8020f0:	80800f15 	stw	r2,60(r16)
  8020f4:	80c0b915 	stw	r3,740(r16)
  8020f8:	8200ba15 	stw	r8,744(r16)
  8020fc:	84400e15 	stw	r17,56(r16)
  802100:	8000b815 	stw	zero,736(r16)
  802104:	08020340 	call	802034 <std>
  802108:	81000217 	ldw	r4,8(r16)
  80210c:	880d883a 	mov	r6,r17
  802110:	800f883a 	mov	r7,r16
  802114:	01400284 	movi	r5,10
  802118:	08020340 	call	802034 <std>
  80211c:	81000317 	ldw	r4,12(r16)
  802120:	800f883a 	mov	r7,r16
  802124:	01400484 	movi	r5,18
  802128:	01800084 	movi	r6,2
  80212c:	dfc00217 	ldw	ra,8(sp)
  802130:	dc400117 	ldw	r17,4(sp)
  802134:	dc000017 	ldw	r16,0(sp)
  802138:	dec00304 	addi	sp,sp,12
  80213c:	08020341 	jmpi	802034 <std>

00802140 <__fp_lock>:
  802140:	0005883a 	mov	r2,zero
  802144:	f800283a 	ret

00802148 <__fp_unlock>:
  802148:	0005883a 	mov	r2,zero
  80214c:	f800283a 	ret

00802150 <__fp_unlock_all>:
  802150:	00802074 	movhi	r2,129
  802154:	10a0c304 	addi	r2,r2,-31988
  802158:	11000017 	ldw	r4,0(r2)
  80215c:	01402034 	movhi	r5,128
  802160:	29485204 	addi	r5,r5,8520
  802164:	08027fc1 	jmpi	8027fc <_fwalk>

00802168 <__fp_lock_all>:
  802168:	00802074 	movhi	r2,129
  80216c:	10a0c304 	addi	r2,r2,-31988
  802170:	11000017 	ldw	r4,0(r2)
  802174:	01402034 	movhi	r5,128
  802178:	29485004 	addi	r5,r5,8512
  80217c:	08027fc1 	jmpi	8027fc <_fwalk>

00802180 <_cleanup_r>:
  802180:	01402034 	movhi	r5,128
  802184:	294b8904 	addi	r5,r5,11812
  802188:	08027fc1 	jmpi	8027fc <_fwalk>

0080218c <_cleanup>:
  80218c:	00802074 	movhi	r2,129
  802190:	10a0c404 	addi	r2,r2,-31984
  802194:	11000017 	ldw	r4,0(r2)
  802198:	08021801 	jmpi	802180 <_cleanup_r>

0080219c <__sfmoreglue>:
  80219c:	defffc04 	addi	sp,sp,-16
  8021a0:	dc400115 	stw	r17,4(sp)
  8021a4:	2c401724 	muli	r17,r5,92
  8021a8:	dc800215 	stw	r18,8(sp)
  8021ac:	2825883a 	mov	r18,r5
  8021b0:	89400304 	addi	r5,r17,12
  8021b4:	dc000015 	stw	r16,0(sp)
  8021b8:	dfc00315 	stw	ra,12(sp)
  8021bc:	08009880 	call	800988 <_malloc_r>
  8021c0:	0021883a 	mov	r16,zero
  8021c4:	880d883a 	mov	r6,r17
  8021c8:	000b883a 	mov	r5,zero
  8021cc:	10000626 	beq	r2,zero,8021e8 <__sfmoreglue+0x4c>
  8021d0:	11000304 	addi	r4,r2,12
  8021d4:	14800115 	stw	r18,4(r2)
  8021d8:	10000015 	stw	zero,0(r2)
  8021dc:	11000215 	stw	r4,8(r2)
  8021e0:	1021883a 	mov	r16,r2
  8021e4:	0802a480 	call	802a48 <memset>
  8021e8:	8005883a 	mov	r2,r16
  8021ec:	dfc00317 	ldw	ra,12(sp)
  8021f0:	dc800217 	ldw	r18,8(sp)
  8021f4:	dc400117 	ldw	r17,4(sp)
  8021f8:	dc000017 	ldw	r16,0(sp)
  8021fc:	dec00404 	addi	sp,sp,16
  802200:	f800283a 	ret

00802204 <__sfp>:
  802204:	defffd04 	addi	sp,sp,-12
  802208:	00802074 	movhi	r2,129
  80220c:	10a0c404 	addi	r2,r2,-31984
  802210:	dc000015 	stw	r16,0(sp)
  802214:	14000017 	ldw	r16,0(r2)
  802218:	dc400115 	stw	r17,4(sp)
  80221c:	dfc00215 	stw	ra,8(sp)
  802220:	80800e17 	ldw	r2,56(r16)
  802224:	2023883a 	mov	r17,r4
  802228:	10002626 	beq	r2,zero,8022c4 <__sfp+0xc0>
  80222c:	8400b804 	addi	r16,r16,736
  802230:	80800117 	ldw	r2,4(r16)
  802234:	81000217 	ldw	r4,8(r16)
  802238:	10ffffc4 	addi	r3,r2,-1
  80223c:	18000916 	blt	r3,zero,802264 <__sfp+0x60>
  802240:	2080030f 	ldh	r2,12(r4)
  802244:	10000b26 	beq	r2,zero,802274 <__sfp+0x70>
  802248:	017fffc4 	movi	r5,-1
  80224c:	00000206 	br	802258 <__sfp+0x54>
  802250:	2080030f 	ldh	r2,12(r4)
  802254:	10000726 	beq	r2,zero,802274 <__sfp+0x70>
  802258:	18ffffc4 	addi	r3,r3,-1
  80225c:	21001704 	addi	r4,r4,92
  802260:	197ffb1e 	bne	r3,r5,802250 <__sfp+0x4c>
  802264:	80800017 	ldw	r2,0(r16)
  802268:	10001926 	beq	r2,zero,8022d0 <__sfp+0xcc>
  80226c:	1021883a 	mov	r16,r2
  802270:	003fef06 	br	802230 <__sfp+0x2c>
  802274:	00bfffc4 	movi	r2,-1
  802278:	00c00044 	movi	r3,1
  80227c:	2080038d 	sth	r2,14(r4)
  802280:	20c0030d 	sth	r3,12(r4)
  802284:	20000015 	stw	zero,0(r4)
  802288:	20000215 	stw	zero,8(r4)
  80228c:	20000115 	stw	zero,4(r4)
  802290:	20000415 	stw	zero,16(r4)
  802294:	20000515 	stw	zero,20(r4)
  802298:	20000615 	stw	zero,24(r4)
  80229c:	20000c15 	stw	zero,48(r4)
  8022a0:	20000d15 	stw	zero,52(r4)
  8022a4:	20001115 	stw	zero,68(r4)
  8022a8:	20001215 	stw	zero,72(r4)
  8022ac:	2005883a 	mov	r2,r4
  8022b0:	dfc00217 	ldw	ra,8(sp)
  8022b4:	dc400117 	ldw	r17,4(sp)
  8022b8:	dc000017 	ldw	r16,0(sp)
  8022bc:	dec00304 	addi	sp,sp,12
  8022c0:	f800283a 	ret
  8022c4:	8009883a 	mov	r4,r16
  8022c8:	080209c0 	call	80209c <__sinit>
  8022cc:	003fd706 	br	80222c <__sfp+0x28>
  8022d0:	8809883a 	mov	r4,r17
  8022d4:	01400104 	movi	r5,4
  8022d8:	080219c0 	call	80219c <__sfmoreglue>
  8022dc:	80800015 	stw	r2,0(r16)
  8022e0:	103fe21e 	bne	r2,zero,80226c <__sfp+0x68>
  8022e4:	00800304 	movi	r2,12
  8022e8:	0009883a 	mov	r4,zero
  8022ec:	88800015 	stw	r2,0(r17)
  8022f0:	003fee06 	br	8022ac <__sfp+0xa8>

008022f4 <_malloc_trim_r>:
  8022f4:	defffb04 	addi	sp,sp,-20
  8022f8:	dcc00315 	stw	r19,12(sp)
  8022fc:	04c02034 	movhi	r19,128
  802300:	9cdb0e04 	addi	r19,r19,27704
  802304:	dc800215 	stw	r18,8(sp)
  802308:	dc400115 	stw	r17,4(sp)
  80230c:	dc000015 	stw	r16,0(sp)
  802310:	2823883a 	mov	r17,r5
  802314:	2025883a 	mov	r18,r4
  802318:	dfc00415 	stw	ra,16(sp)
  80231c:	08038500 	call	803850 <__malloc_lock>
  802320:	98800217 	ldw	r2,8(r19)
  802324:	9009883a 	mov	r4,r18
  802328:	000b883a 	mov	r5,zero
  80232c:	10c00117 	ldw	r3,4(r2)
  802330:	00bfff04 	movi	r2,-4
  802334:	18a0703a 	and	r16,r3,r2
  802338:	8463c83a 	sub	r17,r16,r17
  80233c:	8c43fbc4 	addi	r17,r17,4079
  802340:	8822d33a 	srli	r17,r17,12
  802344:	0083ffc4 	movi	r2,4095
  802348:	8c7fffc4 	addi	r17,r17,-1
  80234c:	8822933a 	slli	r17,r17,12
  802350:	1440060e 	bge	r2,r17,80236c <_malloc_trim_r+0x78>
  802354:	0801b0c0 	call	801b0c <_sbrk_r>
  802358:	98c00217 	ldw	r3,8(r19)
  80235c:	9009883a 	mov	r4,r18
  802360:	044bc83a 	sub	r5,zero,r17
  802364:	80c7883a 	add	r3,r16,r3
  802368:	10c00926 	beq	r2,r3,802390 <_malloc_trim_r+0x9c>
  80236c:	08038700 	call	803870 <__malloc_unlock>
  802370:	0005883a 	mov	r2,zero
  802374:	dfc00417 	ldw	ra,16(sp)
  802378:	dcc00317 	ldw	r19,12(sp)
  80237c:	dc800217 	ldw	r18,8(sp)
  802380:	dc400117 	ldw	r17,4(sp)
  802384:	dc000017 	ldw	r16,0(sp)
  802388:	dec00504 	addi	sp,sp,20
  80238c:	f800283a 	ret
  802390:	9009883a 	mov	r4,r18
  802394:	0801b0c0 	call	801b0c <_sbrk_r>
  802398:	844dc83a 	sub	r6,r16,r17
  80239c:	00ffffc4 	movi	r3,-1
  8023a0:	9009883a 	mov	r4,r18
  8023a4:	000b883a 	mov	r5,zero
  8023a8:	01c02074 	movhi	r7,129
  8023ac:	39e79e04 	addi	r7,r7,-24968
  8023b0:	31800054 	ori	r6,r6,1
  8023b4:	10c00926 	beq	r2,r3,8023dc <_malloc_trim_r+0xe8>
  8023b8:	38800017 	ldw	r2,0(r7)
  8023bc:	98c00217 	ldw	r3,8(r19)
  8023c0:	9009883a 	mov	r4,r18
  8023c4:	1445c83a 	sub	r2,r2,r17
  8023c8:	38800015 	stw	r2,0(r7)
  8023cc:	19800115 	stw	r6,4(r3)
  8023d0:	08038700 	call	803870 <__malloc_unlock>
  8023d4:	00800044 	movi	r2,1
  8023d8:	003fe606 	br	802374 <_malloc_trim_r+0x80>
  8023dc:	0801b0c0 	call	801b0c <_sbrk_r>
  8023e0:	99800217 	ldw	r6,8(r19)
  8023e4:	100f883a 	mov	r7,r2
  8023e8:	9009883a 	mov	r4,r18
  8023ec:	1187c83a 	sub	r3,r2,r6
  8023f0:	008003c4 	movi	r2,15
  8023f4:	19400054 	ori	r5,r3,1
  8023f8:	10ffdc0e 	bge	r2,r3,80236c <_malloc_trim_r+0x78>
  8023fc:	00802074 	movhi	r2,129
  802400:	10a0c604 	addi	r2,r2,-31976
  802404:	10c00017 	ldw	r3,0(r2)
  802408:	00802074 	movhi	r2,129
  80240c:	10a79e04 	addi	r2,r2,-24968
  802410:	31400115 	stw	r5,4(r6)
  802414:	38c7c83a 	sub	r3,r7,r3
  802418:	10c00015 	stw	r3,0(r2)
  80241c:	003fd306 	br	80236c <_malloc_trim_r+0x78>

00802420 <_free_r>:
  802420:	defffd04 	addi	sp,sp,-12
  802424:	dc400115 	stw	r17,4(sp)
  802428:	dc000015 	stw	r16,0(sp)
  80242c:	dfc00215 	stw	ra,8(sp)
  802430:	2821883a 	mov	r16,r5
  802434:	2023883a 	mov	r17,r4
  802438:	28005a26 	beq	r5,zero,8025a4 <_free_r+0x184>
  80243c:	08038500 	call	803850 <__malloc_lock>
  802440:	823ffe04 	addi	r8,r16,-8
  802444:	41400117 	ldw	r5,4(r8)
  802448:	00bfff84 	movi	r2,-2
  80244c:	02802034 	movhi	r10,128
  802450:	529b0e04 	addi	r10,r10,27704
  802454:	288e703a 	and	r7,r5,r2
  802458:	41cd883a 	add	r6,r8,r7
  80245c:	30c00117 	ldw	r3,4(r6)
  802460:	51000217 	ldw	r4,8(r10)
  802464:	00bfff04 	movi	r2,-4
  802468:	1892703a 	and	r9,r3,r2
  80246c:	5017883a 	mov	r11,r10
  802470:	31006726 	beq	r6,r4,802610 <_free_r+0x1f0>
  802474:	2880004c 	andi	r2,r5,1
  802478:	1005003a 	cmpeq	r2,r2,zero
  80247c:	32400115 	stw	r9,4(r6)
  802480:	10001a1e 	bne	r2,zero,8024ec <_free_r+0xcc>
  802484:	000b883a 	mov	r5,zero
  802488:	3247883a 	add	r3,r6,r9
  80248c:	18800117 	ldw	r2,4(r3)
  802490:	1080004c 	andi	r2,r2,1
  802494:	1000231e 	bne	r2,zero,802524 <_free_r+0x104>
  802498:	280ac03a 	cmpne	r5,r5,zero
  80249c:	3a4f883a 	add	r7,r7,r9
  8024a0:	2800451e 	bne	r5,zero,8025b8 <_free_r+0x198>
  8024a4:	31000217 	ldw	r4,8(r6)
  8024a8:	00802034 	movhi	r2,128
  8024ac:	109b1004 	addi	r2,r2,27712
  8024b0:	20807b26 	beq	r4,r2,8026a0 <_free_r+0x280>
  8024b4:	30800317 	ldw	r2,12(r6)
  8024b8:	3a07883a 	add	r3,r7,r8
  8024bc:	19c00015 	stw	r7,0(r3)
  8024c0:	11000215 	stw	r4,8(r2)
  8024c4:	20800315 	stw	r2,12(r4)
  8024c8:	38800054 	ori	r2,r7,1
  8024cc:	40800115 	stw	r2,4(r8)
  8024d0:	28001a26 	beq	r5,zero,80253c <_free_r+0x11c>
  8024d4:	8809883a 	mov	r4,r17
  8024d8:	dfc00217 	ldw	ra,8(sp)
  8024dc:	dc400117 	ldw	r17,4(sp)
  8024e0:	dc000017 	ldw	r16,0(sp)
  8024e4:	dec00304 	addi	sp,sp,12
  8024e8:	08038701 	jmpi	803870 <__malloc_unlock>
  8024ec:	80bffe17 	ldw	r2,-8(r16)
  8024f0:	50c00204 	addi	r3,r10,8
  8024f4:	4091c83a 	sub	r8,r8,r2
  8024f8:	41000217 	ldw	r4,8(r8)
  8024fc:	388f883a 	add	r7,r7,r2
  802500:	20c06126 	beq	r4,r3,802688 <_free_r+0x268>
  802504:	40800317 	ldw	r2,12(r8)
  802508:	3247883a 	add	r3,r6,r9
  80250c:	000b883a 	mov	r5,zero
  802510:	11000215 	stw	r4,8(r2)
  802514:	20800315 	stw	r2,12(r4)
  802518:	18800117 	ldw	r2,4(r3)
  80251c:	1080004c 	andi	r2,r2,1
  802520:	103fdd26 	beq	r2,zero,802498 <_free_r+0x78>
  802524:	38800054 	ori	r2,r7,1
  802528:	3a07883a 	add	r3,r7,r8
  80252c:	280ac03a 	cmpne	r5,r5,zero
  802530:	40800115 	stw	r2,4(r8)
  802534:	19c00015 	stw	r7,0(r3)
  802538:	283fe61e 	bne	r5,zero,8024d4 <_free_r+0xb4>
  80253c:	00807fc4 	movi	r2,511
  802540:	11c01f2e 	bgeu	r2,r7,8025c0 <_free_r+0x1a0>
  802544:	3806d27a 	srli	r3,r7,9
  802548:	1800481e 	bne	r3,zero,80266c <_free_r+0x24c>
  80254c:	3804d0fa 	srli	r2,r7,3
  802550:	100690fa 	slli	r3,r2,3
  802554:	1acd883a 	add	r6,r3,r11
  802558:	31400217 	ldw	r5,8(r6)
  80255c:	31405926 	beq	r6,r5,8026c4 <_free_r+0x2a4>
  802560:	28800117 	ldw	r2,4(r5)
  802564:	00ffff04 	movi	r3,-4
  802568:	10c4703a 	and	r2,r2,r3
  80256c:	3880022e 	bgeu	r7,r2,802578 <_free_r+0x158>
  802570:	29400217 	ldw	r5,8(r5)
  802574:	317ffa1e 	bne	r6,r5,802560 <_free_r+0x140>
  802578:	29800317 	ldw	r6,12(r5)
  80257c:	41800315 	stw	r6,12(r8)
  802580:	41400215 	stw	r5,8(r8)
  802584:	8809883a 	mov	r4,r17
  802588:	2a000315 	stw	r8,12(r5)
  80258c:	32000215 	stw	r8,8(r6)
  802590:	dfc00217 	ldw	ra,8(sp)
  802594:	dc400117 	ldw	r17,4(sp)
  802598:	dc000017 	ldw	r16,0(sp)
  80259c:	dec00304 	addi	sp,sp,12
  8025a0:	08038701 	jmpi	803870 <__malloc_unlock>
  8025a4:	dfc00217 	ldw	ra,8(sp)
  8025a8:	dc400117 	ldw	r17,4(sp)
  8025ac:	dc000017 	ldw	r16,0(sp)
  8025b0:	dec00304 	addi	sp,sp,12
  8025b4:	f800283a 	ret
  8025b8:	31000217 	ldw	r4,8(r6)
  8025bc:	003fbd06 	br	8024b4 <_free_r+0x94>
  8025c0:	3806d0fa 	srli	r3,r7,3
  8025c4:	00800044 	movi	r2,1
  8025c8:	51400117 	ldw	r5,4(r10)
  8025cc:	180890fa 	slli	r4,r3,3
  8025d0:	1807d0ba 	srai	r3,r3,2
  8025d4:	22c9883a 	add	r4,r4,r11
  8025d8:	21800217 	ldw	r6,8(r4)
  8025dc:	10c4983a 	sll	r2,r2,r3
  8025e0:	41000315 	stw	r4,12(r8)
  8025e4:	41800215 	stw	r6,8(r8)
  8025e8:	288ab03a 	or	r5,r5,r2
  8025ec:	22000215 	stw	r8,8(r4)
  8025f0:	8809883a 	mov	r4,r17
  8025f4:	51400115 	stw	r5,4(r10)
  8025f8:	32000315 	stw	r8,12(r6)
  8025fc:	dfc00217 	ldw	ra,8(sp)
  802600:	dc400117 	ldw	r17,4(sp)
  802604:	dc000017 	ldw	r16,0(sp)
  802608:	dec00304 	addi	sp,sp,12
  80260c:	08038701 	jmpi	803870 <__malloc_unlock>
  802610:	2880004c 	andi	r2,r5,1
  802614:	3a4d883a 	add	r6,r7,r9
  802618:	1000071e 	bne	r2,zero,802638 <_free_r+0x218>
  80261c:	80bffe17 	ldw	r2,-8(r16)
  802620:	4091c83a 	sub	r8,r8,r2
  802624:	41000317 	ldw	r4,12(r8)
  802628:	40c00217 	ldw	r3,8(r8)
  80262c:	308d883a 	add	r6,r6,r2
  802630:	20c00215 	stw	r3,8(r4)
  802634:	19000315 	stw	r4,12(r3)
  802638:	00802074 	movhi	r2,129
  80263c:	10a0c504 	addi	r2,r2,-31980
  802640:	11000017 	ldw	r4,0(r2)
  802644:	30c00054 	ori	r3,r6,1
  802648:	52000215 	stw	r8,8(r10)
  80264c:	40c00115 	stw	r3,4(r8)
  802650:	313fa036 	bltu	r6,r4,8024d4 <_free_r+0xb4>
  802654:	00802074 	movhi	r2,129
  802658:	10a79404 	addi	r2,r2,-25008
  80265c:	11400017 	ldw	r5,0(r2)
  802660:	8809883a 	mov	r4,r17
  802664:	08022f40 	call	8022f4 <_malloc_trim_r>
  802668:	003f9a06 	br	8024d4 <_free_r+0xb4>
  80266c:	00800104 	movi	r2,4
  802670:	10c0072e 	bgeu	r2,r3,802690 <_free_r+0x270>
  802674:	00800504 	movi	r2,20
  802678:	10c01936 	bltu	r2,r3,8026e0 <_free_r+0x2c0>
  80267c:	188016c4 	addi	r2,r3,91
  802680:	100690fa 	slli	r3,r2,3
  802684:	003fb306 	br	802554 <_free_r+0x134>
  802688:	01400044 	movi	r5,1
  80268c:	003f7e06 	br	802488 <_free_r+0x68>
  802690:	3804d1ba 	srli	r2,r7,6
  802694:	10800e04 	addi	r2,r2,56
  802698:	100690fa 	slli	r3,r2,3
  80269c:	003fad06 	br	802554 <_free_r+0x134>
  8026a0:	22000315 	stw	r8,12(r4)
  8026a4:	22000215 	stw	r8,8(r4)
  8026a8:	3a05883a 	add	r2,r7,r8
  8026ac:	38c00054 	ori	r3,r7,1
  8026b0:	11c00015 	stw	r7,0(r2)
  8026b4:	41000215 	stw	r4,8(r8)
  8026b8:	40c00115 	stw	r3,4(r8)
  8026bc:	41000315 	stw	r4,12(r8)
  8026c0:	003f8406 	br	8024d4 <_free_r+0xb4>
  8026c4:	1005d0ba 	srai	r2,r2,2
  8026c8:	00c00044 	movi	r3,1
  8026cc:	51000117 	ldw	r4,4(r10)
  8026d0:	1886983a 	sll	r3,r3,r2
  8026d4:	20c8b03a 	or	r4,r4,r3
  8026d8:	51000115 	stw	r4,4(r10)
  8026dc:	003fa706 	br	80257c <_free_r+0x15c>
  8026e0:	00801504 	movi	r2,84
  8026e4:	10c00436 	bltu	r2,r3,8026f8 <_free_r+0x2d8>
  8026e8:	3804d33a 	srli	r2,r7,12
  8026ec:	10801b84 	addi	r2,r2,110
  8026f0:	100690fa 	slli	r3,r2,3
  8026f4:	003f9706 	br	802554 <_free_r+0x134>
  8026f8:	00805504 	movi	r2,340
  8026fc:	10c00436 	bltu	r2,r3,802710 <_free_r+0x2f0>
  802700:	3804d3fa 	srli	r2,r7,15
  802704:	10801dc4 	addi	r2,r2,119
  802708:	100690fa 	slli	r3,r2,3
  80270c:	003f9106 	br	802554 <_free_r+0x134>
  802710:	00815504 	movi	r2,1364
  802714:	10c0032e 	bgeu	r2,r3,802724 <_free_r+0x304>
  802718:	00801f84 	movi	r2,126
  80271c:	00c0fc04 	movi	r3,1008
  802720:	003f8c06 	br	802554 <_free_r+0x134>
  802724:	3804d4ba 	srli	r2,r7,18
  802728:	10801f04 	addi	r2,r2,124
  80272c:	100690fa 	slli	r3,r2,3
  802730:	003f8806 	br	802554 <_free_r+0x134>

00802734 <_fwalk_reent>:
  802734:	defff704 	addi	sp,sp,-36
  802738:	dcc00315 	stw	r19,12(sp)
  80273c:	24c0b804 	addi	r19,r4,736
  802740:	dd800615 	stw	r22,24(sp)
  802744:	dd400515 	stw	r21,20(sp)
  802748:	dfc00815 	stw	ra,32(sp)
  80274c:	ddc00715 	stw	r23,28(sp)
  802750:	dd000415 	stw	r20,16(sp)
  802754:	dc800215 	stw	r18,8(sp)
  802758:	dc400115 	stw	r17,4(sp)
  80275c:	dc000015 	stw	r16,0(sp)
  802760:	202b883a 	mov	r21,r4
  802764:	282d883a 	mov	r22,r5
  802768:	080208c0 	call	80208c <__sfp_lock_acquire>
  80276c:	98002126 	beq	r19,zero,8027f4 <_fwalk_reent+0xc0>
  802770:	002f883a 	mov	r23,zero
  802774:	9c800117 	ldw	r18,4(r19)
  802778:	9c000217 	ldw	r16,8(r19)
  80277c:	90bfffc4 	addi	r2,r18,-1
  802780:	10000d16 	blt	r2,zero,8027b8 <_fwalk_reent+0x84>
  802784:	0023883a 	mov	r17,zero
  802788:	053fffc4 	movi	r20,-1
  80278c:	8080030f 	ldh	r2,12(r16)
  802790:	8c400044 	addi	r17,r17,1
  802794:	10000626 	beq	r2,zero,8027b0 <_fwalk_reent+0x7c>
  802798:	8080038f 	ldh	r2,14(r16)
  80279c:	800b883a 	mov	r5,r16
  8027a0:	a809883a 	mov	r4,r21
  8027a4:	15000226 	beq	r2,r20,8027b0 <_fwalk_reent+0x7c>
  8027a8:	b03ee83a 	callr	r22
  8027ac:	b8aeb03a 	or	r23,r23,r2
  8027b0:	84001704 	addi	r16,r16,92
  8027b4:	947ff51e 	bne	r18,r17,80278c <_fwalk_reent+0x58>
  8027b8:	9cc00017 	ldw	r19,0(r19)
  8027bc:	983fed1e 	bne	r19,zero,802774 <_fwalk_reent+0x40>
  8027c0:	08020900 	call	802090 <__sfp_lock_release>
  8027c4:	b805883a 	mov	r2,r23
  8027c8:	dfc00817 	ldw	ra,32(sp)
  8027cc:	ddc00717 	ldw	r23,28(sp)
  8027d0:	dd800617 	ldw	r22,24(sp)
  8027d4:	dd400517 	ldw	r21,20(sp)
  8027d8:	dd000417 	ldw	r20,16(sp)
  8027dc:	dcc00317 	ldw	r19,12(sp)
  8027e0:	dc800217 	ldw	r18,8(sp)
  8027e4:	dc400117 	ldw	r17,4(sp)
  8027e8:	dc000017 	ldw	r16,0(sp)
  8027ec:	dec00904 	addi	sp,sp,36
  8027f0:	f800283a 	ret
  8027f4:	002f883a 	mov	r23,zero
  8027f8:	003ff106 	br	8027c0 <_fwalk_reent+0x8c>

008027fc <_fwalk>:
  8027fc:	defff804 	addi	sp,sp,-32
  802800:	dcc00315 	stw	r19,12(sp)
  802804:	24c0b804 	addi	r19,r4,736
  802808:	dd400515 	stw	r21,20(sp)
  80280c:	dfc00715 	stw	ra,28(sp)
  802810:	dd800615 	stw	r22,24(sp)
  802814:	dd000415 	stw	r20,16(sp)
  802818:	dc800215 	stw	r18,8(sp)
  80281c:	dc400115 	stw	r17,4(sp)
  802820:	dc000015 	stw	r16,0(sp)
  802824:	282b883a 	mov	r21,r5
  802828:	080208c0 	call	80208c <__sfp_lock_acquire>
  80282c:	98001f26 	beq	r19,zero,8028ac <_fwalk+0xb0>
  802830:	002d883a 	mov	r22,zero
  802834:	9c800117 	ldw	r18,4(r19)
  802838:	9c000217 	ldw	r16,8(r19)
  80283c:	90bfffc4 	addi	r2,r18,-1
  802840:	10000c16 	blt	r2,zero,802874 <_fwalk+0x78>
  802844:	0023883a 	mov	r17,zero
  802848:	053fffc4 	movi	r20,-1
  80284c:	8080030f 	ldh	r2,12(r16)
  802850:	8c400044 	addi	r17,r17,1
  802854:	10000526 	beq	r2,zero,80286c <_fwalk+0x70>
  802858:	8080038f 	ldh	r2,14(r16)
  80285c:	8009883a 	mov	r4,r16
  802860:	15000226 	beq	r2,r20,80286c <_fwalk+0x70>
  802864:	a83ee83a 	callr	r21
  802868:	b0acb03a 	or	r22,r22,r2
  80286c:	84001704 	addi	r16,r16,92
  802870:	947ff61e 	bne	r18,r17,80284c <_fwalk+0x50>
  802874:	9cc00017 	ldw	r19,0(r19)
  802878:	983fee1e 	bne	r19,zero,802834 <_fwalk+0x38>
  80287c:	08020900 	call	802090 <__sfp_lock_release>
  802880:	b005883a 	mov	r2,r22
  802884:	dfc00717 	ldw	ra,28(sp)
  802888:	dd800617 	ldw	r22,24(sp)
  80288c:	dd400517 	ldw	r21,20(sp)
  802890:	dd000417 	ldw	r20,16(sp)
  802894:	dcc00317 	ldw	r19,12(sp)
  802898:	dc800217 	ldw	r18,8(sp)
  80289c:	dc400117 	ldw	r17,4(sp)
  8028a0:	dc000017 	ldw	r16,0(sp)
  8028a4:	dec00804 	addi	sp,sp,32
  8028a8:	f800283a 	ret
  8028ac:	002d883a 	mov	r22,zero
  8028b0:	003ff206 	br	80287c <_fwalk+0x80>

008028b4 <__smakebuf_r>:
  8028b4:	2880030b 	ldhu	r2,12(r5)
  8028b8:	deffed04 	addi	sp,sp,-76
  8028bc:	dc401015 	stw	r17,64(sp)
  8028c0:	1080008c 	andi	r2,r2,2
  8028c4:	dc000f15 	stw	r16,60(sp)
  8028c8:	dfc01215 	stw	ra,72(sp)
  8028cc:	dc801115 	stw	r18,68(sp)
  8028d0:	2821883a 	mov	r16,r5
  8028d4:	2023883a 	mov	r17,r4
  8028d8:	10000b26 	beq	r2,zero,802908 <__smakebuf_r+0x54>
  8028dc:	28c010c4 	addi	r3,r5,67
  8028e0:	00800044 	movi	r2,1
  8028e4:	28800515 	stw	r2,20(r5)
  8028e8:	28c00415 	stw	r3,16(r5)
  8028ec:	28c00015 	stw	r3,0(r5)
  8028f0:	dfc01217 	ldw	ra,72(sp)
  8028f4:	dc801117 	ldw	r18,68(sp)
  8028f8:	dc401017 	ldw	r17,64(sp)
  8028fc:	dc000f17 	ldw	r16,60(sp)
  802900:	dec01304 	addi	sp,sp,76
  802904:	f800283a 	ret
  802908:	2940038f 	ldh	r5,14(r5)
  80290c:	28002116 	blt	r5,zero,802994 <__smakebuf_r+0xe0>
  802910:	d80d883a 	mov	r6,sp
  802914:	0802e380 	call	802e38 <_fstat_r>
  802918:	10001e16 	blt	r2,zero,802994 <__smakebuf_r+0xe0>
  80291c:	d8800117 	ldw	r2,4(sp)
  802920:	00e00014 	movui	r3,32768
  802924:	113c000c 	andi	r4,r2,61440
  802928:	20c03126 	beq	r4,r3,8029f0 <__smakebuf_r+0x13c>
  80292c:	8080030b 	ldhu	r2,12(r16)
  802930:	00c80004 	movi	r3,8192
  802934:	10820014 	ori	r2,r2,2048
  802938:	8080030d 	sth	r2,12(r16)
  80293c:	20c01e26 	beq	r4,r3,8029b8 <__smakebuf_r+0x104>
  802940:	04810004 	movi	r18,1024
  802944:	8809883a 	mov	r4,r17
  802948:	900b883a 	mov	r5,r18
  80294c:	08009880 	call	800988 <_malloc_r>
  802950:	1009883a 	mov	r4,r2
  802954:	10003126 	beq	r2,zero,802a1c <__smakebuf_r+0x168>
  802958:	80c0030b 	ldhu	r3,12(r16)
  80295c:	00802034 	movhi	r2,128
  802960:	10886004 	addi	r2,r2,8576
  802964:	88800f15 	stw	r2,60(r17)
  802968:	18c02014 	ori	r3,r3,128
  80296c:	84800515 	stw	r18,20(r16)
  802970:	80c0030d 	sth	r3,12(r16)
  802974:	81000415 	stw	r4,16(r16)
  802978:	81000015 	stw	r4,0(r16)
  80297c:	dfc01217 	ldw	ra,72(sp)
  802980:	dc801117 	ldw	r18,68(sp)
  802984:	dc401017 	ldw	r17,64(sp)
  802988:	dc000f17 	ldw	r16,60(sp)
  80298c:	dec01304 	addi	sp,sp,76
  802990:	f800283a 	ret
  802994:	80c0030b 	ldhu	r3,12(r16)
  802998:	1880200c 	andi	r2,r3,128
  80299c:	10000426 	beq	r2,zero,8029b0 <__smakebuf_r+0xfc>
  8029a0:	04801004 	movi	r18,64
  8029a4:	18820014 	ori	r2,r3,2048
  8029a8:	8080030d 	sth	r2,12(r16)
  8029ac:	003fe506 	br	802944 <__smakebuf_r+0x90>
  8029b0:	04810004 	movi	r18,1024
  8029b4:	003ffb06 	br	8029a4 <__smakebuf_r+0xf0>
  8029b8:	8140038f 	ldh	r5,14(r16)
  8029bc:	8809883a 	mov	r4,r17
  8029c0:	0802eac0 	call	802eac <_isatty_r>
  8029c4:	103fde26 	beq	r2,zero,802940 <__smakebuf_r+0x8c>
  8029c8:	8080030b 	ldhu	r2,12(r16)
  8029cc:	80c010c4 	addi	r3,r16,67
  8029d0:	04810004 	movi	r18,1024
  8029d4:	10800054 	ori	r2,r2,1
  8029d8:	8080030d 	sth	r2,12(r16)
  8029dc:	00800044 	movi	r2,1
  8029e0:	80c00415 	stw	r3,16(r16)
  8029e4:	80800515 	stw	r2,20(r16)
  8029e8:	80c00015 	stw	r3,0(r16)
  8029ec:	003fd506 	br	802944 <__smakebuf_r+0x90>
  8029f0:	80c00a17 	ldw	r3,40(r16)
  8029f4:	00802034 	movhi	r2,128
  8029f8:	108aba04 	addi	r2,r2,10984
  8029fc:	18bfcb1e 	bne	r3,r2,80292c <__smakebuf_r+0x78>
  802a00:	8080030b 	ldhu	r2,12(r16)
  802a04:	00c10004 	movi	r3,1024
  802a08:	1825883a 	mov	r18,r3
  802a0c:	10c4b03a 	or	r2,r2,r3
  802a10:	8080030d 	sth	r2,12(r16)
  802a14:	80c01315 	stw	r3,76(r16)
  802a18:	003fca06 	br	802944 <__smakebuf_r+0x90>
  802a1c:	8100030b 	ldhu	r4,12(r16)
  802a20:	2080800c 	andi	r2,r4,512
  802a24:	103fb21e 	bne	r2,zero,8028f0 <__smakebuf_r+0x3c>
  802a28:	80c010c4 	addi	r3,r16,67
  802a2c:	21000094 	ori	r4,r4,2
  802a30:	00800044 	movi	r2,1
  802a34:	80800515 	stw	r2,20(r16)
  802a38:	8100030d 	sth	r4,12(r16)
  802a3c:	80c00415 	stw	r3,16(r16)
  802a40:	80c00015 	stw	r3,0(r16)
  802a44:	003faa06 	br	8028f0 <__smakebuf_r+0x3c>

00802a48 <memset>:
  802a48:	008000c4 	movi	r2,3
  802a4c:	29403fcc 	andi	r5,r5,255
  802a50:	2007883a 	mov	r3,r4
  802a54:	1180022e 	bgeu	r2,r6,802a60 <memset+0x18>
  802a58:	2084703a 	and	r2,r4,r2
  802a5c:	10000826 	beq	r2,zero,802a80 <memset+0x38>
  802a60:	30000526 	beq	r6,zero,802a78 <memset+0x30>
  802a64:	2805883a 	mov	r2,r5
  802a68:	30cd883a 	add	r6,r6,r3
  802a6c:	18800005 	stb	r2,0(r3)
  802a70:	18c00044 	addi	r3,r3,1
  802a74:	19bffd1e 	bne	r3,r6,802a6c <memset+0x24>
  802a78:	2005883a 	mov	r2,r4
  802a7c:	f800283a 	ret
  802a80:	2804923a 	slli	r2,r5,8
  802a84:	020003c4 	movi	r8,15
  802a88:	200f883a 	mov	r7,r4
  802a8c:	2884b03a 	or	r2,r5,r2
  802a90:	1006943a 	slli	r3,r2,16
  802a94:	10c6b03a 	or	r3,r2,r3
  802a98:	41800a2e 	bgeu	r8,r6,802ac4 <memset+0x7c>
  802a9c:	4005883a 	mov	r2,r8
  802aa0:	31bffc04 	addi	r6,r6,-16
  802aa4:	38c00015 	stw	r3,0(r7)
  802aa8:	38c00115 	stw	r3,4(r7)
  802aac:	38c00215 	stw	r3,8(r7)
  802ab0:	38c00315 	stw	r3,12(r7)
  802ab4:	39c00404 	addi	r7,r7,16
  802ab8:	11bff936 	bltu	r2,r6,802aa0 <memset+0x58>
  802abc:	008000c4 	movi	r2,3
  802ac0:	1180052e 	bgeu	r2,r6,802ad8 <memset+0x90>
  802ac4:	31bfff04 	addi	r6,r6,-4
  802ac8:	008000c4 	movi	r2,3
  802acc:	38c00015 	stw	r3,0(r7)
  802ad0:	39c00104 	addi	r7,r7,4
  802ad4:	11bffb36 	bltu	r2,r6,802ac4 <memset+0x7c>
  802ad8:	3807883a 	mov	r3,r7
  802adc:	003fe006 	br	802a60 <memset+0x18>

00802ae0 <__sclose>:
  802ae0:	2940038f 	ldh	r5,14(r5)
  802ae4:	0802ca41 	jmpi	802ca4 <_close_r>

00802ae8 <__sseek>:
  802ae8:	defffe04 	addi	sp,sp,-8
  802aec:	dc000015 	stw	r16,0(sp)
  802af0:	2821883a 	mov	r16,r5
  802af4:	2940038f 	ldh	r5,14(r5)
  802af8:	dfc00115 	stw	ra,4(sp)
  802afc:	0802f1c0 	call	802f1c <_lseek_r>
  802b00:	1007883a 	mov	r3,r2
  802b04:	00bfffc4 	movi	r2,-1
  802b08:	18800926 	beq	r3,r2,802b30 <__sseek+0x48>
  802b0c:	8080030b 	ldhu	r2,12(r16)
  802b10:	80c01415 	stw	r3,80(r16)
  802b14:	10840014 	ori	r2,r2,4096
  802b18:	8080030d 	sth	r2,12(r16)
  802b1c:	1805883a 	mov	r2,r3
  802b20:	dfc00117 	ldw	ra,4(sp)
  802b24:	dc000017 	ldw	r16,0(sp)
  802b28:	dec00204 	addi	sp,sp,8
  802b2c:	f800283a 	ret
  802b30:	8080030b 	ldhu	r2,12(r16)
  802b34:	10bbffcc 	andi	r2,r2,61439
  802b38:	8080030d 	sth	r2,12(r16)
  802b3c:	1805883a 	mov	r2,r3
  802b40:	dfc00117 	ldw	ra,4(sp)
  802b44:	dc000017 	ldw	r16,0(sp)
  802b48:	dec00204 	addi	sp,sp,8
  802b4c:	f800283a 	ret

00802b50 <__swrite>:
  802b50:	2880030b 	ldhu	r2,12(r5)
  802b54:	defffb04 	addi	sp,sp,-20
  802b58:	dcc00315 	stw	r19,12(sp)
  802b5c:	1080400c 	andi	r2,r2,256
  802b60:	dc800215 	stw	r18,8(sp)
  802b64:	dc400115 	stw	r17,4(sp)
  802b68:	dc000015 	stw	r16,0(sp)
  802b6c:	3027883a 	mov	r19,r6
  802b70:	3825883a 	mov	r18,r7
  802b74:	dfc00415 	stw	ra,16(sp)
  802b78:	2821883a 	mov	r16,r5
  802b7c:	000d883a 	mov	r6,zero
  802b80:	01c00084 	movi	r7,2
  802b84:	2023883a 	mov	r17,r4
  802b88:	10000226 	beq	r2,zero,802b94 <__swrite+0x44>
  802b8c:	2940038f 	ldh	r5,14(r5)
  802b90:	0802f1c0 	call	802f1c <_lseek_r>
  802b94:	8080030b 	ldhu	r2,12(r16)
  802b98:	8140038f 	ldh	r5,14(r16)
  802b9c:	8809883a 	mov	r4,r17
  802ba0:	10bbffcc 	andi	r2,r2,61439
  802ba4:	980d883a 	mov	r6,r19
  802ba8:	900f883a 	mov	r7,r18
  802bac:	8080030d 	sth	r2,12(r16)
  802bb0:	dfc00417 	ldw	ra,16(sp)
  802bb4:	dcc00317 	ldw	r19,12(sp)
  802bb8:	dc800217 	ldw	r18,8(sp)
  802bbc:	dc400117 	ldw	r17,4(sp)
  802bc0:	dc000017 	ldw	r16,0(sp)
  802bc4:	dec00504 	addi	sp,sp,20
  802bc8:	0802c2c1 	jmpi	802c2c <_write_r>

00802bcc <__sread>:
  802bcc:	defffe04 	addi	sp,sp,-8
  802bd0:	dc000015 	stw	r16,0(sp)
  802bd4:	2821883a 	mov	r16,r5
  802bd8:	2940038f 	ldh	r5,14(r5)
  802bdc:	dfc00115 	stw	ra,4(sp)
  802be0:	0802f940 	call	802f94 <_read_r>
  802be4:	1007883a 	mov	r3,r2
  802be8:	10000816 	blt	r2,zero,802c0c <__sread+0x40>
  802bec:	80801417 	ldw	r2,80(r16)
  802bf0:	10c5883a 	add	r2,r2,r3
  802bf4:	80801415 	stw	r2,80(r16)
  802bf8:	1805883a 	mov	r2,r3
  802bfc:	dfc00117 	ldw	ra,4(sp)
  802c00:	dc000017 	ldw	r16,0(sp)
  802c04:	dec00204 	addi	sp,sp,8
  802c08:	f800283a 	ret
  802c0c:	8080030b 	ldhu	r2,12(r16)
  802c10:	10bbffcc 	andi	r2,r2,61439
  802c14:	8080030d 	sth	r2,12(r16)
  802c18:	1805883a 	mov	r2,r3
  802c1c:	dfc00117 	ldw	ra,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00204 	addi	sp,sp,8
  802c28:	f800283a 	ret

00802c2c <_write_r>:
  802c2c:	defffd04 	addi	sp,sp,-12
  802c30:	dc000015 	stw	r16,0(sp)
  802c34:	04002074 	movhi	r16,129
  802c38:	84279704 	addi	r16,r16,-24996
  802c3c:	dc400115 	stw	r17,4(sp)
  802c40:	80000015 	stw	zero,0(r16)
  802c44:	2023883a 	mov	r17,r4
  802c48:	2809883a 	mov	r4,r5
  802c4c:	300b883a 	mov	r5,r6
  802c50:	380d883a 	mov	r6,r7
  802c54:	dfc00215 	stw	ra,8(sp)
  802c58:	0803b5c0 	call	803b5c <write>
  802c5c:	1007883a 	mov	r3,r2
  802c60:	00bfffc4 	movi	r2,-1
  802c64:	18800626 	beq	r3,r2,802c80 <_write_r+0x54>
  802c68:	1805883a 	mov	r2,r3
  802c6c:	dfc00217 	ldw	ra,8(sp)
  802c70:	dc400117 	ldw	r17,4(sp)
  802c74:	dc000017 	ldw	r16,0(sp)
  802c78:	dec00304 	addi	sp,sp,12
  802c7c:	f800283a 	ret
  802c80:	80800017 	ldw	r2,0(r16)
  802c84:	103ff826 	beq	r2,zero,802c68 <_write_r+0x3c>
  802c88:	88800015 	stw	r2,0(r17)
  802c8c:	1805883a 	mov	r2,r3
  802c90:	dfc00217 	ldw	ra,8(sp)
  802c94:	dc400117 	ldw	r17,4(sp)
  802c98:	dc000017 	ldw	r16,0(sp)
  802c9c:	dec00304 	addi	sp,sp,12
  802ca0:	f800283a 	ret

00802ca4 <_close_r>:
  802ca4:	defffd04 	addi	sp,sp,-12
  802ca8:	dc000015 	stw	r16,0(sp)
  802cac:	04002074 	movhi	r16,129
  802cb0:	84279704 	addi	r16,r16,-24996
  802cb4:	dc400115 	stw	r17,4(sp)
  802cb8:	80000015 	stw	zero,0(r16)
  802cbc:	2023883a 	mov	r17,r4
  802cc0:	2809883a 	mov	r4,r5
  802cc4:	dfc00215 	stw	ra,8(sp)
  802cc8:	080300c0 	call	80300c <close>
  802ccc:	1007883a 	mov	r3,r2
  802cd0:	00bfffc4 	movi	r2,-1
  802cd4:	18800626 	beq	r3,r2,802cf0 <_close_r+0x4c>
  802cd8:	1805883a 	mov	r2,r3
  802cdc:	dfc00217 	ldw	ra,8(sp)
  802ce0:	dc400117 	ldw	r17,4(sp)
  802ce4:	dc000017 	ldw	r16,0(sp)
  802ce8:	dec00304 	addi	sp,sp,12
  802cec:	f800283a 	ret
  802cf0:	80800017 	ldw	r2,0(r16)
  802cf4:	103ff826 	beq	r2,zero,802cd8 <_close_r+0x34>
  802cf8:	88800015 	stw	r2,0(r17)
  802cfc:	1805883a 	mov	r2,r3
  802d00:	dfc00217 	ldw	ra,8(sp)
  802d04:	dc400117 	ldw	r17,4(sp)
  802d08:	dc000017 	ldw	r16,0(sp)
  802d0c:	dec00304 	addi	sp,sp,12
  802d10:	f800283a 	ret

00802d14 <_fclose_r>:
  802d14:	defffc04 	addi	sp,sp,-16
  802d18:	dc400115 	stw	r17,4(sp)
  802d1c:	dc000015 	stw	r16,0(sp)
  802d20:	dfc00315 	stw	ra,12(sp)
  802d24:	dc800215 	stw	r18,8(sp)
  802d28:	2821883a 	mov	r16,r5
  802d2c:	2023883a 	mov	r17,r4
  802d30:	28002926 	beq	r5,zero,802dd8 <_fclose_r+0xc4>
  802d34:	080208c0 	call	80208c <__sfp_lock_acquire>
  802d38:	88000226 	beq	r17,zero,802d44 <_fclose_r+0x30>
  802d3c:	88800e17 	ldw	r2,56(r17)
  802d40:	10002d26 	beq	r2,zero,802df8 <_fclose_r+0xe4>
  802d44:	8080030f 	ldh	r2,12(r16)
  802d48:	10002226 	beq	r2,zero,802dd4 <_fclose_r+0xc0>
  802d4c:	8809883a 	mov	r4,r17
  802d50:	800b883a 	mov	r5,r16
  802d54:	0801e040 	call	801e04 <_fflush_r>
  802d58:	1025883a 	mov	r18,r2
  802d5c:	80800b17 	ldw	r2,44(r16)
  802d60:	10000426 	beq	r2,zero,802d74 <_fclose_r+0x60>
  802d64:	81400717 	ldw	r5,28(r16)
  802d68:	8809883a 	mov	r4,r17
  802d6c:	103ee83a 	callr	r2
  802d70:	10002a16 	blt	r2,zero,802e1c <_fclose_r+0x108>
  802d74:	8080030b 	ldhu	r2,12(r16)
  802d78:	1080200c 	andi	r2,r2,128
  802d7c:	1000231e 	bne	r2,zero,802e0c <_fclose_r+0xf8>
  802d80:	81400c17 	ldw	r5,48(r16)
  802d84:	28000526 	beq	r5,zero,802d9c <_fclose_r+0x88>
  802d88:	80801004 	addi	r2,r16,64
  802d8c:	28800226 	beq	r5,r2,802d98 <_fclose_r+0x84>
  802d90:	8809883a 	mov	r4,r17
  802d94:	08024200 	call	802420 <_free_r>
  802d98:	80000c15 	stw	zero,48(r16)
  802d9c:	81401117 	ldw	r5,68(r16)
  802da0:	28000326 	beq	r5,zero,802db0 <_fclose_r+0x9c>
  802da4:	8809883a 	mov	r4,r17
  802da8:	08024200 	call	802420 <_free_r>
  802dac:	80001115 	stw	zero,68(r16)
  802db0:	8000030d 	sth	zero,12(r16)
  802db4:	08020900 	call	802090 <__sfp_lock_release>
  802db8:	9005883a 	mov	r2,r18
  802dbc:	dfc00317 	ldw	ra,12(sp)
  802dc0:	dc800217 	ldw	r18,8(sp)
  802dc4:	dc400117 	ldw	r17,4(sp)
  802dc8:	dc000017 	ldw	r16,0(sp)
  802dcc:	dec00404 	addi	sp,sp,16
  802dd0:	f800283a 	ret
  802dd4:	08020900 	call	802090 <__sfp_lock_release>
  802dd8:	0025883a 	mov	r18,zero
  802ddc:	9005883a 	mov	r2,r18
  802de0:	dfc00317 	ldw	ra,12(sp)
  802de4:	dc800217 	ldw	r18,8(sp)
  802de8:	dc400117 	ldw	r17,4(sp)
  802dec:	dc000017 	ldw	r16,0(sp)
  802df0:	dec00404 	addi	sp,sp,16
  802df4:	f800283a 	ret
  802df8:	8809883a 	mov	r4,r17
  802dfc:	080209c0 	call	80209c <__sinit>
  802e00:	8080030f 	ldh	r2,12(r16)
  802e04:	103fd11e 	bne	r2,zero,802d4c <_fclose_r+0x38>
  802e08:	003ff206 	br	802dd4 <_fclose_r+0xc0>
  802e0c:	81400417 	ldw	r5,16(r16)
  802e10:	8809883a 	mov	r4,r17
  802e14:	08024200 	call	802420 <_free_r>
  802e18:	003fd906 	br	802d80 <_fclose_r+0x6c>
  802e1c:	04bfffc4 	movi	r18,-1
  802e20:	003fd406 	br	802d74 <_fclose_r+0x60>

00802e24 <fclose>:
  802e24:	00802074 	movhi	r2,129
  802e28:	10a0c304 	addi	r2,r2,-31988
  802e2c:	200b883a 	mov	r5,r4
  802e30:	11000017 	ldw	r4,0(r2)
  802e34:	0802d141 	jmpi	802d14 <_fclose_r>

00802e38 <_fstat_r>:
  802e38:	defffd04 	addi	sp,sp,-12
  802e3c:	dc000015 	stw	r16,0(sp)
  802e40:	04002074 	movhi	r16,129
  802e44:	84279704 	addi	r16,r16,-24996
  802e48:	dc400115 	stw	r17,4(sp)
  802e4c:	80000015 	stw	zero,0(r16)
  802e50:	2023883a 	mov	r17,r4
  802e54:	2809883a 	mov	r4,r5
  802e58:	300b883a 	mov	r5,r6
  802e5c:	dfc00215 	stw	ra,8(sp)
  802e60:	08031940 	call	803194 <fstat>
  802e64:	1007883a 	mov	r3,r2
  802e68:	00bfffc4 	movi	r2,-1
  802e6c:	18800626 	beq	r3,r2,802e88 <_fstat_r+0x50>
  802e70:	1805883a 	mov	r2,r3
  802e74:	dfc00217 	ldw	ra,8(sp)
  802e78:	dc400117 	ldw	r17,4(sp)
  802e7c:	dc000017 	ldw	r16,0(sp)
  802e80:	dec00304 	addi	sp,sp,12
  802e84:	f800283a 	ret
  802e88:	80800017 	ldw	r2,0(r16)
  802e8c:	103ff826 	beq	r2,zero,802e70 <_fstat_r+0x38>
  802e90:	88800015 	stw	r2,0(r17)
  802e94:	1805883a 	mov	r2,r3
  802e98:	dfc00217 	ldw	ra,8(sp)
  802e9c:	dc400117 	ldw	r17,4(sp)
  802ea0:	dc000017 	ldw	r16,0(sp)
  802ea4:	dec00304 	addi	sp,sp,12
  802ea8:	f800283a 	ret

00802eac <_isatty_r>:
  802eac:	defffd04 	addi	sp,sp,-12
  802eb0:	dc000015 	stw	r16,0(sp)
  802eb4:	04002074 	movhi	r16,129
  802eb8:	84279704 	addi	r16,r16,-24996
  802ebc:	dc400115 	stw	r17,4(sp)
  802ec0:	80000015 	stw	zero,0(r16)
  802ec4:	2023883a 	mov	r17,r4
  802ec8:	2809883a 	mov	r4,r5
  802ecc:	dfc00215 	stw	ra,8(sp)
  802ed0:	08034880 	call	803488 <isatty>
  802ed4:	1007883a 	mov	r3,r2
  802ed8:	00bfffc4 	movi	r2,-1
  802edc:	18800626 	beq	r3,r2,802ef8 <_isatty_r+0x4c>
  802ee0:	1805883a 	mov	r2,r3
  802ee4:	dfc00217 	ldw	ra,8(sp)
  802ee8:	dc400117 	ldw	r17,4(sp)
  802eec:	dc000017 	ldw	r16,0(sp)
  802ef0:	dec00304 	addi	sp,sp,12
  802ef4:	f800283a 	ret
  802ef8:	80800017 	ldw	r2,0(r16)
  802efc:	103ff826 	beq	r2,zero,802ee0 <_isatty_r+0x34>
  802f00:	88800015 	stw	r2,0(r17)
  802f04:	1805883a 	mov	r2,r3
  802f08:	dfc00217 	ldw	ra,8(sp)
  802f0c:	dc400117 	ldw	r17,4(sp)
  802f10:	dc000017 	ldw	r16,0(sp)
  802f14:	dec00304 	addi	sp,sp,12
  802f18:	f800283a 	ret

00802f1c <_lseek_r>:
  802f1c:	defffd04 	addi	sp,sp,-12
  802f20:	dc000015 	stw	r16,0(sp)
  802f24:	04002074 	movhi	r16,129
  802f28:	84279704 	addi	r16,r16,-24996
  802f2c:	dc400115 	stw	r17,4(sp)
  802f30:	80000015 	stw	zero,0(r16)
  802f34:	2023883a 	mov	r17,r4
  802f38:	2809883a 	mov	r4,r5
  802f3c:	300b883a 	mov	r5,r6
  802f40:	380d883a 	mov	r6,r7
  802f44:	dfc00215 	stw	ra,8(sp)
  802f48:	08036940 	call	803694 <lseek>
  802f4c:	1007883a 	mov	r3,r2
  802f50:	00bfffc4 	movi	r2,-1
  802f54:	18800626 	beq	r3,r2,802f70 <_lseek_r+0x54>
  802f58:	1805883a 	mov	r2,r3
  802f5c:	dfc00217 	ldw	ra,8(sp)
  802f60:	dc400117 	ldw	r17,4(sp)
  802f64:	dc000017 	ldw	r16,0(sp)
  802f68:	dec00304 	addi	sp,sp,12
  802f6c:	f800283a 	ret
  802f70:	80800017 	ldw	r2,0(r16)
  802f74:	103ff826 	beq	r2,zero,802f58 <_lseek_r+0x3c>
  802f78:	88800015 	stw	r2,0(r17)
  802f7c:	1805883a 	mov	r2,r3
  802f80:	dfc00217 	ldw	ra,8(sp)
  802f84:	dc400117 	ldw	r17,4(sp)
  802f88:	dc000017 	ldw	r16,0(sp)
  802f8c:	dec00304 	addi	sp,sp,12
  802f90:	f800283a 	ret

00802f94 <_read_r>:
  802f94:	defffd04 	addi	sp,sp,-12
  802f98:	dc000015 	stw	r16,0(sp)
  802f9c:	04002074 	movhi	r16,129
  802fa0:	84279704 	addi	r16,r16,-24996
  802fa4:	dc400115 	stw	r17,4(sp)
  802fa8:	80000015 	stw	zero,0(r16)
  802fac:	2023883a 	mov	r17,r4
  802fb0:	2809883a 	mov	r4,r5
  802fb4:	300b883a 	mov	r5,r6
  802fb8:	380d883a 	mov	r6,r7
  802fbc:	dfc00215 	stw	ra,8(sp)
  802fc0:	08038900 	call	803890 <read>
  802fc4:	1007883a 	mov	r3,r2
  802fc8:	00bfffc4 	movi	r2,-1
  802fcc:	18800626 	beq	r3,r2,802fe8 <_read_r+0x54>
  802fd0:	1805883a 	mov	r2,r3
  802fd4:	dfc00217 	ldw	ra,8(sp)
  802fd8:	dc400117 	ldw	r17,4(sp)
  802fdc:	dc000017 	ldw	r16,0(sp)
  802fe0:	dec00304 	addi	sp,sp,12
  802fe4:	f800283a 	ret
  802fe8:	80800017 	ldw	r2,0(r16)
  802fec:	103ff826 	beq	r2,zero,802fd0 <_read_r+0x3c>
  802ff0:	88800015 	stw	r2,0(r17)
  802ff4:	1805883a 	mov	r2,r3
  802ff8:	dfc00217 	ldw	ra,8(sp)
  802ffc:	dc400117 	ldw	r17,4(sp)
  803000:	dc000017 	ldw	r16,0(sp)
  803004:	dec00304 	addi	sp,sp,12
  803008:	f800283a 	ret

0080300c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80300c:	defff804 	addi	sp,sp,-32
  803010:	dfc00715 	stw	ra,28(sp)
  803014:	df000615 	stw	fp,24(sp)
  803018:	df000604 	addi	fp,sp,24
  80301c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803020:	e0bffc17 	ldw	r2,-16(fp)
  803024:	1004803a 	cmplt	r2,r2,zero
  803028:	1000081e 	bne	r2,zero,80304c <close+0x40>
  80302c:	e0bffc17 	ldw	r2,-16(fp)
  803030:	10800324 	muli	r2,r2,12
  803034:	1007883a 	mov	r3,r2
  803038:	00802034 	movhi	r2,128
  80303c:	109c1a04 	addi	r2,r2,28776
  803040:	1887883a 	add	r3,r3,r2
  803044:	e0ffff15 	stw	r3,-4(fp)
  803048:	00000106 	br	803050 <close+0x44>
  80304c:	e03fff15 	stw	zero,-4(fp)
  803050:	e0bfff17 	ldw	r2,-4(fp)
  803054:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  803058:	e0bffb17 	ldw	r2,-20(fp)
  80305c:	1005003a 	cmpeq	r2,r2,zero
  803060:	10001d1e 	bne	r2,zero,8030d8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803064:	e0bffb17 	ldw	r2,-20(fp)
  803068:	10800017 	ldw	r2,0(r2)
  80306c:	10800417 	ldw	r2,16(r2)
  803070:	1005003a 	cmpeq	r2,r2,zero
  803074:	1000071e 	bne	r2,zero,803094 <close+0x88>
  803078:	e0bffb17 	ldw	r2,-20(fp)
  80307c:	10800017 	ldw	r2,0(r2)
  803080:	10800417 	ldw	r2,16(r2)
  803084:	e13ffb17 	ldw	r4,-20(fp)
  803088:	103ee83a 	callr	r2
  80308c:	e0bffe15 	stw	r2,-8(fp)
  803090:	00000106 	br	803098 <close+0x8c>
  803094:	e03ffe15 	stw	zero,-8(fp)
  803098:	e0bffe17 	ldw	r2,-8(fp)
  80309c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8030a0:	e13ffc17 	ldw	r4,-16(fp)
  8030a4:	0803a100 	call	803a10 <alt_release_fd>
    if (rval < 0)
  8030a8:	e0bffa17 	ldw	r2,-24(fp)
  8030ac:	1004403a 	cmpge	r2,r2,zero
  8030b0:	1000071e 	bne	r2,zero,8030d0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8030b4:	08031080 	call	803108 <alt_get_errno>
  8030b8:	e0fffa17 	ldw	r3,-24(fp)
  8030bc:	00c7c83a 	sub	r3,zero,r3
  8030c0:	10c00015 	stw	r3,0(r2)
      return -1;
  8030c4:	00bfffc4 	movi	r2,-1
  8030c8:	e0bffd15 	stw	r2,-12(fp)
  8030cc:	00000806 	br	8030f0 <close+0xe4>
    }
    return 0;
  8030d0:	e03ffd15 	stw	zero,-12(fp)
  8030d4:	00000606 	br	8030f0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8030d8:	08031080 	call	803108 <alt_get_errno>
  8030dc:	1007883a 	mov	r3,r2
  8030e0:	00801444 	movi	r2,81
  8030e4:	18800015 	stw	r2,0(r3)
    return -1;
  8030e8:	00bfffc4 	movi	r2,-1
  8030ec:	e0bffd15 	stw	r2,-12(fp)
  8030f0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8030f4:	e037883a 	mov	sp,fp
  8030f8:	dfc00117 	ldw	ra,4(sp)
  8030fc:	df000017 	ldw	fp,0(sp)
  803100:	dec00204 	addi	sp,sp,8
  803104:	f800283a 	ret

00803108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803108:	defffd04 	addi	sp,sp,-12
  80310c:	dfc00215 	stw	ra,8(sp)
  803110:	df000115 	stw	fp,4(sp)
  803114:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803118:	00802074 	movhi	r2,129
  80311c:	10a0cc04 	addi	r2,r2,-31952
  803120:	10800017 	ldw	r2,0(r2)
  803124:	1005003a 	cmpeq	r2,r2,zero
  803128:	1000061e 	bne	r2,zero,803144 <alt_get_errno+0x3c>
  80312c:	00802074 	movhi	r2,129
  803130:	10a0cc04 	addi	r2,r2,-31952
  803134:	10800017 	ldw	r2,0(r2)
  803138:	103ee83a 	callr	r2
  80313c:	e0bfff15 	stw	r2,-4(fp)
  803140:	00000306 	br	803150 <alt_get_errno+0x48>
  803144:	00802074 	movhi	r2,129
  803148:	10a79704 	addi	r2,r2,-24996
  80314c:	e0bfff15 	stw	r2,-4(fp)
  803150:	e0bfff17 	ldw	r2,-4(fp)
}
  803154:	e037883a 	mov	sp,fp
  803158:	dfc00117 	ldw	ra,4(sp)
  80315c:	df000017 	ldw	fp,0(sp)
  803160:	dec00204 	addi	sp,sp,8
  803164:	f800283a 	ret

00803168 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803168:	defffc04 	addi	sp,sp,-16
  80316c:	df000315 	stw	fp,12(sp)
  803170:	df000304 	addi	fp,sp,12
  803174:	e13ffd15 	stw	r4,-12(fp)
  803178:	e17ffe15 	stw	r5,-8(fp)
  80317c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803180:	e0bfff17 	ldw	r2,-4(fp)
}
  803184:	e037883a 	mov	sp,fp
  803188:	df000017 	ldw	fp,0(sp)
  80318c:	dec00104 	addi	sp,sp,4
  803190:	f800283a 	ret

00803194 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803194:	defff904 	addi	sp,sp,-28
  803198:	dfc00615 	stw	ra,24(sp)
  80319c:	df000515 	stw	fp,20(sp)
  8031a0:	df000504 	addi	fp,sp,20
  8031a4:	e13ffc15 	stw	r4,-16(fp)
  8031a8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8031ac:	e0bffc17 	ldw	r2,-16(fp)
  8031b0:	1004803a 	cmplt	r2,r2,zero
  8031b4:	1000081e 	bne	r2,zero,8031d8 <fstat+0x44>
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	10800324 	muli	r2,r2,12
  8031c0:	1007883a 	mov	r3,r2
  8031c4:	00802034 	movhi	r2,128
  8031c8:	109c1a04 	addi	r2,r2,28776
  8031cc:	1887883a 	add	r3,r3,r2
  8031d0:	e0ffff15 	stw	r3,-4(fp)
  8031d4:	00000106 	br	8031dc <fstat+0x48>
  8031d8:	e03fff15 	stw	zero,-4(fp)
  8031dc:	e0bfff17 	ldw	r2,-4(fp)
  8031e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8031e4:	e0bffb17 	ldw	r2,-20(fp)
  8031e8:	1005003a 	cmpeq	r2,r2,zero
  8031ec:	1000121e 	bne	r2,zero,803238 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8031f0:	e0bffb17 	ldw	r2,-20(fp)
  8031f4:	10800017 	ldw	r2,0(r2)
  8031f8:	10800817 	ldw	r2,32(r2)
  8031fc:	1005003a 	cmpeq	r2,r2,zero
  803200:	1000081e 	bne	r2,zero,803224 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  803204:	e0bffb17 	ldw	r2,-20(fp)
  803208:	10800017 	ldw	r2,0(r2)
  80320c:	10800817 	ldw	r2,32(r2)
  803210:	e13ffb17 	ldw	r4,-20(fp)
  803214:	e17ffd17 	ldw	r5,-12(fp)
  803218:	103ee83a 	callr	r2
  80321c:	e0bffe15 	stw	r2,-8(fp)
  803220:	00000b06 	br	803250 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803224:	e0fffd17 	ldw	r3,-12(fp)
  803228:	00880004 	movi	r2,8192
  80322c:	18800115 	stw	r2,4(r3)
      return 0;
  803230:	e03ffe15 	stw	zero,-8(fp)
  803234:	00000606 	br	803250 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803238:	08032680 	call	803268 <alt_get_errno>
  80323c:	1007883a 	mov	r3,r2
  803240:	00801444 	movi	r2,81
  803244:	18800015 	stw	r2,0(r3)
    return -1;
  803248:	00bfffc4 	movi	r2,-1
  80324c:	e0bffe15 	stw	r2,-8(fp)
  803250:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  803254:	e037883a 	mov	sp,fp
  803258:	dfc00117 	ldw	ra,4(sp)
  80325c:	df000017 	ldw	fp,0(sp)
  803260:	dec00204 	addi	sp,sp,8
  803264:	f800283a 	ret

00803268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803268:	defffd04 	addi	sp,sp,-12
  80326c:	dfc00215 	stw	ra,8(sp)
  803270:	df000115 	stw	fp,4(sp)
  803274:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803278:	00802074 	movhi	r2,129
  80327c:	10a0cc04 	addi	r2,r2,-31952
  803280:	10800017 	ldw	r2,0(r2)
  803284:	1005003a 	cmpeq	r2,r2,zero
  803288:	1000061e 	bne	r2,zero,8032a4 <alt_get_errno+0x3c>
  80328c:	00802074 	movhi	r2,129
  803290:	10a0cc04 	addi	r2,r2,-31952
  803294:	10800017 	ldw	r2,0(r2)
  803298:	103ee83a 	callr	r2
  80329c:	e0bfff15 	stw	r2,-4(fp)
  8032a0:	00000306 	br	8032b0 <alt_get_errno+0x48>
  8032a4:	00802074 	movhi	r2,129
  8032a8:	10a79704 	addi	r2,r2,-24996
  8032ac:	e0bfff15 	stw	r2,-4(fp)
  8032b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8032b4:	e037883a 	mov	sp,fp
  8032b8:	dfc00117 	ldw	ra,4(sp)
  8032bc:	df000017 	ldw	fp,0(sp)
  8032c0:	dec00204 	addi	sp,sp,8
  8032c4:	f800283a 	ret

008032c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8032c8:	deffef04 	addi	sp,sp,-68
  8032cc:	df001015 	stw	fp,64(sp)
  8032d0:	df001004 	addi	fp,sp,64
  8032d4:	e13ffc15 	stw	r4,-16(fp)
  8032d8:	e17ffd15 	stw	r5,-12(fp)
  8032dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8032e0:	00bffa84 	movi	r2,-22
  8032e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10800828 	cmpgeui	r2,r2,32
  8032f0:	1000601e 	bne	r2,zero,803474 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8032f4:	0005303a 	rdctl	r2,status
  8032f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8032fc:	e0fff917 	ldw	r3,-28(fp)
  803300:	00bfff84 	movi	r2,-2
  803304:	1884703a 	and	r2,r3,r2
  803308:	1001703a 	wrctl	status,r2
  
  return context;
  80330c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  803310:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  803314:	e0bffc17 	ldw	r2,-16(fp)
  803318:	00c02074 	movhi	r3,129
  80331c:	18e7a804 	addi	r3,r3,-24928
  803320:	100490fa 	slli	r2,r2,3
  803324:	10c7883a 	add	r3,r2,r3
  803328:	e0bffe17 	ldw	r2,-8(fp)
  80332c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	00c02074 	movhi	r3,129
  803338:	18e7a804 	addi	r3,r3,-24928
  80333c:	100490fa 	slli	r2,r2,3
  803340:	10c5883a 	add	r2,r2,r3
  803344:	10c00104 	addi	r3,r2,4
  803348:	e0bffd17 	ldw	r2,-12(fp)
  80334c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803350:	e0bffe17 	ldw	r2,-8(fp)
  803354:	1005003a 	cmpeq	r2,r2,zero
  803358:	1000201e 	bne	r2,zero,8033dc <alt_irq_register+0x114>
  80335c:	e0bffc17 	ldw	r2,-16(fp)
  803360:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803364:	0005303a 	rdctl	r2,status
  803368:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80336c:	e0fff617 	ldw	r3,-40(fp)
  803370:	00bfff84 	movi	r2,-2
  803374:	1884703a 	and	r2,r3,r2
  803378:	1001703a 	wrctl	status,r2
  
  return context;
  80337c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803380:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  803384:	e0fff717 	ldw	r3,-36(fp)
  803388:	00800044 	movi	r2,1
  80338c:	10c4983a 	sll	r2,r2,r3
  803390:	1007883a 	mov	r3,r2
  803394:	00802074 	movhi	r2,129
  803398:	10a79804 	addi	r2,r2,-24992
  80339c:	10800017 	ldw	r2,0(r2)
  8033a0:	1886b03a 	or	r3,r3,r2
  8033a4:	00802074 	movhi	r2,129
  8033a8:	10a79804 	addi	r2,r2,-24992
  8033ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8033b0:	00802074 	movhi	r2,129
  8033b4:	10a79804 	addi	r2,r2,-24992
  8033b8:	10800017 	ldw	r2,0(r2)
  8033bc:	100170fa 	wrctl	ienable,r2
  8033c0:	e0bff817 	ldw	r2,-32(fp)
  8033c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8033c8:	e0bff517 	ldw	r2,-44(fp)
  8033cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8033d0:	0005883a 	mov	r2,zero
  8033d4:	e0bfff15 	stw	r2,-4(fp)
  8033d8:	00002006 	br	80345c <alt_irq_register+0x194>
  8033dc:	e0bffc17 	ldw	r2,-16(fp)
  8033e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033e4:	0005303a 	rdctl	r2,status
  8033e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033ec:	e0fff217 	ldw	r3,-56(fp)
  8033f0:	00bfff84 	movi	r2,-2
  8033f4:	1884703a 	and	r2,r3,r2
  8033f8:	1001703a 	wrctl	status,r2
  
  return context;
  8033fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803400:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  803404:	e0fff317 	ldw	r3,-52(fp)
  803408:	00800044 	movi	r2,1
  80340c:	10c4983a 	sll	r2,r2,r3
  803410:	0084303a 	nor	r2,zero,r2
  803414:	1007883a 	mov	r3,r2
  803418:	00802074 	movhi	r2,129
  80341c:	10a79804 	addi	r2,r2,-24992
  803420:	10800017 	ldw	r2,0(r2)
  803424:	1886703a 	and	r3,r3,r2
  803428:	00802074 	movhi	r2,129
  80342c:	10a79804 	addi	r2,r2,-24992
  803430:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803434:	00802074 	movhi	r2,129
  803438:	10a79804 	addi	r2,r2,-24992
  80343c:	10800017 	ldw	r2,0(r2)
  803440:	100170fa 	wrctl	ienable,r2
  803444:	e0bff417 	ldw	r2,-48(fp)
  803448:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80344c:	e0bff117 	ldw	r2,-60(fp)
  803450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803454:	0005883a 	mov	r2,zero
  803458:	e0bfff15 	stw	r2,-4(fp)
  80345c:	e0bfff17 	ldw	r2,-4(fp)
  803460:	e0bffb15 	stw	r2,-20(fp)
  803464:	e0bffa17 	ldw	r2,-24(fp)
  803468:	e0bff015 	stw	r2,-64(fp)
  80346c:	e0bff017 	ldw	r2,-64(fp)
  803470:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  803474:	e0bffb17 	ldw	r2,-20(fp)
}
  803478:	e037883a 	mov	sp,fp
  80347c:	df000017 	ldw	fp,0(sp)
  803480:	dec00104 	addi	sp,sp,4
  803484:	f800283a 	ret

00803488 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803488:	deffeb04 	addi	sp,sp,-84
  80348c:	dfc01415 	stw	ra,80(sp)
  803490:	df001315 	stw	fp,76(sp)
  803494:	df001304 	addi	fp,sp,76
  803498:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80349c:	e0bffd17 	ldw	r2,-12(fp)
  8034a0:	1004803a 	cmplt	r2,r2,zero
  8034a4:	1000081e 	bne	r2,zero,8034c8 <isatty+0x40>
  8034a8:	e0bffd17 	ldw	r2,-12(fp)
  8034ac:	10800324 	muli	r2,r2,12
  8034b0:	1007883a 	mov	r3,r2
  8034b4:	00802034 	movhi	r2,128
  8034b8:	109c1a04 	addi	r2,r2,28776
  8034bc:	1887883a 	add	r3,r3,r2
  8034c0:	e0ffff15 	stw	r3,-4(fp)
  8034c4:	00000106 	br	8034cc <isatty+0x44>
  8034c8:	e03fff15 	stw	zero,-4(fp)
  8034cc:	e0bfff17 	ldw	r2,-4(fp)
  8034d0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8034d4:	e0bfed17 	ldw	r2,-76(fp)
  8034d8:	1005003a 	cmpeq	r2,r2,zero
  8034dc:	10000f1e 	bne	r2,zero,80351c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8034e0:	e0bfed17 	ldw	r2,-76(fp)
  8034e4:	10800017 	ldw	r2,0(r2)
  8034e8:	10800817 	ldw	r2,32(r2)
  8034ec:	1004c03a 	cmpne	r2,r2,zero
  8034f0:	1000031e 	bne	r2,zero,803500 <isatty+0x78>
    {
      return 1;
  8034f4:	00800044 	movi	r2,1
  8034f8:	e0bffe15 	stw	r2,-8(fp)
  8034fc:	00000c06 	br	803530 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803500:	e17fee04 	addi	r5,fp,-72
  803504:	e13ffd17 	ldw	r4,-12(fp)
  803508:	08031940 	call	803194 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80350c:	e0bfef17 	ldw	r2,-68(fp)
  803510:	10880020 	cmpeqi	r2,r2,8192
  803514:	e0bffe15 	stw	r2,-8(fp)
  803518:	00000506 	br	803530 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80351c:	08035480 	call	803548 <alt_get_errno>
  803520:	1007883a 	mov	r3,r2
  803524:	00801444 	movi	r2,81
  803528:	18800015 	stw	r2,0(r3)
    return 0;
  80352c:	e03ffe15 	stw	zero,-8(fp)
  803530:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  803534:	e037883a 	mov	sp,fp
  803538:	dfc00117 	ldw	ra,4(sp)
  80353c:	df000017 	ldw	fp,0(sp)
  803540:	dec00204 	addi	sp,sp,8
  803544:	f800283a 	ret

00803548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803548:	defffd04 	addi	sp,sp,-12
  80354c:	dfc00215 	stw	ra,8(sp)
  803550:	df000115 	stw	fp,4(sp)
  803554:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803558:	00802074 	movhi	r2,129
  80355c:	10a0cc04 	addi	r2,r2,-31952
  803560:	10800017 	ldw	r2,0(r2)
  803564:	1005003a 	cmpeq	r2,r2,zero
  803568:	1000061e 	bne	r2,zero,803584 <alt_get_errno+0x3c>
  80356c:	00802074 	movhi	r2,129
  803570:	10a0cc04 	addi	r2,r2,-31952
  803574:	10800017 	ldw	r2,0(r2)
  803578:	103ee83a 	callr	r2
  80357c:	e0bfff15 	stw	r2,-4(fp)
  803580:	00000306 	br	803590 <alt_get_errno+0x48>
  803584:	00802074 	movhi	r2,129
  803588:	10a79704 	addi	r2,r2,-24996
  80358c:	e0bfff15 	stw	r2,-4(fp)
  803590:	e0bfff17 	ldw	r2,-4(fp)
}
  803594:	e037883a 	mov	sp,fp
  803598:	dfc00117 	ldw	ra,4(sp)
  80359c:	df000017 	ldw	fp,0(sp)
  8035a0:	dec00204 	addi	sp,sp,8
  8035a4:	f800283a 	ret

008035a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8035a8:	defffe04 	addi	sp,sp,-8
  8035ac:	dfc00115 	stw	ra,4(sp)
  8035b0:	df000015 	stw	fp,0(sp)
  8035b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8035b8:	01002074 	movhi	r4,129
  8035bc:	2120d104 	addi	r4,r4,-31932
  8035c0:	01402034 	movhi	r5,128
  8035c4:	295a0e04 	addi	r5,r5,26680
  8035c8:	01802074 	movhi	r6,129
  8035cc:	31a0d104 	addi	r6,r6,-31932
  8035d0:	08036280 	call	803628 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8035d4:	01002034 	movhi	r4,128
  8035d8:	21000804 	addi	r4,r4,32
  8035dc:	01402034 	movhi	r5,128
  8035e0:	29400804 	addi	r5,r5,32
  8035e4:	01802034 	movhi	r6,128
  8035e8:	31806d04 	addi	r6,r6,436
  8035ec:	08036280 	call	803628 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8035f0:	01002034 	movhi	r4,128
  8035f4:	2119f704 	addi	r4,r4,26588
  8035f8:	01402034 	movhi	r5,128
  8035fc:	2959f704 	addi	r5,r5,26588
  803600:	01802034 	movhi	r6,128
  803604:	319a0e04 	addi	r6,r6,26680
  803608:	08036280 	call	803628 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80360c:	08054a80 	call	8054a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803610:	08056c80 	call	8056c8 <alt_icache_flush_all>
}
  803614:	e037883a 	mov	sp,fp
  803618:	dfc00117 	ldw	ra,4(sp)
  80361c:	df000017 	ldw	fp,0(sp)
  803620:	dec00204 	addi	sp,sp,8
  803624:	f800283a 	ret

00803628 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803628:	defffc04 	addi	sp,sp,-16
  80362c:	df000315 	stw	fp,12(sp)
  803630:	df000304 	addi	fp,sp,12
  803634:	e13ffd15 	stw	r4,-12(fp)
  803638:	e17ffe15 	stw	r5,-8(fp)
  80363c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803640:	e0fffe17 	ldw	r3,-8(fp)
  803644:	e0bffd17 	ldw	r2,-12(fp)
  803648:	18800e26 	beq	r3,r2,803684 <alt_load_section+0x5c>
  {
    while( to != end )
  80364c:	00000a06 	br	803678 <alt_load_section+0x50>
    {
      *to++ = *from++;
  803650:	e0bffd17 	ldw	r2,-12(fp)
  803654:	10c00017 	ldw	r3,0(r2)
  803658:	e0bffe17 	ldw	r2,-8(fp)
  80365c:	10c00015 	stw	r3,0(r2)
  803660:	e0bffe17 	ldw	r2,-8(fp)
  803664:	10800104 	addi	r2,r2,4
  803668:	e0bffe15 	stw	r2,-8(fp)
  80366c:	e0bffd17 	ldw	r2,-12(fp)
  803670:	10800104 	addi	r2,r2,4
  803674:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803678:	e0fffe17 	ldw	r3,-8(fp)
  80367c:	e0bfff17 	ldw	r2,-4(fp)
  803680:	18bff31e 	bne	r3,r2,803650 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  803684:	e037883a 	mov	sp,fp
  803688:	df000017 	ldw	fp,0(sp)
  80368c:	dec00104 	addi	sp,sp,4
  803690:	f800283a 	ret

00803694 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803694:	defff804 	addi	sp,sp,-32
  803698:	dfc00715 	stw	ra,28(sp)
  80369c:	df000615 	stw	fp,24(sp)
  8036a0:	df000604 	addi	fp,sp,24
  8036a4:	e13ffc15 	stw	r4,-16(fp)
  8036a8:	e17ffd15 	stw	r5,-12(fp)
  8036ac:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8036b0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8036b4:	e0bffc17 	ldw	r2,-16(fp)
  8036b8:	1004803a 	cmplt	r2,r2,zero
  8036bc:	1000081e 	bne	r2,zero,8036e0 <lseek+0x4c>
  8036c0:	e0bffc17 	ldw	r2,-16(fp)
  8036c4:	10800324 	muli	r2,r2,12
  8036c8:	1007883a 	mov	r3,r2
  8036cc:	00802034 	movhi	r2,128
  8036d0:	109c1a04 	addi	r2,r2,28776
  8036d4:	1887883a 	add	r3,r3,r2
  8036d8:	e0ffff15 	stw	r3,-4(fp)
  8036dc:	00000106 	br	8036e4 <lseek+0x50>
  8036e0:	e03fff15 	stw	zero,-4(fp)
  8036e4:	e0bfff17 	ldw	r2,-4(fp)
  8036e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8036ec:	e0bffb17 	ldw	r2,-20(fp)
  8036f0:	1005003a 	cmpeq	r2,r2,zero
  8036f4:	1000111e 	bne	r2,zero,80373c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8036f8:	e0bffb17 	ldw	r2,-20(fp)
  8036fc:	10800017 	ldw	r2,0(r2)
  803700:	10800717 	ldw	r2,28(r2)
  803704:	1005003a 	cmpeq	r2,r2,zero
  803708:	1000091e 	bne	r2,zero,803730 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80370c:	e0bffb17 	ldw	r2,-20(fp)
  803710:	10800017 	ldw	r2,0(r2)
  803714:	10800717 	ldw	r2,28(r2)
  803718:	e13ffb17 	ldw	r4,-20(fp)
  80371c:	e17ffd17 	ldw	r5,-12(fp)
  803720:	e1bffe17 	ldw	r6,-8(fp)
  803724:	103ee83a 	callr	r2
  803728:	e0bffa15 	stw	r2,-24(fp)
  80372c:	00000506 	br	803744 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803730:	00bfde84 	movi	r2,-134
  803734:	e0bffa15 	stw	r2,-24(fp)
  803738:	00000206 	br	803744 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80373c:	00bfebc4 	movi	r2,-81
  803740:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  803744:	e0bffa17 	ldw	r2,-24(fp)
  803748:	1004403a 	cmpge	r2,r2,zero
  80374c:	1000071e 	bne	r2,zero,80376c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  803750:	08037840 	call	803784 <alt_get_errno>
  803754:	1007883a 	mov	r3,r2
  803758:	e0bffa17 	ldw	r2,-24(fp)
  80375c:	0085c83a 	sub	r2,zero,r2
  803760:	18800015 	stw	r2,0(r3)
    rc = -1;
  803764:	00bfffc4 	movi	r2,-1
  803768:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80376c:	e0bffa17 	ldw	r2,-24(fp)
}
  803770:	e037883a 	mov	sp,fp
  803774:	dfc00117 	ldw	ra,4(sp)
  803778:	df000017 	ldw	fp,0(sp)
  80377c:	dec00204 	addi	sp,sp,8
  803780:	f800283a 	ret

00803784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803784:	defffd04 	addi	sp,sp,-12
  803788:	dfc00215 	stw	ra,8(sp)
  80378c:	df000115 	stw	fp,4(sp)
  803790:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803794:	00802074 	movhi	r2,129
  803798:	10a0cc04 	addi	r2,r2,-31952
  80379c:	10800017 	ldw	r2,0(r2)
  8037a0:	1005003a 	cmpeq	r2,r2,zero
  8037a4:	1000061e 	bne	r2,zero,8037c0 <alt_get_errno+0x3c>
  8037a8:	00802074 	movhi	r2,129
  8037ac:	10a0cc04 	addi	r2,r2,-31952
  8037b0:	10800017 	ldw	r2,0(r2)
  8037b4:	103ee83a 	callr	r2
  8037b8:	e0bfff15 	stw	r2,-4(fp)
  8037bc:	00000306 	br	8037cc <alt_get_errno+0x48>
  8037c0:	00802074 	movhi	r2,129
  8037c4:	10a79704 	addi	r2,r2,-24996
  8037c8:	e0bfff15 	stw	r2,-4(fp)
  8037cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8037d0:	e037883a 	mov	sp,fp
  8037d4:	dfc00117 	ldw	ra,4(sp)
  8037d8:	df000017 	ldw	fp,0(sp)
  8037dc:	dec00204 	addi	sp,sp,8
  8037e0:	f800283a 	ret

008037e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8037e4:	defffd04 	addi	sp,sp,-12
  8037e8:	dfc00215 	stw	ra,8(sp)
  8037ec:	df000115 	stw	fp,4(sp)
  8037f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8037f4:	0009883a 	mov	r4,zero
  8037f8:	0803cdc0 	call	803cdc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8037fc:	0803d100 	call	803d10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803800:	01002034 	movhi	r4,128
  803804:	211a0304 	addi	r4,r4,26636
  803808:	01402034 	movhi	r5,128
  80380c:	295a0304 	addi	r5,r5,26636
  803810:	01802034 	movhi	r6,128
  803814:	319a0304 	addi	r6,r6,26636
  803818:	0805a880 	call	805a88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80381c:	08056000 	call	805600 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803820:	01002034 	movhi	r4,128
  803824:	21159904 	addi	r4,r4,22116
  803828:	08062840 	call	806284 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80382c:	d126d617 	ldw	r4,-25768(gp)
  803830:	d166d717 	ldw	r5,-25764(gp)
  803834:	d1a6d817 	ldw	r6,-25760(gp)
  803838:	08003600 	call	800360 <main>
  80383c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803840:	01000044 	movi	r4,1
  803844:	080300c0 	call	80300c <close>
  exit (result);
  803848:	e13fff17 	ldw	r4,-4(fp)
  80384c:	08062980 	call	806298 <exit>

00803850 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803850:	defffe04 	addi	sp,sp,-8
  803854:	df000115 	stw	fp,4(sp)
  803858:	df000104 	addi	fp,sp,4
  80385c:	e13fff15 	stw	r4,-4(fp)
}
  803860:	e037883a 	mov	sp,fp
  803864:	df000017 	ldw	fp,0(sp)
  803868:	dec00104 	addi	sp,sp,4
  80386c:	f800283a 	ret

00803870 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803870:	defffe04 	addi	sp,sp,-8
  803874:	df000115 	stw	fp,4(sp)
  803878:	df000104 	addi	fp,sp,4
  80387c:	e13fff15 	stw	r4,-4(fp)
}
  803880:	e037883a 	mov	sp,fp
  803884:	df000017 	ldw	fp,0(sp)
  803888:	dec00104 	addi	sp,sp,4
  80388c:	f800283a 	ret

00803890 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  803890:	defff704 	addi	sp,sp,-36
  803894:	dfc00815 	stw	ra,32(sp)
  803898:	df000715 	stw	fp,28(sp)
  80389c:	df000704 	addi	fp,sp,28
  8038a0:	e13ffb15 	stw	r4,-20(fp)
  8038a4:	e17ffc15 	stw	r5,-16(fp)
  8038a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8038ac:	e0bffb17 	ldw	r2,-20(fp)
  8038b0:	1004803a 	cmplt	r2,r2,zero
  8038b4:	1000081e 	bne	r2,zero,8038d8 <read+0x48>
  8038b8:	e0bffb17 	ldw	r2,-20(fp)
  8038bc:	10800324 	muli	r2,r2,12
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	00802034 	movhi	r2,128
  8038c8:	109c1a04 	addi	r2,r2,28776
  8038cc:	1887883a 	add	r3,r3,r2
  8038d0:	e0ffff15 	stw	r3,-4(fp)
  8038d4:	00000106 	br	8038dc <read+0x4c>
  8038d8:	e03fff15 	stw	zero,-4(fp)
  8038dc:	e0bfff17 	ldw	r2,-4(fp)
  8038e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8038e4:	e0bffa17 	ldw	r2,-24(fp)
  8038e8:	1005003a 	cmpeq	r2,r2,zero
  8038ec:	1000241e 	bne	r2,zero,803980 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8038f0:	e0bffa17 	ldw	r2,-24(fp)
  8038f4:	10800217 	ldw	r2,8(r2)
  8038f8:	108000cc 	andi	r2,r2,3
  8038fc:	10800060 	cmpeqi	r2,r2,1
  803900:	10001a1e 	bne	r2,zero,80396c <read+0xdc>
  803904:	e0bffa17 	ldw	r2,-24(fp)
  803908:	10800017 	ldw	r2,0(r2)
  80390c:	10800517 	ldw	r2,20(r2)
  803910:	1005003a 	cmpeq	r2,r2,zero
  803914:	1000151e 	bne	r2,zero,80396c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803918:	e0bffa17 	ldw	r2,-24(fp)
  80391c:	10800017 	ldw	r2,0(r2)
  803920:	10800517 	ldw	r2,20(r2)
  803924:	e17ffc17 	ldw	r5,-16(fp)
  803928:	e1bffd17 	ldw	r6,-12(fp)
  80392c:	e13ffa17 	ldw	r4,-24(fp)
  803930:	103ee83a 	callr	r2
  803934:	e0bff915 	stw	r2,-28(fp)
  803938:	e0bff917 	ldw	r2,-28(fp)
  80393c:	1004403a 	cmpge	r2,r2,zero
  803940:	1000071e 	bne	r2,zero,803960 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  803944:	08039b00 	call	8039b0 <alt_get_errno>
  803948:	e0fff917 	ldw	r3,-28(fp)
  80394c:	00c7c83a 	sub	r3,zero,r3
  803950:	10c00015 	stw	r3,0(r2)
          return -1;
  803954:	00bfffc4 	movi	r2,-1
  803958:	e0bffe15 	stw	r2,-8(fp)
  80395c:	00000e06 	br	803998 <read+0x108>
        }
        return rval;
  803960:	e0bff917 	ldw	r2,-28(fp)
  803964:	e0bffe15 	stw	r2,-8(fp)
  803968:	00000b06 	br	803998 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80396c:	08039b00 	call	8039b0 <alt_get_errno>
  803970:	1007883a 	mov	r3,r2
  803974:	00800344 	movi	r2,13
  803978:	18800015 	stw	r2,0(r3)
  80397c:	00000406 	br	803990 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803980:	08039b00 	call	8039b0 <alt_get_errno>
  803984:	1007883a 	mov	r3,r2
  803988:	00801444 	movi	r2,81
  80398c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803990:	00bfffc4 	movi	r2,-1
  803994:	e0bffe15 	stw	r2,-8(fp)
  803998:	e0bffe17 	ldw	r2,-8(fp)
}
  80399c:	e037883a 	mov	sp,fp
  8039a0:	dfc00117 	ldw	ra,4(sp)
  8039a4:	df000017 	ldw	fp,0(sp)
  8039a8:	dec00204 	addi	sp,sp,8
  8039ac:	f800283a 	ret

008039b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8039b0:	defffd04 	addi	sp,sp,-12
  8039b4:	dfc00215 	stw	ra,8(sp)
  8039b8:	df000115 	stw	fp,4(sp)
  8039bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8039c0:	00802074 	movhi	r2,129
  8039c4:	10a0cc04 	addi	r2,r2,-31952
  8039c8:	10800017 	ldw	r2,0(r2)
  8039cc:	1005003a 	cmpeq	r2,r2,zero
  8039d0:	1000061e 	bne	r2,zero,8039ec <alt_get_errno+0x3c>
  8039d4:	00802074 	movhi	r2,129
  8039d8:	10a0cc04 	addi	r2,r2,-31952
  8039dc:	10800017 	ldw	r2,0(r2)
  8039e0:	103ee83a 	callr	r2
  8039e4:	e0bfff15 	stw	r2,-4(fp)
  8039e8:	00000306 	br	8039f8 <alt_get_errno+0x48>
  8039ec:	00802074 	movhi	r2,129
  8039f0:	10a79704 	addi	r2,r2,-24996
  8039f4:	e0bfff15 	stw	r2,-4(fp)
  8039f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8039fc:	e037883a 	mov	sp,fp
  803a00:	dfc00117 	ldw	ra,4(sp)
  803a04:	df000017 	ldw	fp,0(sp)
  803a08:	dec00204 	addi	sp,sp,8
  803a0c:	f800283a 	ret

00803a10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803a10:	defffe04 	addi	sp,sp,-8
  803a14:	df000115 	stw	fp,4(sp)
  803a18:	df000104 	addi	fp,sp,4
  803a1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803a20:	e0bfff17 	ldw	r2,-4(fp)
  803a24:	108000d0 	cmplti	r2,r2,3
  803a28:	10000d1e 	bne	r2,zero,803a60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803a2c:	e0bfff17 	ldw	r2,-4(fp)
  803a30:	00c02034 	movhi	r3,128
  803a34:	18dc1a04 	addi	r3,r3,28776
  803a38:	10800324 	muli	r2,r2,12
  803a3c:	10c5883a 	add	r2,r2,r3
  803a40:	10800204 	addi	r2,r2,8
  803a44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803a48:	e0bfff17 	ldw	r2,-4(fp)
  803a4c:	00c02034 	movhi	r3,128
  803a50:	18dc1a04 	addi	r3,r3,28776
  803a54:	10800324 	muli	r2,r2,12
  803a58:	10c5883a 	add	r2,r2,r3
  803a5c:	10000015 	stw	zero,0(r2)
  }
}
  803a60:	e037883a 	mov	sp,fp
  803a64:	df000017 	ldw	fp,0(sp)
  803a68:	dec00104 	addi	sp,sp,4
  803a6c:	f800283a 	ret

00803a70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803a70:	defff804 	addi	sp,sp,-32
  803a74:	df000715 	stw	fp,28(sp)
  803a78:	df000704 	addi	fp,sp,28
  803a7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803a80:	0005303a 	rdctl	r2,status
  803a84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803a88:	e0fffb17 	ldw	r3,-20(fp)
  803a8c:	00bfff84 	movi	r2,-2
  803a90:	1884703a 	and	r2,r3,r2
  803a94:	1001703a 	wrctl	status,r2
  
  return context;
  803a98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803a9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803aa0:	d0a00b17 	ldw	r2,-32724(gp)
  803aa4:	10c000c4 	addi	r3,r2,3
  803aa8:	00bfff04 	movi	r2,-4
  803aac:	1884703a 	and	r2,r3,r2
  803ab0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803ab4:	d0e00b17 	ldw	r3,-32724(gp)
  803ab8:	e0bffe17 	ldw	r2,-8(fp)
  803abc:	1887883a 	add	r3,r3,r2
  803ac0:	00804034 	movhi	r2,256
  803ac4:	10800004 	addi	r2,r2,0
  803ac8:	10c0072e 	bgeu	r2,r3,803ae8 <sbrk+0x78>
  803acc:	e0bffd17 	ldw	r2,-12(fp)
  803ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ad4:	e0bffa17 	ldw	r2,-24(fp)
  803ad8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803adc:	00bfffc4 	movi	r2,-1
  803ae0:	e0bfff15 	stw	r2,-4(fp)
  803ae4:	00000c06 	br	803b18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  803ae8:	d0a00b17 	ldw	r2,-32724(gp)
  803aec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  803af0:	d0e00b17 	ldw	r3,-32724(gp)
  803af4:	e0bffe17 	ldw	r2,-8(fp)
  803af8:	1885883a 	add	r2,r3,r2
  803afc:	d0a00b15 	stw	r2,-32724(gp)
  803b00:	e0bffd17 	ldw	r2,-12(fp)
  803b04:	e0bff915 	stw	r2,-28(fp)
  803b08:	e0bff917 	ldw	r2,-28(fp)
  803b0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803b10:	e0bffc17 	ldw	r2,-16(fp)
  803b14:	e0bfff15 	stw	r2,-4(fp)
  803b18:	e0bfff17 	ldw	r2,-4(fp)
} 
  803b1c:	e037883a 	mov	sp,fp
  803b20:	df000017 	ldw	fp,0(sp)
  803b24:	dec00104 	addi	sp,sp,4
  803b28:	f800283a 	ret

00803b2c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803b2c:	defffd04 	addi	sp,sp,-12
  803b30:	dfc00215 	stw	ra,8(sp)
  803b34:	df000115 	stw	fp,4(sp)
  803b38:	df000104 	addi	fp,sp,4
  803b3c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803b40:	e13fff17 	ldw	r4,-4(fp)
  803b44:	080535c0 	call	80535c <alt_busy_sleep>
}
  803b48:	e037883a 	mov	sp,fp
  803b4c:	dfc00117 	ldw	ra,4(sp)
  803b50:	df000017 	ldw	fp,0(sp)
  803b54:	dec00204 	addi	sp,sp,8
  803b58:	f800283a 	ret

00803b5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803b5c:	defff704 	addi	sp,sp,-36
  803b60:	dfc00815 	stw	ra,32(sp)
  803b64:	df000715 	stw	fp,28(sp)
  803b68:	df000704 	addi	fp,sp,28
  803b6c:	e13ffb15 	stw	r4,-20(fp)
  803b70:	e17ffc15 	stw	r5,-16(fp)
  803b74:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803b78:	e0bffb17 	ldw	r2,-20(fp)
  803b7c:	1004803a 	cmplt	r2,r2,zero
  803b80:	1000081e 	bne	r2,zero,803ba4 <write+0x48>
  803b84:	e0bffb17 	ldw	r2,-20(fp)
  803b88:	10800324 	muli	r2,r2,12
  803b8c:	1007883a 	mov	r3,r2
  803b90:	00802034 	movhi	r2,128
  803b94:	109c1a04 	addi	r2,r2,28776
  803b98:	1887883a 	add	r3,r3,r2
  803b9c:	e0ffff15 	stw	r3,-4(fp)
  803ba0:	00000106 	br	803ba8 <write+0x4c>
  803ba4:	e03fff15 	stw	zero,-4(fp)
  803ba8:	e0bfff17 	ldw	r2,-4(fp)
  803bac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  803bb0:	e0bffa17 	ldw	r2,-24(fp)
  803bb4:	1005003a 	cmpeq	r2,r2,zero
  803bb8:	1000241e 	bne	r2,zero,803c4c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803bbc:	e0bffa17 	ldw	r2,-24(fp)
  803bc0:	10800217 	ldw	r2,8(r2)
  803bc4:	108000cc 	andi	r2,r2,3
  803bc8:	1005003a 	cmpeq	r2,r2,zero
  803bcc:	10001a1e 	bne	r2,zero,803c38 <write+0xdc>
  803bd0:	e0bffa17 	ldw	r2,-24(fp)
  803bd4:	10800017 	ldw	r2,0(r2)
  803bd8:	10800617 	ldw	r2,24(r2)
  803bdc:	1005003a 	cmpeq	r2,r2,zero
  803be0:	1000151e 	bne	r2,zero,803c38 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803be4:	e0bffa17 	ldw	r2,-24(fp)
  803be8:	10800017 	ldw	r2,0(r2)
  803bec:	10800617 	ldw	r2,24(r2)
  803bf0:	e17ffc17 	ldw	r5,-16(fp)
  803bf4:	e1bffd17 	ldw	r6,-12(fp)
  803bf8:	e13ffa17 	ldw	r4,-24(fp)
  803bfc:	103ee83a 	callr	r2
  803c00:	e0bff915 	stw	r2,-28(fp)
  803c04:	e0bff917 	ldw	r2,-28(fp)
  803c08:	1004403a 	cmpge	r2,r2,zero
  803c0c:	1000071e 	bne	r2,zero,803c2c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  803c10:	0803c7c0 	call	803c7c <alt_get_errno>
  803c14:	e0fff917 	ldw	r3,-28(fp)
  803c18:	00c7c83a 	sub	r3,zero,r3
  803c1c:	10c00015 	stw	r3,0(r2)
        return -1;
  803c20:	00bfffc4 	movi	r2,-1
  803c24:	e0bffe15 	stw	r2,-8(fp)
  803c28:	00000e06 	br	803c64 <write+0x108>
      }
      return rval;
  803c2c:	e0bff917 	ldw	r2,-28(fp)
  803c30:	e0bffe15 	stw	r2,-8(fp)
  803c34:	00000b06 	br	803c64 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803c38:	0803c7c0 	call	803c7c <alt_get_errno>
  803c3c:	1007883a 	mov	r3,r2
  803c40:	00800344 	movi	r2,13
  803c44:	18800015 	stw	r2,0(r3)
  803c48:	00000406 	br	803c5c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803c4c:	0803c7c0 	call	803c7c <alt_get_errno>
  803c50:	1007883a 	mov	r3,r2
  803c54:	00801444 	movi	r2,81
  803c58:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803c5c:	00bfffc4 	movi	r2,-1
  803c60:	e0bffe15 	stw	r2,-8(fp)
  803c64:	e0bffe17 	ldw	r2,-8(fp)
}
  803c68:	e037883a 	mov	sp,fp
  803c6c:	dfc00117 	ldw	ra,4(sp)
  803c70:	df000017 	ldw	fp,0(sp)
  803c74:	dec00204 	addi	sp,sp,8
  803c78:	f800283a 	ret

00803c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803c7c:	defffd04 	addi	sp,sp,-12
  803c80:	dfc00215 	stw	ra,8(sp)
  803c84:	df000115 	stw	fp,4(sp)
  803c88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803c8c:	00802074 	movhi	r2,129
  803c90:	10a0cc04 	addi	r2,r2,-31952
  803c94:	10800017 	ldw	r2,0(r2)
  803c98:	1005003a 	cmpeq	r2,r2,zero
  803c9c:	1000061e 	bne	r2,zero,803cb8 <alt_get_errno+0x3c>
  803ca0:	00802074 	movhi	r2,129
  803ca4:	10a0cc04 	addi	r2,r2,-31952
  803ca8:	10800017 	ldw	r2,0(r2)
  803cac:	103ee83a 	callr	r2
  803cb0:	e0bfff15 	stw	r2,-4(fp)
  803cb4:	00000306 	br	803cc4 <alt_get_errno+0x48>
  803cb8:	00802074 	movhi	r2,129
  803cbc:	10a79704 	addi	r2,r2,-24996
  803cc0:	e0bfff15 	stw	r2,-4(fp)
  803cc4:	e0bfff17 	ldw	r2,-4(fp)
}
  803cc8:	e037883a 	mov	sp,fp
  803ccc:	dfc00117 	ldw	ra,4(sp)
  803cd0:	df000017 	ldw	fp,0(sp)
  803cd4:	dec00204 	addi	sp,sp,8
  803cd8:	f800283a 	ret

00803cdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803cdc:	defffd04 	addi	sp,sp,-12
  803ce0:	dfc00215 	stw	ra,8(sp)
  803ce4:	df000115 	stw	fp,4(sp)
  803ce8:	df000104 	addi	fp,sp,4
  803cec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
  803cf0:	0805f680 	call	805f68 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803cf4:	00800044 	movi	r2,1
  803cf8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803cfc:	e037883a 	mov	sp,fp
  803d00:	dfc00117 	ldw	ra,4(sp)
  803d04:	df000017 	ldw	fp,0(sp)
  803d08:	dec00204 	addi	sp,sp,8
  803d0c:	f800283a 	ret

00803d10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803d10:	defffe04 	addi	sp,sp,-8
  803d14:	dfc00115 	stw	ra,4(sp)
  803d18:	df000015 	stw	fp,0(sp)
  803d1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  803d20:	01002034 	movhi	r4,128
  803d24:	211c8404 	addi	r4,r4,29200
  803d28:	000b883a 	mov	r5,zero
  803d2c:	01800044 	movi	r6,1
  803d30:	0803ef40 	call	803ef4 <altera_avalon_jtag_uart_init>
  803d34:	01002034 	movhi	r4,128
  803d38:	211c7a04 	addi	r4,r4,29160
  803d3c:	0803d740 	call	803d74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( RS232, RS232);
  803d40:	01002074 	movhi	r4,129
  803d44:	21209c04 	addi	r4,r4,-32144
  803d48:	000b883a 	mov	r5,zero
  803d4c:	000d883a 	mov	r6,zero
  803d50:	08049500 	call	804950 <altera_avalon_uart_init>
  803d54:	01002074 	movhi	r4,129
  803d58:	21209204 	addi	r4,r4,-32184
  803d5c:	0803d740 	call	803d74 <alt_dev_reg>
}
  803d60:	e037883a 	mov	sp,fp
  803d64:	dfc00117 	ldw	ra,4(sp)
  803d68:	df000017 	ldw	fp,0(sp)
  803d6c:	dec00204 	addi	sp,sp,8
  803d70:	f800283a 	ret

00803d74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803d74:	defffd04 	addi	sp,sp,-12
  803d78:	dfc00215 	stw	ra,8(sp)
  803d7c:	df000115 	stw	fp,4(sp)
  803d80:	df000104 	addi	fp,sp,4
  803d84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803d88:	e13fff17 	ldw	r4,-4(fp)
  803d8c:	01402074 	movhi	r5,129
  803d90:	2960c904 	addi	r5,r5,-31964
  803d94:	08054ec0 	call	8054ec <alt_dev_llist_insert>
}
  803d98:	e037883a 	mov	sp,fp
  803d9c:	dfc00117 	ldw	ra,4(sp)
  803da0:	df000017 	ldw	fp,0(sp)
  803da4:	dec00204 	addi	sp,sp,8
  803da8:	f800283a 	ret

00803dac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803dac:	defffa04 	addi	sp,sp,-24
  803db0:	dfc00515 	stw	ra,20(sp)
  803db4:	df000415 	stw	fp,16(sp)
  803db8:	df000404 	addi	fp,sp,16
  803dbc:	e13ffd15 	stw	r4,-12(fp)
  803dc0:	e17ffe15 	stw	r5,-8(fp)
  803dc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803dc8:	e0bffd17 	ldw	r2,-12(fp)
  803dcc:	10800017 	ldw	r2,0(r2)
  803dd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803dd4:	e0bffc17 	ldw	r2,-16(fp)
  803dd8:	11000a04 	addi	r4,r2,40
  803ddc:	e0bffd17 	ldw	r2,-12(fp)
  803de0:	11c00217 	ldw	r7,8(r2)
  803de4:	e17ffe17 	ldw	r5,-8(fp)
  803de8:	e1bfff17 	ldw	r6,-4(fp)
  803dec:	08043f40 	call	8043f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803df0:	e037883a 	mov	sp,fp
  803df4:	dfc00117 	ldw	ra,4(sp)
  803df8:	df000017 	ldw	fp,0(sp)
  803dfc:	dec00204 	addi	sp,sp,8
  803e00:	f800283a 	ret

00803e04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803e04:	defffa04 	addi	sp,sp,-24
  803e08:	dfc00515 	stw	ra,20(sp)
  803e0c:	df000415 	stw	fp,16(sp)
  803e10:	df000404 	addi	fp,sp,16
  803e14:	e13ffd15 	stw	r4,-12(fp)
  803e18:	e17ffe15 	stw	r5,-8(fp)
  803e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803e20:	e0bffd17 	ldw	r2,-12(fp)
  803e24:	10800017 	ldw	r2,0(r2)
  803e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803e2c:	e0bffc17 	ldw	r2,-16(fp)
  803e30:	11000a04 	addi	r4,r2,40
  803e34:	e0bffd17 	ldw	r2,-12(fp)
  803e38:	11c00217 	ldw	r7,8(r2)
  803e3c:	e17ffe17 	ldw	r5,-8(fp)
  803e40:	e1bfff17 	ldw	r6,-4(fp)
  803e44:	08046180 	call	804618 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803e48:	e037883a 	mov	sp,fp
  803e4c:	dfc00117 	ldw	ra,4(sp)
  803e50:	df000017 	ldw	fp,0(sp)
  803e54:	dec00204 	addi	sp,sp,8
  803e58:	f800283a 	ret

00803e5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803e5c:	defffc04 	addi	sp,sp,-16
  803e60:	dfc00315 	stw	ra,12(sp)
  803e64:	df000215 	stw	fp,8(sp)
  803e68:	df000204 	addi	fp,sp,8
  803e6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803e70:	e0bfff17 	ldw	r2,-4(fp)
  803e74:	10800017 	ldw	r2,0(r2)
  803e78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803e7c:	e0bffe17 	ldw	r2,-8(fp)
  803e80:	11000a04 	addi	r4,r2,40
  803e84:	e0bfff17 	ldw	r2,-4(fp)
  803e88:	11400217 	ldw	r5,8(r2)
  803e8c:	080428c0 	call	80428c <altera_avalon_jtag_uart_close>
}
  803e90:	e037883a 	mov	sp,fp
  803e94:	dfc00117 	ldw	ra,4(sp)
  803e98:	df000017 	ldw	fp,0(sp)
  803e9c:	dec00204 	addi	sp,sp,8
  803ea0:	f800283a 	ret

00803ea4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803ea4:	defffa04 	addi	sp,sp,-24
  803ea8:	dfc00515 	stw	ra,20(sp)
  803eac:	df000415 	stw	fp,16(sp)
  803eb0:	df000404 	addi	fp,sp,16
  803eb4:	e13ffd15 	stw	r4,-12(fp)
  803eb8:	e17ffe15 	stw	r5,-8(fp)
  803ebc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803ec0:	e0bffd17 	ldw	r2,-12(fp)
  803ec4:	10800017 	ldw	r2,0(r2)
  803ec8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803ecc:	e0bffc17 	ldw	r2,-16(fp)
  803ed0:	11000a04 	addi	r4,r2,40
  803ed4:	e17ffe17 	ldw	r5,-8(fp)
  803ed8:	e1bfff17 	ldw	r6,-4(fp)
  803edc:	08043000 	call	804300 <altera_avalon_jtag_uart_ioctl>
}
  803ee0:	e037883a 	mov	sp,fp
  803ee4:	dfc00117 	ldw	ra,4(sp)
  803ee8:	df000017 	ldw	fp,0(sp)
  803eec:	dec00204 	addi	sp,sp,8
  803ef0:	f800283a 	ret

00803ef4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803ef4:	defffa04 	addi	sp,sp,-24
  803ef8:	dfc00515 	stw	ra,20(sp)
  803efc:	df000415 	stw	fp,16(sp)
  803f00:	df000404 	addi	fp,sp,16
  803f04:	e13ffd15 	stw	r4,-12(fp)
  803f08:	e17ffe15 	stw	r5,-8(fp)
  803f0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803f10:	e0fffd17 	ldw	r3,-12(fp)
  803f14:	00800044 	movi	r2,1
  803f18:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  803f1c:	e0bffd17 	ldw	r2,-12(fp)
  803f20:	10800017 	ldw	r2,0(r2)
  803f24:	11000104 	addi	r4,r2,4
  803f28:	e0bffd17 	ldw	r2,-12(fp)
  803f2c:	10800817 	ldw	r2,32(r2)
  803f30:	1007883a 	mov	r3,r2
  803f34:	2005883a 	mov	r2,r4
  803f38:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  803f3c:	e13ffe17 	ldw	r4,-8(fp)
  803f40:	e17fff17 	ldw	r5,-4(fp)
  803f44:	d8000015 	stw	zero,0(sp)
  803f48:	01802034 	movhi	r6,128
  803f4c:	318fed04 	addi	r6,r6,16308
  803f50:	e1fffd17 	ldw	r7,-12(fp)
  803f54:	08056f80 	call	8056f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803f58:	e0bffd17 	ldw	r2,-12(fp)
  803f5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803f60:	e0bffd17 	ldw	r2,-12(fp)
  803f64:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803f68:	00802074 	movhi	r2,129
  803f6c:	10a79c04 	addi	r2,r2,-24976
  803f70:	10800017 	ldw	r2,0(r2)
  803f74:	100b883a 	mov	r5,r2
  803f78:	01802034 	movhi	r6,128
  803f7c:	31907704 	addi	r6,r6,16860
  803f80:	e1fffd17 	ldw	r7,-12(fp)
  803f84:	08052080 	call	805208 <alt_alarm_start>
  803f88:	1004403a 	cmpge	r2,r2,zero
  803f8c:	1000041e 	bne	r2,zero,803fa0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  803f90:	e0fffd17 	ldw	r3,-12(fp)
  803f94:	00a00034 	movhi	r2,32768
  803f98:	10bfffc4 	addi	r2,r2,-1
  803f9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  803fa0:	e037883a 	mov	sp,fp
  803fa4:	dfc00117 	ldw	ra,4(sp)
  803fa8:	df000017 	ldw	fp,0(sp)
  803fac:	dec00204 	addi	sp,sp,8
  803fb0:	f800283a 	ret

00803fb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  803fb4:	defff804 	addi	sp,sp,-32
  803fb8:	df000715 	stw	fp,28(sp)
  803fbc:	df000704 	addi	fp,sp,28
  803fc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  803fc4:	e0bfff17 	ldw	r2,-4(fp)
  803fc8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  803fcc:	e0bffe17 	ldw	r2,-8(fp)
  803fd0:	10800017 	ldw	r2,0(r2)
  803fd4:	e0bffd15 	stw	r2,-12(fp)
  803fd8:	00000006 	br	803fdc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803fdc:	e0bffd17 	ldw	r2,-12(fp)
  803fe0:	10800104 	addi	r2,r2,4
  803fe4:	10800037 	ldwio	r2,0(r2)
  803fe8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  803fec:	e0bffc17 	ldw	r2,-16(fp)
  803ff0:	1080c00c 	andi	r2,r2,768
  803ff4:	1005003a 	cmpeq	r2,r2,zero
  803ff8:	1000741e 	bne	r2,zero,8041cc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  803ffc:	e0bffc17 	ldw	r2,-16(fp)
  804000:	1080400c 	andi	r2,r2,256
  804004:	1005003a 	cmpeq	r2,r2,zero
  804008:	1000351e 	bne	r2,zero,8040e0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80400c:	00800074 	movhi	r2,1
  804010:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804014:	e0bffe17 	ldw	r2,-8(fp)
  804018:	10800a17 	ldw	r2,40(r2)
  80401c:	10800044 	addi	r2,r2,1
  804020:	1081ffcc 	andi	r2,r2,2047
  804024:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  804028:	e0bffe17 	ldw	r2,-8(fp)
  80402c:	10c00b17 	ldw	r3,44(r2)
  804030:	e0bffa17 	ldw	r2,-24(fp)
  804034:	18801626 	beq	r3,r2,804090 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804038:	e0bffd17 	ldw	r2,-12(fp)
  80403c:	10800037 	ldwio	r2,0(r2)
  804040:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804044:	e0bffb17 	ldw	r2,-20(fp)
  804048:	10a0000c 	andi	r2,r2,32768
  80404c:	1005003a 	cmpeq	r2,r2,zero
  804050:	10000f1e 	bne	r2,zero,804090 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804054:	e0bffe17 	ldw	r2,-8(fp)
  804058:	10c00a17 	ldw	r3,40(r2)
  80405c:	e0bffb17 	ldw	r2,-20(fp)
  804060:	1009883a 	mov	r4,r2
  804064:	e0bffe17 	ldw	r2,-8(fp)
  804068:	1885883a 	add	r2,r3,r2
  80406c:	10800e04 	addi	r2,r2,56
  804070:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804074:	e0bffe17 	ldw	r2,-8(fp)
  804078:	10800a17 	ldw	r2,40(r2)
  80407c:	10800044 	addi	r2,r2,1
  804080:	10c1ffcc 	andi	r3,r2,2047
  804084:	e0bffe17 	ldw	r2,-8(fp)
  804088:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80408c:	003fe106 	br	804014 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  804090:	e0bffb17 	ldw	r2,-20(fp)
  804094:	10bfffec 	andhi	r2,r2,65535
  804098:	1005003a 	cmpeq	r2,r2,zero
  80409c:	1000101e 	bne	r2,zero,8040e0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8040a0:	e0bffe17 	ldw	r2,-8(fp)
  8040a4:	10c00817 	ldw	r3,32(r2)
  8040a8:	00bfff84 	movi	r2,-2
  8040ac:	1886703a 	and	r3,r3,r2
  8040b0:	e0bffe17 	ldw	r2,-8(fp)
  8040b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8040b8:	e0bffd17 	ldw	r2,-12(fp)
  8040bc:	11000104 	addi	r4,r2,4
  8040c0:	e0bffe17 	ldw	r2,-8(fp)
  8040c4:	10800817 	ldw	r2,32(r2)
  8040c8:	1007883a 	mov	r3,r2
  8040cc:	2005883a 	mov	r2,r4
  8040d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8040d4:	e0bffd17 	ldw	r2,-12(fp)
  8040d8:	10800104 	addi	r2,r2,4
  8040dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8040e0:	e0bffc17 	ldw	r2,-16(fp)
  8040e4:	1080800c 	andi	r2,r2,512
  8040e8:	1005003a 	cmpeq	r2,r2,zero
  8040ec:	103fbb1e 	bne	r2,zero,803fdc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8040f0:	e0bffc17 	ldw	r2,-16(fp)
  8040f4:	10bfffec 	andhi	r2,r2,65535
  8040f8:	1004d43a 	srli	r2,r2,16
  8040fc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  804100:	00001506 	br	804158 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  804104:	e13ffd17 	ldw	r4,-12(fp)
  804108:	e0bffe17 	ldw	r2,-8(fp)
  80410c:	10c00d17 	ldw	r3,52(r2)
  804110:	e0bffe17 	ldw	r2,-8(fp)
  804114:	1885883a 	add	r2,r3,r2
  804118:	10820e04 	addi	r2,r2,2104
  80411c:	10800003 	ldbu	r2,0(r2)
  804120:	10c03fcc 	andi	r3,r2,255
  804124:	18c0201c 	xori	r3,r3,128
  804128:	18ffe004 	addi	r3,r3,-128
  80412c:	2005883a 	mov	r2,r4
  804130:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804134:	e0bffe17 	ldw	r2,-8(fp)
  804138:	10800d17 	ldw	r2,52(r2)
  80413c:	10800044 	addi	r2,r2,1
  804140:	10c1ffcc 	andi	r3,r2,2047
  804144:	e0bffe17 	ldw	r2,-8(fp)
  804148:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80414c:	e0bff917 	ldw	r2,-28(fp)
  804150:	10bfffc4 	addi	r2,r2,-1
  804154:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  804158:	e0bff917 	ldw	r2,-28(fp)
  80415c:	1005003a 	cmpeq	r2,r2,zero
  804160:	1000051e 	bne	r2,zero,804178 <altera_avalon_jtag_uart_irq+0x1c4>
  804164:	e0bffe17 	ldw	r2,-8(fp)
  804168:	10c00d17 	ldw	r3,52(r2)
  80416c:	e0bffe17 	ldw	r2,-8(fp)
  804170:	10800c17 	ldw	r2,48(r2)
  804174:	18bfe31e 	bne	r3,r2,804104 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804178:	e0bff917 	ldw	r2,-28(fp)
  80417c:	1005003a 	cmpeq	r2,r2,zero
  804180:	103f961e 	bne	r2,zero,803fdc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804184:	e0bffe17 	ldw	r2,-8(fp)
  804188:	10c00817 	ldw	r3,32(r2)
  80418c:	00bfff44 	movi	r2,-3
  804190:	1886703a 	and	r3,r3,r2
  804194:	e0bffe17 	ldw	r2,-8(fp)
  804198:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80419c:	e0bffe17 	ldw	r2,-8(fp)
  8041a0:	10800017 	ldw	r2,0(r2)
  8041a4:	11000104 	addi	r4,r2,4
  8041a8:	e0bffe17 	ldw	r2,-8(fp)
  8041ac:	10800817 	ldw	r2,32(r2)
  8041b0:	1007883a 	mov	r3,r2
  8041b4:	2005883a 	mov	r2,r4
  8041b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8041bc:	e0bffd17 	ldw	r2,-12(fp)
  8041c0:	10800104 	addi	r2,r2,4
  8041c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8041c8:	003f8406 	br	803fdc <altera_avalon_jtag_uart_irq+0x28>
}
  8041cc:	e037883a 	mov	sp,fp
  8041d0:	df000017 	ldw	fp,0(sp)
  8041d4:	dec00104 	addi	sp,sp,4
  8041d8:	f800283a 	ret

008041dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8041dc:	defffc04 	addi	sp,sp,-16
  8041e0:	df000315 	stw	fp,12(sp)
  8041e4:	df000304 	addi	fp,sp,12
  8041e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8041ec:	e0bfff17 	ldw	r2,-4(fp)
  8041f0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8041f4:	e0bffe17 	ldw	r2,-8(fp)
  8041f8:	10800017 	ldw	r2,0(r2)
  8041fc:	10800104 	addi	r2,r2,4
  804200:	10800037 	ldwio	r2,0(r2)
  804204:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  804208:	e0bffd17 	ldw	r2,-12(fp)
  80420c:	1081000c 	andi	r2,r2,1024
  804210:	1005003a 	cmpeq	r2,r2,zero
  804214:	10000c1e 	bne	r2,zero,804248 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  804218:	e0bffe17 	ldw	r2,-8(fp)
  80421c:	10800017 	ldw	r2,0(r2)
  804220:	11000104 	addi	r4,r2,4
  804224:	e0bffe17 	ldw	r2,-8(fp)
  804228:	10800817 	ldw	r2,32(r2)
  80422c:	10810014 	ori	r2,r2,1024
  804230:	1007883a 	mov	r3,r2
  804234:	2005883a 	mov	r2,r4
  804238:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80423c:	e0bffe17 	ldw	r2,-8(fp)
  804240:	10000915 	stw	zero,36(r2)
  804244:	00000a06 	br	804270 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  804248:	e0bffe17 	ldw	r2,-8(fp)
  80424c:	10c00917 	ldw	r3,36(r2)
  804250:	00a00034 	movhi	r2,32768
  804254:	10bfff04 	addi	r2,r2,-4
  804258:	10c00536 	bltu	r2,r3,804270 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80425c:	e0bffe17 	ldw	r2,-8(fp)
  804260:	10800917 	ldw	r2,36(r2)
  804264:	10c00044 	addi	r3,r2,1
  804268:	e0bffe17 	ldw	r2,-8(fp)
  80426c:	10c00915 	stw	r3,36(r2)
  804270:	00802074 	movhi	r2,129
  804274:	10a79c04 	addi	r2,r2,-24976
  804278:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80427c:	e037883a 	mov	sp,fp
  804280:	df000017 	ldw	fp,0(sp)
  804284:	dec00104 	addi	sp,sp,4
  804288:	f800283a 	ret

0080428c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80428c:	defffc04 	addi	sp,sp,-16
  804290:	df000315 	stw	fp,12(sp)
  804294:	df000304 	addi	fp,sp,12
  804298:	e13ffd15 	stw	r4,-12(fp)
  80429c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8042a0:	00000706 	br	8042c0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8042a4:	e0bffe17 	ldw	r2,-8(fp)
  8042a8:	1090000c 	andi	r2,r2,16384
  8042ac:	1005003a 	cmpeq	r2,r2,zero
  8042b0:	1000031e 	bne	r2,zero,8042c0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8042b4:	00bffd44 	movi	r2,-11
  8042b8:	e0bfff15 	stw	r2,-4(fp)
  8042bc:	00000b06 	br	8042ec <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8042c0:	e0bffd17 	ldw	r2,-12(fp)
  8042c4:	10c00d17 	ldw	r3,52(r2)
  8042c8:	e0bffd17 	ldw	r2,-12(fp)
  8042cc:	10800c17 	ldw	r2,48(r2)
  8042d0:	18800526 	beq	r3,r2,8042e8 <altera_avalon_jtag_uart_close+0x5c>
  8042d4:	e0bffd17 	ldw	r2,-12(fp)
  8042d8:	10c00917 	ldw	r3,36(r2)
  8042dc:	e0bffd17 	ldw	r2,-12(fp)
  8042e0:	10800117 	ldw	r2,4(r2)
  8042e4:	18bfef36 	bltu	r3,r2,8042a4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8042e8:	e03fff15 	stw	zero,-4(fp)
  8042ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8042f0:	e037883a 	mov	sp,fp
  8042f4:	df000017 	ldw	fp,0(sp)
  8042f8:	dec00104 	addi	sp,sp,4
  8042fc:	f800283a 	ret

00804300 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804300:	defff804 	addi	sp,sp,-32
  804304:	df000715 	stw	fp,28(sp)
  804308:	df000704 	addi	fp,sp,28
  80430c:	e13ffb15 	stw	r4,-20(fp)
  804310:	e17ffc15 	stw	r5,-16(fp)
  804314:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  804318:	00bff9c4 	movi	r2,-25
  80431c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  804320:	e0bffc17 	ldw	r2,-16(fp)
  804324:	e0bfff15 	stw	r2,-4(fp)
  804328:	e0ffff17 	ldw	r3,-4(fp)
  80432c:	189a8060 	cmpeqi	r2,r3,27137
  804330:	1000041e 	bne	r2,zero,804344 <altera_avalon_jtag_uart_ioctl+0x44>
  804334:	e0ffff17 	ldw	r3,-4(fp)
  804338:	189a80a0 	cmpeqi	r2,r3,27138
  80433c:	10001b1e 	bne	r2,zero,8043ac <altera_avalon_jtag_uart_ioctl+0xac>
  804340:	00002706 	br	8043e0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804344:	e0bffb17 	ldw	r2,-20(fp)
  804348:	10c00117 	ldw	r3,4(r2)
  80434c:	00a00034 	movhi	r2,32768
  804350:	10bfffc4 	addi	r2,r2,-1
  804354:	18802226 	beq	r3,r2,8043e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  804358:	e0bffd17 	ldw	r2,-12(fp)
  80435c:	10800017 	ldw	r2,0(r2)
  804360:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804364:	e0bff917 	ldw	r2,-28(fp)
  804368:	10800090 	cmplti	r2,r2,2
  80436c:	1000071e 	bne	r2,zero,80438c <altera_avalon_jtag_uart_ioctl+0x8c>
  804370:	e0fff917 	ldw	r3,-28(fp)
  804374:	00a00034 	movhi	r2,32768
  804378:	10bfffc4 	addi	r2,r2,-1
  80437c:	18800326 	beq	r3,r2,80438c <altera_avalon_jtag_uart_ioctl+0x8c>
  804380:	e0bff917 	ldw	r2,-28(fp)
  804384:	e0bffe15 	stw	r2,-8(fp)
  804388:	00000306 	br	804398 <altera_avalon_jtag_uart_ioctl+0x98>
  80438c:	00e00034 	movhi	r3,32768
  804390:	18ffff84 	addi	r3,r3,-2
  804394:	e0fffe15 	stw	r3,-8(fp)
  804398:	e0bffb17 	ldw	r2,-20(fp)
  80439c:	e0fffe17 	ldw	r3,-8(fp)
  8043a0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8043a4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8043a8:	00000d06 	br	8043e0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8043ac:	e0bffb17 	ldw	r2,-20(fp)
  8043b0:	10c00117 	ldw	r3,4(r2)
  8043b4:	00a00034 	movhi	r2,32768
  8043b8:	10bfffc4 	addi	r2,r2,-1
  8043bc:	18800826 	beq	r3,r2,8043e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8043c0:	e13ffd17 	ldw	r4,-12(fp)
  8043c4:	e0bffb17 	ldw	r2,-20(fp)
  8043c8:	10c00917 	ldw	r3,36(r2)
  8043cc:	e0bffb17 	ldw	r2,-20(fp)
  8043d0:	10800117 	ldw	r2,4(r2)
  8043d4:	1885803a 	cmpltu	r2,r3,r2
  8043d8:	20800015 	stw	r2,0(r4)
      rc = 0;
  8043dc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8043e0:	e0bffa17 	ldw	r2,-24(fp)
}
  8043e4:	e037883a 	mov	sp,fp
  8043e8:	df000017 	ldw	fp,0(sp)
  8043ec:	dec00104 	addi	sp,sp,4
  8043f0:	f800283a 	ret

008043f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8043f4:	defff204 	addi	sp,sp,-56
  8043f8:	dfc00d15 	stw	ra,52(sp)
  8043fc:	df000c15 	stw	fp,48(sp)
  804400:	df000c04 	addi	fp,sp,48
  804404:	e13ffb15 	stw	r4,-20(fp)
  804408:	e17ffc15 	stw	r5,-16(fp)
  80440c:	e1bffd15 	stw	r6,-12(fp)
  804410:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  804414:	e0bffc17 	ldw	r2,-16(fp)
  804418:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80441c:	00004806 	br	804540 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804420:	e0bffb17 	ldw	r2,-20(fp)
  804424:	10800a17 	ldw	r2,40(r2)
  804428:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80442c:	e0bffb17 	ldw	r2,-20(fp)
  804430:	10800b17 	ldw	r2,44(r2)
  804434:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  804438:	e0fff717 	ldw	r3,-36(fp)
  80443c:	e0bff617 	ldw	r2,-40(fp)
  804440:	18800536 	bltu	r3,r2,804458 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804444:	e0bff717 	ldw	r2,-36(fp)
  804448:	e0fff617 	ldw	r3,-40(fp)
  80444c:	10c5c83a 	sub	r2,r2,r3
  804450:	e0bff815 	stw	r2,-32(fp)
  804454:	00000406 	br	804468 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  804458:	00820004 	movi	r2,2048
  80445c:	e0fff617 	ldw	r3,-40(fp)
  804460:	10c5c83a 	sub	r2,r2,r3
  804464:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  804468:	e0bff817 	ldw	r2,-32(fp)
  80446c:	1005003a 	cmpeq	r2,r2,zero
  804470:	10001f1e 	bne	r2,zero,8044f0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  804474:	e0fffd17 	ldw	r3,-12(fp)
  804478:	e0bff817 	ldw	r2,-32(fp)
  80447c:	1880022e 	bgeu	r3,r2,804488 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  804480:	e0bffd17 	ldw	r2,-12(fp)
  804484:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804488:	e0bffb17 	ldw	r2,-20(fp)
  80448c:	10c00e04 	addi	r3,r2,56
  804490:	e0bff617 	ldw	r2,-40(fp)
  804494:	1887883a 	add	r3,r3,r2
  804498:	e0bffa17 	ldw	r2,-24(fp)
  80449c:	1009883a 	mov	r4,r2
  8044a0:	180b883a 	mov	r5,r3
  8044a4:	e1bff817 	ldw	r6,-32(fp)
  8044a8:	08011ac0 	call	8011ac <memcpy>
      ptr   += n;
  8044ac:	e0fff817 	ldw	r3,-32(fp)
  8044b0:	e0bffa17 	ldw	r2,-24(fp)
  8044b4:	10c5883a 	add	r2,r2,r3
  8044b8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  8044bc:	e0fffd17 	ldw	r3,-12(fp)
  8044c0:	e0bff817 	ldw	r2,-32(fp)
  8044c4:	1885c83a 	sub	r2,r3,r2
  8044c8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8044cc:	e0fff617 	ldw	r3,-40(fp)
  8044d0:	e0bff817 	ldw	r2,-32(fp)
  8044d4:	1885883a 	add	r2,r3,r2
  8044d8:	10c1ffcc 	andi	r3,r2,2047
  8044dc:	e0bffb17 	ldw	r2,-20(fp)
  8044e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8044e4:	e0bffd17 	ldw	r2,-12(fp)
  8044e8:	10800048 	cmpgei	r2,r2,1
  8044ec:	103fcc1e 	bne	r2,zero,804420 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8044f0:	e0fffa17 	ldw	r3,-24(fp)
  8044f4:	e0bffc17 	ldw	r2,-16(fp)
  8044f8:	1880141e 	bne	r3,r2,80454c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8044fc:	e0bffe17 	ldw	r2,-8(fp)
  804500:	1090000c 	andi	r2,r2,16384
  804504:	1004c03a 	cmpne	r2,r2,zero
  804508:	1000101e 	bne	r2,zero,80454c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80450c:	e0bffb17 	ldw	r2,-20(fp)
  804510:	10c00a17 	ldw	r3,40(r2)
  804514:	e0bff717 	ldw	r2,-36(fp)
  804518:	1880051e 	bne	r3,r2,804530 <altera_avalon_jtag_uart_read+0x13c>
  80451c:	e0bffb17 	ldw	r2,-20(fp)
  804520:	10c00917 	ldw	r3,36(r2)
  804524:	e0bffb17 	ldw	r2,-20(fp)
  804528:	10800117 	ldw	r2,4(r2)
  80452c:	18bff736 	bltu	r3,r2,80450c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804530:	e0bffb17 	ldw	r2,-20(fp)
  804534:	10c00a17 	ldw	r3,40(r2)
  804538:	e0bff717 	ldw	r2,-36(fp)
  80453c:	18800326 	beq	r3,r2,80454c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804540:	e0bffd17 	ldw	r2,-12(fp)
  804544:	10800048 	cmpgei	r2,r2,1
  804548:	103fb51e 	bne	r2,zero,804420 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80454c:	e0fffa17 	ldw	r3,-24(fp)
  804550:	e0bffc17 	ldw	r2,-16(fp)
  804554:	18801926 	beq	r3,r2,8045bc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804558:	0005303a 	rdctl	r2,status
  80455c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804560:	e0fff517 	ldw	r3,-44(fp)
  804564:	00bfff84 	movi	r2,-2
  804568:	1884703a 	and	r2,r3,r2
  80456c:	1001703a 	wrctl	status,r2
  
  return context;
  804570:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804574:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804578:	e0bffb17 	ldw	r2,-20(fp)
  80457c:	10800817 	ldw	r2,32(r2)
  804580:	10c00054 	ori	r3,r2,1
  804584:	e0bffb17 	ldw	r2,-20(fp)
  804588:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80458c:	e0bffb17 	ldw	r2,-20(fp)
  804590:	10800017 	ldw	r2,0(r2)
  804594:	11000104 	addi	r4,r2,4
  804598:	e0bffb17 	ldw	r2,-20(fp)
  80459c:	10800817 	ldw	r2,32(r2)
  8045a0:	1007883a 	mov	r3,r2
  8045a4:	2005883a 	mov	r2,r4
  8045a8:	10c00035 	stwio	r3,0(r2)
  8045ac:	e0bff917 	ldw	r2,-28(fp)
  8045b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8045b4:	e0bff417 	ldw	r2,-48(fp)
  8045b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8045bc:	e0fffa17 	ldw	r3,-24(fp)
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	18800526 	beq	r3,r2,8045dc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8045c8:	e0fffa17 	ldw	r3,-24(fp)
  8045cc:	e0bffc17 	ldw	r2,-16(fp)
  8045d0:	1887c83a 	sub	r3,r3,r2
  8045d4:	e0ffff15 	stw	r3,-4(fp)
  8045d8:	00000906 	br	804600 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8045dc:	e0bffe17 	ldw	r2,-8(fp)
  8045e0:	1090000c 	andi	r2,r2,16384
  8045e4:	1005003a 	cmpeq	r2,r2,zero
  8045e8:	1000031e 	bne	r2,zero,8045f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8045ec:	00bffd44 	movi	r2,-11
  8045f0:	e0bfff15 	stw	r2,-4(fp)
  8045f4:	00000206 	br	804600 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8045f8:	00bffec4 	movi	r2,-5
  8045fc:	e0bfff15 	stw	r2,-4(fp)
  804600:	e0bfff17 	ldw	r2,-4(fp)
}
  804604:	e037883a 	mov	sp,fp
  804608:	dfc00117 	ldw	ra,4(sp)
  80460c:	df000017 	ldw	fp,0(sp)
  804610:	dec00204 	addi	sp,sp,8
  804614:	f800283a 	ret

00804618 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804618:	defff204 	addi	sp,sp,-56
  80461c:	dfc00d15 	stw	ra,52(sp)
  804620:	df000c15 	stw	fp,48(sp)
  804624:	df000c04 	addi	fp,sp,48
  804628:	e13ffb15 	stw	r4,-20(fp)
  80462c:	e17ffc15 	stw	r5,-16(fp)
  804630:	e1bffd15 	stw	r6,-12(fp)
  804634:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804638:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804644:	00003a06 	br	804730 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804648:	e0bffb17 	ldw	r2,-20(fp)
  80464c:	10800c17 	ldw	r2,48(r2)
  804650:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  804654:	e0bffb17 	ldw	r2,-20(fp)
  804658:	10800d17 	ldw	r2,52(r2)
  80465c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  804660:	e0fffa17 	ldw	r3,-24(fp)
  804664:	e0bff917 	ldw	r2,-28(fp)
  804668:	1880062e 	bgeu	r3,r2,804684 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80466c:	e0fff917 	ldw	r3,-28(fp)
  804670:	e0bffa17 	ldw	r2,-24(fp)
  804674:	1885c83a 	sub	r2,r3,r2
  804678:	10bfffc4 	addi	r2,r2,-1
  80467c:	e0bff815 	stw	r2,-32(fp)
  804680:	00000c06 	br	8046b4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  804684:	e0bff917 	ldw	r2,-28(fp)
  804688:	1005003a 	cmpeq	r2,r2,zero
  80468c:	1000051e 	bne	r2,zero,8046a4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804690:	00820004 	movi	r2,2048
  804694:	e0fffa17 	ldw	r3,-24(fp)
  804698:	10c5c83a 	sub	r2,r2,r3
  80469c:	e0bff815 	stw	r2,-32(fp)
  8046a0:	00000406 	br	8046b4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8046a4:	0081ffc4 	movi	r2,2047
  8046a8:	e0fffa17 	ldw	r3,-24(fp)
  8046ac:	10c5c83a 	sub	r2,r2,r3
  8046b0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8046b4:	e0bff817 	ldw	r2,-32(fp)
  8046b8:	1005003a 	cmpeq	r2,r2,zero
  8046bc:	10001f1e 	bne	r2,zero,80473c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  8046c0:	e0fffd17 	ldw	r3,-12(fp)
  8046c4:	e0bff817 	ldw	r2,-32(fp)
  8046c8:	1880022e 	bgeu	r3,r2,8046d4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8046cc:	e0bffd17 	ldw	r2,-12(fp)
  8046d0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8046d4:	e0bffb17 	ldw	r2,-20(fp)
  8046d8:	10c20e04 	addi	r3,r2,2104
  8046dc:	e0bffa17 	ldw	r2,-24(fp)
  8046e0:	1885883a 	add	r2,r3,r2
  8046e4:	e0fffc17 	ldw	r3,-16(fp)
  8046e8:	1009883a 	mov	r4,r2
  8046ec:	180b883a 	mov	r5,r3
  8046f0:	e1bff817 	ldw	r6,-32(fp)
  8046f4:	08011ac0 	call	8011ac <memcpy>
      ptr   += n;
  8046f8:	e0fff817 	ldw	r3,-32(fp)
  8046fc:	e0bffc17 	ldw	r2,-16(fp)
  804700:	10c5883a 	add	r2,r2,r3
  804704:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  804708:	e0fffd17 	ldw	r3,-12(fp)
  80470c:	e0bff817 	ldw	r2,-32(fp)
  804710:	1885c83a 	sub	r2,r3,r2
  804714:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804718:	e0fffa17 	ldw	r3,-24(fp)
  80471c:	e0bff817 	ldw	r2,-32(fp)
  804720:	1885883a 	add	r2,r3,r2
  804724:	10c1ffcc 	andi	r3,r2,2047
  804728:	e0bffb17 	ldw	r2,-20(fp)
  80472c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804730:	e0bffd17 	ldw	r2,-12(fp)
  804734:	10800048 	cmpgei	r2,r2,1
  804738:	103fc31e 	bne	r2,zero,804648 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80473c:	0005303a 	rdctl	r2,status
  804740:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804744:	e0fff517 	ldw	r3,-44(fp)
  804748:	00bfff84 	movi	r2,-2
  80474c:	1884703a 	and	r2,r3,r2
  804750:	1001703a 	wrctl	status,r2
  
  return context;
  804754:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804758:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80475c:	e0bffb17 	ldw	r2,-20(fp)
  804760:	10800817 	ldw	r2,32(r2)
  804764:	10c00094 	ori	r3,r2,2
  804768:	e0bffb17 	ldw	r2,-20(fp)
  80476c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804770:	e0bffb17 	ldw	r2,-20(fp)
  804774:	10800017 	ldw	r2,0(r2)
  804778:	11000104 	addi	r4,r2,4
  80477c:	e0bffb17 	ldw	r2,-20(fp)
  804780:	10800817 	ldw	r2,32(r2)
  804784:	1007883a 	mov	r3,r2
  804788:	2005883a 	mov	r2,r4
  80478c:	10c00035 	stwio	r3,0(r2)
  804790:	e0bff717 	ldw	r2,-36(fp)
  804794:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804798:	e0bff417 	ldw	r2,-48(fp)
  80479c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8047a0:	e0bffd17 	ldw	r2,-12(fp)
  8047a4:	10800050 	cmplti	r2,r2,1
  8047a8:	1000111e 	bne	r2,zero,8047f0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8047ac:	e0bffe17 	ldw	r2,-8(fp)
  8047b0:	1090000c 	andi	r2,r2,16384
  8047b4:	1004c03a 	cmpne	r2,r2,zero
  8047b8:	1000101e 	bne	r2,zero,8047fc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8047bc:	e0bffb17 	ldw	r2,-20(fp)
  8047c0:	10c00d17 	ldw	r3,52(r2)
  8047c4:	e0bff917 	ldw	r2,-28(fp)
  8047c8:	1880051e 	bne	r3,r2,8047e0 <altera_avalon_jtag_uart_write+0x1c8>
  8047cc:	e0bffb17 	ldw	r2,-20(fp)
  8047d0:	10c00917 	ldw	r3,36(r2)
  8047d4:	e0bffb17 	ldw	r2,-20(fp)
  8047d8:	10800117 	ldw	r2,4(r2)
  8047dc:	18bff736 	bltu	r3,r2,8047bc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8047e0:	e0bffb17 	ldw	r2,-20(fp)
  8047e4:	10c00d17 	ldw	r3,52(r2)
  8047e8:	e0bff917 	ldw	r2,-28(fp)
  8047ec:	18800326 	beq	r3,r2,8047fc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  8047f0:	e0bffd17 	ldw	r2,-12(fp)
  8047f4:	10800048 	cmpgei	r2,r2,1
  8047f8:	103fcd1e 	bne	r2,zero,804730 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8047fc:	e0fffc17 	ldw	r3,-16(fp)
  804800:	e0bff617 	ldw	r2,-40(fp)
  804804:	18800526 	beq	r3,r2,80481c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  804808:	e0fffc17 	ldw	r3,-16(fp)
  80480c:	e0bff617 	ldw	r2,-40(fp)
  804810:	1887c83a 	sub	r3,r3,r2
  804814:	e0ffff15 	stw	r3,-4(fp)
  804818:	00000906 	br	804840 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80481c:	e0bffe17 	ldw	r2,-8(fp)
  804820:	1090000c 	andi	r2,r2,16384
  804824:	1005003a 	cmpeq	r2,r2,zero
  804828:	1000031e 	bne	r2,zero,804838 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80482c:	00bffd44 	movi	r2,-11
  804830:	e0bfff15 	stw	r2,-4(fp)
  804834:	00000206 	br	804840 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804838:	00bffec4 	movi	r2,-5
  80483c:	e0bfff15 	stw	r2,-4(fp)
  804840:	e0bfff17 	ldw	r2,-4(fp)
}
  804844:	e037883a 	mov	sp,fp
  804848:	dfc00117 	ldw	ra,4(sp)
  80484c:	df000017 	ldw	fp,0(sp)
  804850:	dec00204 	addi	sp,sp,8
  804854:	f800283a 	ret

00804858 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  804858:	defffa04 	addi	sp,sp,-24
  80485c:	dfc00515 	stw	ra,20(sp)
  804860:	df000415 	stw	fp,16(sp)
  804864:	df000404 	addi	fp,sp,16
  804868:	e13ffd15 	stw	r4,-12(fp)
  80486c:	e17ffe15 	stw	r5,-8(fp)
  804870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804874:	e0bffd17 	ldw	r2,-12(fp)
  804878:	10800017 	ldw	r2,0(r2)
  80487c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	11000a04 	addi	r4,r2,40
  804888:	e0bffd17 	ldw	r2,-12(fp)
  80488c:	11c00217 	ldw	r7,8(r2)
  804890:	e17ffe17 	ldw	r5,-8(fp)
  804894:	e1bfff17 	ldw	r6,-4(fp)
  804898:	0804d500 	call	804d50 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80489c:	e037883a 	mov	sp,fp
  8048a0:	dfc00117 	ldw	ra,4(sp)
  8048a4:	df000017 	ldw	fp,0(sp)
  8048a8:	dec00204 	addi	sp,sp,8
  8048ac:	f800283a 	ret

008048b0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8048b0:	defffa04 	addi	sp,sp,-24
  8048b4:	dfc00515 	stw	ra,20(sp)
  8048b8:	df000415 	stw	fp,16(sp)
  8048bc:	df000404 	addi	fp,sp,16
  8048c0:	e13ffd15 	stw	r4,-12(fp)
  8048c4:	e17ffe15 	stw	r5,-8(fp)
  8048c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8048cc:	e0bffd17 	ldw	r2,-12(fp)
  8048d0:	10800017 	ldw	r2,0(r2)
  8048d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8048d8:	e0bffc17 	ldw	r2,-16(fp)
  8048dc:	11000a04 	addi	r4,r2,40
  8048e0:	e0bffd17 	ldw	r2,-12(fp)
  8048e4:	11c00217 	ldw	r7,8(r2)
  8048e8:	e17ffe17 	ldw	r5,-8(fp)
  8048ec:	e1bfff17 	ldw	r6,-4(fp)
  8048f0:	0804fe00 	call	804fe0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8048f4:	e037883a 	mov	sp,fp
  8048f8:	dfc00117 	ldw	ra,4(sp)
  8048fc:	df000017 	ldw	fp,0(sp)
  804900:	dec00204 	addi	sp,sp,8
  804904:	f800283a 	ret

00804908 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  804908:	defffc04 	addi	sp,sp,-16
  80490c:	dfc00315 	stw	ra,12(sp)
  804910:	df000215 	stw	fp,8(sp)
  804914:	df000204 	addi	fp,sp,8
  804918:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80491c:	e0bfff17 	ldw	r2,-4(fp)
  804920:	10800017 	ldw	r2,0(r2)
  804924:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  804928:	e0bffe17 	ldw	r2,-8(fp)
  80492c:	11000a04 	addi	r4,r2,40
  804930:	e0bfff17 	ldw	r2,-4(fp)
  804934:	11400217 	ldw	r5,8(r2)
  804938:	0804cf00 	call	804cf0 <altera_avalon_uart_close>
}
  80493c:	e037883a 	mov	sp,fp
  804940:	dfc00117 	ldw	ra,4(sp)
  804944:	df000017 	ldw	fp,0(sp)
  804948:	dec00204 	addi	sp,sp,8
  80494c:	f800283a 	ret

00804950 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  804950:	defff704 	addi	sp,sp,-36
  804954:	dfc00815 	stw	ra,32(sp)
  804958:	df000715 	stw	fp,28(sp)
  80495c:	df000704 	addi	fp,sp,28
  804960:	e13ffc15 	stw	r4,-16(fp)
  804964:	e17ffd15 	stw	r5,-12(fp)
  804968:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80496c:	e0bffc17 	ldw	r2,-16(fp)
  804970:	10800017 	ldw	r2,0(r2)
  804974:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  804978:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80497c:	1004c03a 	cmpne	r2,r2,zero
  804980:	1000061e 	bne	r2,zero,80499c <altera_avalon_uart_init+0x4c>
  804984:	0005883a 	mov	r2,zero
  804988:	1004c03a 	cmpne	r2,r2,zero
  80498c:	1000031e 	bne	r2,zero,80499c <altera_avalon_uart_init+0x4c>
  804990:	0005883a 	mov	r2,zero
  804994:	1005003a 	cmpeq	r2,r2,zero
  804998:	1000031e 	bne	r2,zero,8049a8 <altera_avalon_uart_init+0x58>
  80499c:	00800044 	movi	r2,1
  8049a0:	e0bfff15 	stw	r2,-4(fp)
  8049a4:	00000106 	br	8049ac <altera_avalon_uart_init+0x5c>
  8049a8:	e03fff15 	stw	zero,-4(fp)
  8049ac:	e0bfff17 	ldw	r2,-4(fp)
  8049b0:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8049b4:	e0bffa17 	ldw	r2,-24(fp)
  8049b8:	1004c03a 	cmpne	r2,r2,zero
  8049bc:	1000111e 	bne	r2,zero,804a04 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8049c0:	e0fffc17 	ldw	r3,-16(fp)
  8049c4:	00832004 	movi	r2,3200
  8049c8:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8049cc:	e0bffb17 	ldw	r2,-20(fp)
  8049d0:	11000304 	addi	r4,r2,12
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10800117 	ldw	r2,4(r2)
  8049dc:	1007883a 	mov	r3,r2
  8049e0:	2005883a 	mov	r2,r4
  8049e4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8049e8:	d8000015 	stw	zero,0(sp)
  8049ec:	e13ffd17 	ldw	r4,-12(fp)
  8049f0:	e17ffe17 	ldw	r5,-8(fp)
  8049f4:	01802034 	movhi	r6,128
  8049f8:	31928604 	addi	r6,r6,18968
  8049fc:	e1fffc17 	ldw	r7,-16(fp)
  804a00:	08056f80 	call	8056f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  804a04:	e037883a 	mov	sp,fp
  804a08:	dfc00117 	ldw	ra,4(sp)
  804a0c:	df000017 	ldw	fp,0(sp)
  804a10:	dec00204 	addi	sp,sp,8
  804a14:	f800283a 	ret

00804a18 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  804a18:	defffa04 	addi	sp,sp,-24
  804a1c:	dfc00515 	stw	ra,20(sp)
  804a20:	df000415 	stw	fp,16(sp)
  804a24:	df000404 	addi	fp,sp,16
  804a28:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  804a2c:	e0bfff17 	ldw	r2,-4(fp)
  804a30:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  804a34:	e0bffd17 	ldw	r2,-12(fp)
  804a38:	10800017 	ldw	r2,0(r2)
  804a3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  804a40:	e0bffc17 	ldw	r2,-16(fp)
  804a44:	10800204 	addi	r2,r2,8
  804a48:	10800037 	ldwio	r2,0(r2)
  804a4c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  804a50:	e0bffc17 	ldw	r2,-16(fp)
  804a54:	10800204 	addi	r2,r2,8
  804a58:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  804a5c:	e0bffc17 	ldw	r2,-16(fp)
  804a60:	10800204 	addi	r2,r2,8
  804a64:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  804a68:	e0bffe17 	ldw	r2,-8(fp)
  804a6c:	1080200c 	andi	r2,r2,128
  804a70:	1005003a 	cmpeq	r2,r2,zero
  804a74:	1000031e 	bne	r2,zero,804a84 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  804a78:	e13ffd17 	ldw	r4,-12(fp)
  804a7c:	e17ffe17 	ldw	r5,-8(fp)
  804a80:	0804ab40 	call	804ab4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  804a84:	e0bffe17 	ldw	r2,-8(fp)
  804a88:	1081100c 	andi	r2,r2,1088
  804a8c:	1005003a 	cmpeq	r2,r2,zero
  804a90:	1000031e 	bne	r2,zero,804aa0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  804a94:	e13ffd17 	ldw	r4,-12(fp)
  804a98:	e17ffe17 	ldw	r5,-8(fp)
  804a9c:	0804b940 	call	804b94 <altera_avalon_uart_txirq>
  }
  

}
  804aa0:	e037883a 	mov	sp,fp
  804aa4:	dfc00117 	ldw	ra,4(sp)
  804aa8:	df000017 	ldw	fp,0(sp)
  804aac:	dec00204 	addi	sp,sp,8
  804ab0:	f800283a 	ret

00804ab4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804ab4:	defffc04 	addi	sp,sp,-16
  804ab8:	df000315 	stw	fp,12(sp)
  804abc:	df000304 	addi	fp,sp,12
  804ac0:	e13ffe15 	stw	r4,-8(fp)
  804ac4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  804ac8:	e0bfff17 	ldw	r2,-4(fp)
  804acc:	108000cc 	andi	r2,r2,3
  804ad0:	1004c03a 	cmpne	r2,r2,zero
  804ad4:	10002b1e 	bne	r2,zero,804b84 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  804ad8:	e0bffe17 	ldw	r2,-8(fp)
  804adc:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804ae0:	e0bffe17 	ldw	r2,-8(fp)
  804ae4:	10800317 	ldw	r2,12(r2)
  804ae8:	10800044 	addi	r2,r2,1
  804aec:	10800fcc 	andi	r2,r2,63
  804af0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  804af4:	e0bffe17 	ldw	r2,-8(fp)
  804af8:	11000317 	ldw	r4,12(r2)
  804afc:	e0bffe17 	ldw	r2,-8(fp)
  804b00:	10800017 	ldw	r2,0(r2)
  804b04:	10800037 	ldwio	r2,0(r2)
  804b08:	1007883a 	mov	r3,r2
  804b0c:	e0bffe17 	ldw	r2,-8(fp)
  804b10:	2085883a 	add	r2,r4,r2
  804b14:	10800704 	addi	r2,r2,28
  804b18:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  804b1c:	e0fffe17 	ldw	r3,-8(fp)
  804b20:	e0bffd17 	ldw	r2,-12(fp)
  804b24:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804b28:	e0bffe17 	ldw	r2,-8(fp)
  804b2c:	10800317 	ldw	r2,12(r2)
  804b30:	10800044 	addi	r2,r2,1
  804b34:	10800fcc 	andi	r2,r2,63
  804b38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  804b3c:	e0bffe17 	ldw	r2,-8(fp)
  804b40:	10c00217 	ldw	r3,8(r2)
  804b44:	e0bffd17 	ldw	r2,-12(fp)
  804b48:	18800e1e 	bne	r3,r2,804b84 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804b4c:	e0bffe17 	ldw	r2,-8(fp)
  804b50:	10c00117 	ldw	r3,4(r2)
  804b54:	00bfdfc4 	movi	r2,-129
  804b58:	1886703a 	and	r3,r3,r2
  804b5c:	e0bffe17 	ldw	r2,-8(fp)
  804b60:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  804b64:	e0bffe17 	ldw	r2,-8(fp)
  804b68:	10800017 	ldw	r2,0(r2)
  804b6c:	11000304 	addi	r4,r2,12
  804b70:	e0bffe17 	ldw	r2,-8(fp)
  804b74:	10800117 	ldw	r2,4(r2)
  804b78:	1007883a 	mov	r3,r2
  804b7c:	2005883a 	mov	r2,r4
  804b80:	10c00035 	stwio	r3,0(r2)
  }   
}
  804b84:	e037883a 	mov	sp,fp
  804b88:	df000017 	ldw	fp,0(sp)
  804b8c:	dec00104 	addi	sp,sp,4
  804b90:	f800283a 	ret

00804b94 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804b94:	defffd04 	addi	sp,sp,-12
  804b98:	df000215 	stw	fp,8(sp)
  804b9c:	df000204 	addi	fp,sp,8
  804ba0:	e13ffe15 	stw	r4,-8(fp)
  804ba4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  804ba8:	e0bffe17 	ldw	r2,-8(fp)
  804bac:	10c00417 	ldw	r3,16(r2)
  804bb0:	e0bffe17 	ldw	r2,-8(fp)
  804bb4:	10800517 	ldw	r2,20(r2)
  804bb8:	18803626 	beq	r3,r2,804c94 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804bbc:	e0bffe17 	ldw	r2,-8(fp)
  804bc0:	10800617 	ldw	r2,24(r2)
  804bc4:	1080008c 	andi	r2,r2,2
  804bc8:	1005003a 	cmpeq	r2,r2,zero
  804bcc:	1000041e 	bne	r2,zero,804be0 <altera_avalon_uart_txirq+0x4c>
  804bd0:	e0bfff17 	ldw	r2,-4(fp)
  804bd4:	1082000c 	andi	r2,r2,2048
  804bd8:	1005003a 	cmpeq	r2,r2,zero
  804bdc:	10001e1e 	bne	r2,zero,804c58 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  804be0:	e0bffe17 	ldw	r2,-8(fp)
  804be4:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  804be8:	e0bffe17 	ldw	r2,-8(fp)
  804bec:	10800017 	ldw	r2,0(r2)
  804bf0:	11000104 	addi	r4,r2,4
  804bf4:	e0bffe17 	ldw	r2,-8(fp)
  804bf8:	10c00417 	ldw	r3,16(r2)
  804bfc:	e0bffe17 	ldw	r2,-8(fp)
  804c00:	1885883a 	add	r2,r3,r2
  804c04:	10801704 	addi	r2,r2,92
  804c08:	10800003 	ldbu	r2,0(r2)
  804c0c:	10c03fcc 	andi	r3,r2,255
  804c10:	2005883a 	mov	r2,r4
  804c14:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  804c18:	e0bffe17 	ldw	r2,-8(fp)
  804c1c:	10800417 	ldw	r2,16(r2)
  804c20:	10c00044 	addi	r3,r2,1
  804c24:	e0bffe17 	ldw	r2,-8(fp)
  804c28:	10c00415 	stw	r3,16(r2)
  804c2c:	e0bffe17 	ldw	r2,-8(fp)
  804c30:	10800417 	ldw	r2,16(r2)
  804c34:	10c00fcc 	andi	r3,r2,63
  804c38:	e0bffe17 	ldw	r2,-8(fp)
  804c3c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  804c40:	e0bffe17 	ldw	r2,-8(fp)
  804c44:	10800117 	ldw	r2,4(r2)
  804c48:	10c01014 	ori	r3,r2,64
  804c4c:	e0bffe17 	ldw	r2,-8(fp)
  804c50:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804c54:	00000f06 	br	804c94 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  804c58:	e0bffe17 	ldw	r2,-8(fp)
  804c5c:	10800017 	ldw	r2,0(r2)
  804c60:	10800204 	addi	r2,r2,8
  804c64:	10800037 	ldwio	r2,0(r2)
  804c68:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  804c6c:	e0bfff17 	ldw	r2,-4(fp)
  804c70:	1082000c 	andi	r2,r2,2048
  804c74:	1004c03a 	cmpne	r2,r2,zero
  804c78:	1000061e 	bne	r2,zero,804c94 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  804c7c:	e0bffe17 	ldw	r2,-8(fp)
  804c80:	10c00117 	ldw	r3,4(r2)
  804c84:	00bfefc4 	movi	r2,-65
  804c88:	1886703a 	and	r3,r3,r2
  804c8c:	e0bffe17 	ldw	r2,-8(fp)
  804c90:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  804c94:	e0bffe17 	ldw	r2,-8(fp)
  804c98:	10c00417 	ldw	r3,16(r2)
  804c9c:	e0bffe17 	ldw	r2,-8(fp)
  804ca0:	10800517 	ldw	r2,20(r2)
  804ca4:	1880061e 	bne	r3,r2,804cc0 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  804ca8:	e0bffe17 	ldw	r2,-8(fp)
  804cac:	10c00117 	ldw	r3,4(r2)
  804cb0:	00beefc4 	movi	r2,-1089
  804cb4:	1886703a 	and	r3,r3,r2
  804cb8:	e0bffe17 	ldw	r2,-8(fp)
  804cbc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804cc0:	e0bffe17 	ldw	r2,-8(fp)
  804cc4:	10800017 	ldw	r2,0(r2)
  804cc8:	11000304 	addi	r4,r2,12
  804ccc:	e0bffe17 	ldw	r2,-8(fp)
  804cd0:	10800117 	ldw	r2,4(r2)
  804cd4:	1007883a 	mov	r3,r2
  804cd8:	2005883a 	mov	r2,r4
  804cdc:	10c00035 	stwio	r3,0(r2)
}
  804ce0:	e037883a 	mov	sp,fp
  804ce4:	df000017 	ldw	fp,0(sp)
  804ce8:	dec00104 	addi	sp,sp,4
  804cec:	f800283a 	ret

00804cf0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  804cf0:	defffc04 	addi	sp,sp,-16
  804cf4:	df000315 	stw	fp,12(sp)
  804cf8:	df000304 	addi	fp,sp,12
  804cfc:	e13ffd15 	stw	r4,-12(fp)
  804d00:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  804d04:	00000706 	br	804d24 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  804d08:	e0bffe17 	ldw	r2,-8(fp)
  804d0c:	1090000c 	andi	r2,r2,16384
  804d10:	1005003a 	cmpeq	r2,r2,zero
  804d14:	1000031e 	bne	r2,zero,804d24 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  804d18:	00bffd44 	movi	r2,-11
  804d1c:	e0bfff15 	stw	r2,-4(fp)
  804d20:	00000606 	br	804d3c <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  804d24:	e0bffd17 	ldw	r2,-12(fp)
  804d28:	10c00417 	ldw	r3,16(r2)
  804d2c:	e0bffd17 	ldw	r2,-12(fp)
  804d30:	10800517 	ldw	r2,20(r2)
  804d34:	18bff41e 	bne	r3,r2,804d08 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804d38:	e03fff15 	stw	zero,-4(fp)
  804d3c:	e0bfff17 	ldw	r2,-4(fp)
}
  804d40:	e037883a 	mov	sp,fp
  804d44:	df000017 	ldw	fp,0(sp)
  804d48:	dec00104 	addi	sp,sp,4
  804d4c:	f800283a 	ret

00804d50 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  804d50:	defff004 	addi	sp,sp,-64
  804d54:	dfc00f15 	stw	ra,60(sp)
  804d58:	df000e15 	stw	fp,56(sp)
  804d5c:	df000e04 	addi	fp,sp,56
  804d60:	e13ffb15 	stw	r4,-20(fp)
  804d64:	e17ffc15 	stw	r5,-16(fp)
  804d68:	e1bffd15 	stw	r6,-12(fp)
  804d6c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  804d70:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  804d74:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  804d78:	e0bffe17 	ldw	r2,-8(fp)
  804d7c:	1090000c 	andi	r2,r2,16384
  804d80:	1005003a 	cmpeq	r2,r2,zero
  804d84:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  804d88:	e0bffb17 	ldw	r2,-20(fp)
  804d8c:	10800217 	ldw	r2,8(r2)
  804d90:	10800044 	addi	r2,r2,1
  804d94:	10800fcc 	andi	r2,r2,63
  804d98:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  804d9c:	00001906 	br	804e04 <altera_avalon_uart_read+0xb4>
    {
      count++;
  804da0:	e0bff617 	ldw	r2,-40(fp)
  804da4:	10800044 	addi	r2,r2,1
  804da8:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  804dac:	e0bffb17 	ldw	r2,-20(fp)
  804db0:	10c00217 	ldw	r3,8(r2)
  804db4:	e0bffb17 	ldw	r2,-20(fp)
  804db8:	1885883a 	add	r2,r3,r2
  804dbc:	10800704 	addi	r2,r2,28
  804dc0:	10800003 	ldbu	r2,0(r2)
  804dc4:	1007883a 	mov	r3,r2
  804dc8:	e0bffc17 	ldw	r2,-16(fp)
  804dcc:	10c00005 	stb	r3,0(r2)
  804dd0:	e0bffc17 	ldw	r2,-16(fp)
  804dd4:	10800044 	addi	r2,r2,1
  804dd8:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  804ddc:	e0bffb17 	ldw	r2,-20(fp)
  804de0:	10800217 	ldw	r2,8(r2)
  804de4:	10c00044 	addi	r3,r2,1
  804de8:	e0bffb17 	ldw	r2,-20(fp)
  804dec:	10c00215 	stw	r3,8(r2)
  804df0:	e0bffb17 	ldw	r2,-20(fp)
  804df4:	10800217 	ldw	r2,8(r2)
  804df8:	10c00fcc 	andi	r3,r2,63
  804dfc:	e0bffb17 	ldw	r2,-20(fp)
  804e00:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  804e04:	e0fff617 	ldw	r3,-40(fp)
  804e08:	e0bffd17 	ldw	r2,-12(fp)
  804e0c:	1880050e 	bge	r3,r2,804e24 <altera_avalon_uart_read+0xd4>
  804e10:	e0bffb17 	ldw	r2,-20(fp)
  804e14:	10c00217 	ldw	r3,8(r2)
  804e18:	e0bffb17 	ldw	r2,-20(fp)
  804e1c:	10800317 	ldw	r2,12(r2)
  804e20:	18bfdf1e 	bne	r3,r2,804da0 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  804e24:	e0bff617 	ldw	r2,-40(fp)
  804e28:	1004c03a 	cmpne	r2,r2,zero
  804e2c:	1000271e 	bne	r2,zero,804ecc <altera_avalon_uart_read+0x17c>
  804e30:	e0bffb17 	ldw	r2,-20(fp)
  804e34:	10c00217 	ldw	r3,8(r2)
  804e38:	e0bffb17 	ldw	r2,-20(fp)
  804e3c:	10800317 	ldw	r2,12(r2)
  804e40:	1880221e 	bne	r3,r2,804ecc <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  804e44:	e0bff917 	ldw	r2,-28(fp)
  804e48:	1004c03a 	cmpne	r2,r2,zero
  804e4c:	1000061e 	bne	r2,zero,804e68 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  804e50:	0804f800 	call	804f80 <alt_get_errno>
  804e54:	00c002c4 	movi	r3,11
  804e58:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  804e5c:	00800044 	movi	r2,1
  804e60:	e0bff705 	stb	r2,-36(fp)
        break;
  804e64:	00001f06 	br	804ee4 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804e68:	0005303a 	rdctl	r2,status
  804e6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804e70:	e0fff517 	ldw	r3,-44(fp)
  804e74:	00bfff84 	movi	r2,-2
  804e78:	1884703a 	and	r2,r3,r2
  804e7c:	1001703a 	wrctl	status,r2
  
  return context;
  804e80:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  804e84:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804e88:	e0bffb17 	ldw	r2,-20(fp)
  804e8c:	10800117 	ldw	r2,4(r2)
  804e90:	10c02014 	ori	r3,r2,128
  804e94:	e0bffb17 	ldw	r2,-20(fp)
  804e98:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804e9c:	e0bffb17 	ldw	r2,-20(fp)
  804ea0:	10800017 	ldw	r2,0(r2)
  804ea4:	11000304 	addi	r4,r2,12
  804ea8:	e0bffb17 	ldw	r2,-20(fp)
  804eac:	10800117 	ldw	r2,4(r2)
  804eb0:	1007883a 	mov	r3,r2
  804eb4:	2005883a 	mov	r2,r4
  804eb8:	10c00035 	stwio	r3,0(r2)
  804ebc:	e0bffa17 	ldw	r2,-24(fp)
  804ec0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ec4:	e0bff417 	ldw	r2,-48(fp)
  804ec8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  804ecc:	e0bff617 	ldw	r2,-40(fp)
  804ed0:	1004c03a 	cmpne	r2,r2,zero
  804ed4:	1000031e 	bne	r2,zero,804ee4 <altera_avalon_uart_read+0x194>
  804ed8:	e0bffd17 	ldw	r2,-12(fp)
  804edc:	1004c03a 	cmpne	r2,r2,zero
  804ee0:	103fc81e 	bne	r2,zero,804e04 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ee4:	0005303a 	rdctl	r2,status
  804ee8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804eec:	e0fff317 	ldw	r3,-52(fp)
  804ef0:	00bfff84 	movi	r2,-2
  804ef4:	1884703a 	and	r2,r3,r2
  804ef8:	1001703a 	wrctl	status,r2
  
  return context;
  804efc:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  804f00:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804f04:	e0bffb17 	ldw	r2,-20(fp)
  804f08:	10800117 	ldw	r2,4(r2)
  804f0c:	10c02014 	ori	r3,r2,128
  804f10:	e0bffb17 	ldw	r2,-20(fp)
  804f14:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804f18:	e0bffb17 	ldw	r2,-20(fp)
  804f1c:	10800017 	ldw	r2,0(r2)
  804f20:	11000304 	addi	r4,r2,12
  804f24:	e0bffb17 	ldw	r2,-20(fp)
  804f28:	10800117 	ldw	r2,4(r2)
  804f2c:	1007883a 	mov	r3,r2
  804f30:	2005883a 	mov	r2,r4
  804f34:	10c00035 	stwio	r3,0(r2)
  804f38:	e0bffa17 	ldw	r2,-24(fp)
  804f3c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f40:	e0bff217 	ldw	r2,-56(fp)
  804f44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  804f48:	e0bff703 	ldbu	r2,-36(fp)
  804f4c:	1005003a 	cmpeq	r2,r2,zero
  804f50:	1000031e 	bne	r2,zero,804f60 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  804f54:	00bffd04 	movi	r2,-12
  804f58:	e0bfff15 	stw	r2,-4(fp)
  804f5c:	00000206 	br	804f68 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  804f60:	e0bff617 	ldw	r2,-40(fp)
  804f64:	e0bfff15 	stw	r2,-4(fp)
  804f68:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  804f6c:	e037883a 	mov	sp,fp
  804f70:	dfc00117 	ldw	ra,4(sp)
  804f74:	df000017 	ldw	fp,0(sp)
  804f78:	dec00204 	addi	sp,sp,8
  804f7c:	f800283a 	ret

00804f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804f80:	defffd04 	addi	sp,sp,-12
  804f84:	dfc00215 	stw	ra,8(sp)
  804f88:	df000115 	stw	fp,4(sp)
  804f8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804f90:	00802074 	movhi	r2,129
  804f94:	10a0cc04 	addi	r2,r2,-31952
  804f98:	10800017 	ldw	r2,0(r2)
  804f9c:	1005003a 	cmpeq	r2,r2,zero
  804fa0:	1000061e 	bne	r2,zero,804fbc <alt_get_errno+0x3c>
  804fa4:	00802074 	movhi	r2,129
  804fa8:	10a0cc04 	addi	r2,r2,-31952
  804fac:	10800017 	ldw	r2,0(r2)
  804fb0:	103ee83a 	callr	r2
  804fb4:	e0bfff15 	stw	r2,-4(fp)
  804fb8:	00000306 	br	804fc8 <alt_get_errno+0x48>
  804fbc:	00802074 	movhi	r2,129
  804fc0:	10a79704 	addi	r2,r2,-24996
  804fc4:	e0bfff15 	stw	r2,-4(fp)
  804fc8:	e0bfff17 	ldw	r2,-4(fp)
}
  804fcc:	e037883a 	mov	sp,fp
  804fd0:	dfc00117 	ldw	ra,4(sp)
  804fd4:	df000017 	ldw	fp,0(sp)
  804fd8:	dec00204 	addi	sp,sp,8
  804fdc:	f800283a 	ret

00804fe0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  804fe0:	defff204 	addi	sp,sp,-56
  804fe4:	dfc00d15 	stw	ra,52(sp)
  804fe8:	df000c15 	stw	fp,48(sp)
  804fec:	df000c04 	addi	fp,sp,48
  804ff0:	e13ffc15 	stw	r4,-16(fp)
  804ff4:	e17ffd15 	stw	r5,-12(fp)
  804ff8:	e1bffe15 	stw	r6,-8(fp)
  804ffc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  805000:	e0bffe17 	ldw	r2,-8(fp)
  805004:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  805008:	e0bfff17 	ldw	r2,-4(fp)
  80500c:	1090000c 	andi	r2,r2,16384
  805010:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  805014:	00004006 	br	805118 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805018:	e0bffc17 	ldw	r2,-16(fp)
  80501c:	10800517 	ldw	r2,20(r2)
  805020:	10800044 	addi	r2,r2,1
  805024:	10800fcc 	andi	r2,r2,63
  805028:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80502c:	e0bffc17 	ldw	r2,-16(fp)
  805030:	10c00417 	ldw	r3,16(r2)
  805034:	e0bff917 	ldw	r2,-28(fp)
  805038:	1880251e 	bne	r3,r2,8050d0 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80503c:	e0bffa17 	ldw	r2,-24(fp)
  805040:	1005003a 	cmpeq	r2,r2,zero
  805044:	1000051e 	bne	r2,zero,80505c <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  805048:	08051a80 	call	8051a8 <alt_get_errno>
  80504c:	1007883a 	mov	r3,r2
  805050:	008002c4 	movi	r2,11
  805054:	18800015 	stw	r2,0(r3)
        break;
  805058:	00003206 	br	805124 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80505c:	0005303a 	rdctl	r2,status
  805060:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805064:	e0fff717 	ldw	r3,-36(fp)
  805068:	00bfff84 	movi	r2,-2
  80506c:	1884703a 	and	r2,r3,r2
  805070:	1001703a 	wrctl	status,r2
  
  return context;
  805074:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  805078:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80507c:	e0bffc17 	ldw	r2,-16(fp)
  805080:	10800117 	ldw	r2,4(r2)
  805084:	10c11014 	ori	r3,r2,1088
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10800017 	ldw	r2,0(r2)
  805098:	11000304 	addi	r4,r2,12
  80509c:	e0bffc17 	ldw	r2,-16(fp)
  8050a0:	10800117 	ldw	r2,4(r2)
  8050a4:	1007883a 	mov	r3,r2
  8050a8:	2005883a 	mov	r2,r4
  8050ac:	10c00035 	stwio	r3,0(r2)
  8050b0:	e0bffb17 	ldw	r2,-20(fp)
  8050b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8050b8:	e0bff617 	ldw	r2,-40(fp)
  8050bc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8050c0:	e0bffc17 	ldw	r2,-16(fp)
  8050c4:	10c00417 	ldw	r3,16(r2)
  8050c8:	e0bff917 	ldw	r2,-28(fp)
  8050cc:	18bffc26 	beq	r3,r2,8050c0 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  8050d0:	e0bff817 	ldw	r2,-32(fp)
  8050d4:	10bfffc4 	addi	r2,r2,-1
  8050d8:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8050dc:	e0bffc17 	ldw	r2,-16(fp)
  8050e0:	10c00517 	ldw	r3,20(r2)
  8050e4:	e0bffd17 	ldw	r2,-12(fp)
  8050e8:	10800003 	ldbu	r2,0(r2)
  8050ec:	1009883a 	mov	r4,r2
  8050f0:	e0bffc17 	ldw	r2,-16(fp)
  8050f4:	1885883a 	add	r2,r3,r2
  8050f8:	10801704 	addi	r2,r2,92
  8050fc:	11000005 	stb	r4,0(r2)
  805100:	e0bffd17 	ldw	r2,-12(fp)
  805104:	10800044 	addi	r2,r2,1
  805108:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80510c:	e0fffc17 	ldw	r3,-16(fp)
  805110:	e0bff917 	ldw	r2,-28(fp)
  805114:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  805118:	e0bff817 	ldw	r2,-32(fp)
  80511c:	1004c03a 	cmpne	r2,r2,zero
  805120:	103fbd1e 	bne	r2,zero,805018 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805124:	0005303a 	rdctl	r2,status
  805128:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80512c:	e0fff517 	ldw	r3,-44(fp)
  805130:	00bfff84 	movi	r2,-2
  805134:	1884703a 	and	r2,r3,r2
  805138:	1001703a 	wrctl	status,r2
  
  return context;
  80513c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  805140:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805144:	e0bffc17 	ldw	r2,-16(fp)
  805148:	10800117 	ldw	r2,4(r2)
  80514c:	10c11014 	ori	r3,r2,1088
  805150:	e0bffc17 	ldw	r2,-16(fp)
  805154:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805158:	e0bffc17 	ldw	r2,-16(fp)
  80515c:	10800017 	ldw	r2,0(r2)
  805160:	11000304 	addi	r4,r2,12
  805164:	e0bffc17 	ldw	r2,-16(fp)
  805168:	10800117 	ldw	r2,4(r2)
  80516c:	1007883a 	mov	r3,r2
  805170:	2005883a 	mov	r2,r4
  805174:	10c00035 	stwio	r3,0(r2)
  805178:	e0bffb17 	ldw	r2,-20(fp)
  80517c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805180:	e0bff417 	ldw	r2,-48(fp)
  805184:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  805188:	e0fffe17 	ldw	r3,-8(fp)
  80518c:	e0bff817 	ldw	r2,-32(fp)
  805190:	1885c83a 	sub	r2,r3,r2
}
  805194:	e037883a 	mov	sp,fp
  805198:	dfc00117 	ldw	ra,4(sp)
  80519c:	df000017 	ldw	fp,0(sp)
  8051a0:	dec00204 	addi	sp,sp,8
  8051a4:	f800283a 	ret

008051a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8051a8:	defffd04 	addi	sp,sp,-12
  8051ac:	dfc00215 	stw	ra,8(sp)
  8051b0:	df000115 	stw	fp,4(sp)
  8051b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8051b8:	00802074 	movhi	r2,129
  8051bc:	10a0cc04 	addi	r2,r2,-31952
  8051c0:	10800017 	ldw	r2,0(r2)
  8051c4:	1005003a 	cmpeq	r2,r2,zero
  8051c8:	1000061e 	bne	r2,zero,8051e4 <alt_get_errno+0x3c>
  8051cc:	00802074 	movhi	r2,129
  8051d0:	10a0cc04 	addi	r2,r2,-31952
  8051d4:	10800017 	ldw	r2,0(r2)
  8051d8:	103ee83a 	callr	r2
  8051dc:	e0bfff15 	stw	r2,-4(fp)
  8051e0:	00000306 	br	8051f0 <alt_get_errno+0x48>
  8051e4:	00802074 	movhi	r2,129
  8051e8:	10a79704 	addi	r2,r2,-24996
  8051ec:	e0bfff15 	stw	r2,-4(fp)
  8051f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8051f4:	e037883a 	mov	sp,fp
  8051f8:	dfc00117 	ldw	ra,4(sp)
  8051fc:	df000017 	ldw	fp,0(sp)
  805200:	dec00204 	addi	sp,sp,8
  805204:	f800283a 	ret

00805208 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805208:	defff404 	addi	sp,sp,-48
  80520c:	df000b15 	stw	fp,44(sp)
  805210:	df000b04 	addi	fp,sp,44
  805214:	e13ffb15 	stw	r4,-20(fp)
  805218:	e17ffc15 	stw	r5,-16(fp)
  80521c:	e1bffd15 	stw	r6,-12(fp)
  805220:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  805224:	e03ff915 	stw	zero,-28(fp)
  805228:	00802074 	movhi	r2,129
  80522c:	10a79c04 	addi	r2,r2,-24976
  805230:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  805234:	1005003a 	cmpeq	r2,r2,zero
  805238:	1000411e 	bne	r2,zero,805340 <alt_alarm_start+0x138>
  {
    if (alarm)
  80523c:	e0bffb17 	ldw	r2,-20(fp)
  805240:	1005003a 	cmpeq	r2,r2,zero
  805244:	10003b1e 	bne	r2,zero,805334 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  805248:	e0fffb17 	ldw	r3,-20(fp)
  80524c:	e0bffd17 	ldw	r2,-12(fp)
  805250:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  805254:	e0fffb17 	ldw	r3,-20(fp)
  805258:	e0bffe17 	ldw	r2,-8(fp)
  80525c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805260:	0005303a 	rdctl	r2,status
  805264:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805268:	e0fff817 	ldw	r3,-32(fp)
  80526c:	00bfff84 	movi	r2,-2
  805270:	1884703a 	and	r2,r3,r2
  805274:	1001703a 	wrctl	status,r2
  
  return context;
  805278:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80527c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805280:	00802074 	movhi	r2,129
  805284:	10a79d04 	addi	r2,r2,-24972
  805288:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80528c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  805290:	e0fffc17 	ldw	r3,-16(fp)
  805294:	e0bff917 	ldw	r2,-28(fp)
  805298:	1885883a 	add	r2,r3,r2
  80529c:	10c00044 	addi	r3,r2,1
  8052a0:	e0bffb17 	ldw	r2,-20(fp)
  8052a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8052a8:	e0bffb17 	ldw	r2,-20(fp)
  8052ac:	10c00217 	ldw	r3,8(r2)
  8052b0:	e0bff917 	ldw	r2,-28(fp)
  8052b4:	1880042e 	bgeu	r3,r2,8052c8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8052b8:	e0fffb17 	ldw	r3,-20(fp)
  8052bc:	00800044 	movi	r2,1
  8052c0:	18800405 	stb	r2,16(r3)
  8052c4:	00000206 	br	8052d0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8052c8:	e0bffb17 	ldw	r2,-20(fp)
  8052cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8052d0:	e0fffb17 	ldw	r3,-20(fp)
  8052d4:	00802074 	movhi	r2,129
  8052d8:	10a0cf04 	addi	r2,r2,-31940
  8052dc:	e0bff615 	stw	r2,-40(fp)
  8052e0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8052e4:	e0fff717 	ldw	r3,-36(fp)
  8052e8:	e0bff617 	ldw	r2,-40(fp)
  8052ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8052f0:	e0bff617 	ldw	r2,-40(fp)
  8052f4:	10c00017 	ldw	r3,0(r2)
  8052f8:	e0bff717 	ldw	r2,-36(fp)
  8052fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805300:	e0bff617 	ldw	r2,-40(fp)
  805304:	10c00017 	ldw	r3,0(r2)
  805308:	e0bff717 	ldw	r2,-36(fp)
  80530c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  805310:	e0fff617 	ldw	r3,-40(fp)
  805314:	e0bff717 	ldw	r2,-36(fp)
  805318:	18800015 	stw	r2,0(r3)
  80531c:	e0bffa17 	ldw	r2,-24(fp)
  805320:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805324:	e0bff517 	ldw	r2,-44(fp)
  805328:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80532c:	e03fff15 	stw	zero,-4(fp)
  805330:	00000506 	br	805348 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  805334:	00bffa84 	movi	r2,-22
  805338:	e0bfff15 	stw	r2,-4(fp)
  80533c:	00000206 	br	805348 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  805340:	00bfde84 	movi	r2,-134
  805344:	e0bfff15 	stw	r2,-4(fp)
  805348:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80534c:	e037883a 	mov	sp,fp
  805350:	df000017 	ldw	fp,0(sp)
  805354:	dec00104 	addi	sp,sp,4
  805358:	f800283a 	ret

0080535c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80535c:	defffa04 	addi	sp,sp,-24
  805360:	dfc00515 	stw	ra,20(sp)
  805364:	df000415 	stw	fp,16(sp)
  805368:	df000404 	addi	fp,sp,16
  80536c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  805370:	008000c4 	movi	r2,3
  805374:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  805378:	e0fffc17 	ldw	r3,-16(fp)
  80537c:	008003f4 	movhi	r2,15
  805380:	10909004 	addi	r2,r2,16960
  805384:	188b383a 	mul	r5,r3,r2
  805388:	01017db4 	movhi	r4,1526
  80538c:	21384004 	addi	r4,r4,-7936
  805390:	08067680 	call	806768 <__udivsi3>
  805394:	100b883a 	mov	r5,r2
  805398:	01200034 	movhi	r4,32768
  80539c:	213fffc4 	addi	r4,r4,-1
  8053a0:	08067680 	call	806768 <__udivsi3>
  8053a4:	100b883a 	mov	r5,r2
  8053a8:	e13fff17 	ldw	r4,-4(fp)
  8053ac:	08067680 	call	806768 <__udivsi3>
  8053b0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8053b4:	e0bffd17 	ldw	r2,-12(fp)
  8053b8:	1005003a 	cmpeq	r2,r2,zero
  8053bc:	1000281e 	bne	r2,zero,805460 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8053c0:	e03ffe15 	stw	zero,-8(fp)
  8053c4:	00001606 	br	805420 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8053c8:	00a00034 	movhi	r2,32768
  8053cc:	10bfffc4 	addi	r2,r2,-1
  8053d0:	10bfffc4 	addi	r2,r2,-1
  8053d4:	103ffe1e 	bne	r2,zero,8053d0 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8053d8:	e0fffc17 	ldw	r3,-16(fp)
  8053dc:	008003f4 	movhi	r2,15
  8053e0:	10909004 	addi	r2,r2,16960
  8053e4:	188b383a 	mul	r5,r3,r2
  8053e8:	01017db4 	movhi	r4,1526
  8053ec:	21384004 	addi	r4,r4,-7936
  8053f0:	08067680 	call	806768 <__udivsi3>
  8053f4:	100b883a 	mov	r5,r2
  8053f8:	01200034 	movhi	r4,32768
  8053fc:	213fffc4 	addi	r4,r4,-1
  805400:	08067680 	call	806768 <__udivsi3>
  805404:	1007883a 	mov	r3,r2
  805408:	e0bfff17 	ldw	r2,-4(fp)
  80540c:	10c5c83a 	sub	r2,r2,r3
  805410:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  805414:	e0bffe17 	ldw	r2,-8(fp)
  805418:	10800044 	addi	r2,r2,1
  80541c:	e0bffe15 	stw	r2,-8(fp)
  805420:	e0fffe17 	ldw	r3,-8(fp)
  805424:	e0bffd17 	ldw	r2,-12(fp)
  805428:	18bfe716 	blt	r3,r2,8053c8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80542c:	e0fffc17 	ldw	r3,-16(fp)
  805430:	008003f4 	movhi	r2,15
  805434:	10909004 	addi	r2,r2,16960
  805438:	188b383a 	mul	r5,r3,r2
  80543c:	01017db4 	movhi	r4,1526
  805440:	21384004 	addi	r4,r4,-7936
  805444:	08067680 	call	806768 <__udivsi3>
  805448:	1007883a 	mov	r3,r2
  80544c:	e0bfff17 	ldw	r2,-4(fp)
  805450:	1885383a 	mul	r2,r3,r2
  805454:	10bfffc4 	addi	r2,r2,-1
  805458:	103ffe1e 	bne	r2,zero,805454 <alt_busy_sleep+0xf8>
  80545c:	00000c06 	br	805490 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805460:	e0fffc17 	ldw	r3,-16(fp)
  805464:	008003f4 	movhi	r2,15
  805468:	10909004 	addi	r2,r2,16960
  80546c:	188b383a 	mul	r5,r3,r2
  805470:	01017db4 	movhi	r4,1526
  805474:	21384004 	addi	r4,r4,-7936
  805478:	08067680 	call	806768 <__udivsi3>
  80547c:	1007883a 	mov	r3,r2
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	1885383a 	mul	r2,r3,r2
  805488:	10bfffc4 	addi	r2,r2,-1
  80548c:	00bffe16 	blt	zero,r2,805488 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  805490:	0005883a 	mov	r2,zero
}
  805494:	e037883a 	mov	sp,fp
  805498:	dfc00117 	ldw	ra,4(sp)
  80549c:	df000017 	ldw	fp,0(sp)
  8054a0:	dec00204 	addi	sp,sp,8
  8054a4:	f800283a 	ret

008054a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8054a8:	defffe04 	addi	sp,sp,-8
  8054ac:	df000115 	stw	fp,4(sp)
  8054b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8054b4:	e03fff15 	stw	zero,-4(fp)
  8054b8:	00000506 	br	8054d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8054c4:	e0bfff17 	ldw	r2,-4(fp)
  8054c8:	10800804 	addi	r2,r2,32
  8054cc:	e0bfff15 	stw	r2,-4(fp)
  8054d0:	e0bfff17 	ldw	r2,-4(fp)
  8054d4:	10820030 	cmpltui	r2,r2,2048
  8054d8:	103ff81e 	bne	r2,zero,8054bc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8054dc:	e037883a 	mov	sp,fp
  8054e0:	df000017 	ldw	fp,0(sp)
  8054e4:	dec00104 	addi	sp,sp,4
  8054e8:	f800283a 	ret

008054ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8054ec:	defff904 	addi	sp,sp,-28
  8054f0:	dfc00615 	stw	ra,24(sp)
  8054f4:	df000515 	stw	fp,20(sp)
  8054f8:	df000504 	addi	fp,sp,20
  8054fc:	e13ffd15 	stw	r4,-12(fp)
  805500:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805504:	e0bffd17 	ldw	r2,-12(fp)
  805508:	1005003a 	cmpeq	r2,r2,zero
  80550c:	1000041e 	bne	r2,zero,805520 <alt_dev_llist_insert+0x34>
  805510:	e0bffd17 	ldw	r2,-12(fp)
  805514:	10800217 	ldw	r2,8(r2)
  805518:	1004c03a 	cmpne	r2,r2,zero
  80551c:	1000071e 	bne	r2,zero,80553c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  805520:	08055a00 	call	8055a0 <alt_get_errno>
  805524:	1007883a 	mov	r3,r2
  805528:	00800584 	movi	r2,22
  80552c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  805530:	00bffa84 	movi	r2,-22
  805534:	e0bfff15 	stw	r2,-4(fp)
  805538:	00001306 	br	805588 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80553c:	e0fffd17 	ldw	r3,-12(fp)
  805540:	e0bffe17 	ldw	r2,-8(fp)
  805544:	e0bffb15 	stw	r2,-20(fp)
  805548:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80554c:	e0fffc17 	ldw	r3,-16(fp)
  805550:	e0bffb17 	ldw	r2,-20(fp)
  805554:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  805558:	e0bffb17 	ldw	r2,-20(fp)
  80555c:	10c00017 	ldw	r3,0(r2)
  805560:	e0bffc17 	ldw	r2,-16(fp)
  805564:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805568:	e0bffb17 	ldw	r2,-20(fp)
  80556c:	10c00017 	ldw	r3,0(r2)
  805570:	e0bffc17 	ldw	r2,-16(fp)
  805574:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  805578:	e0fffb17 	ldw	r3,-20(fp)
  80557c:	e0bffc17 	ldw	r2,-16(fp)
  805580:	18800015 	stw	r2,0(r3)

  return 0;  
  805584:	e03fff15 	stw	zero,-4(fp)
  805588:	e0bfff17 	ldw	r2,-4(fp)
}
  80558c:	e037883a 	mov	sp,fp
  805590:	dfc00117 	ldw	ra,4(sp)
  805594:	df000017 	ldw	fp,0(sp)
  805598:	dec00204 	addi	sp,sp,8
  80559c:	f800283a 	ret

008055a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8055a0:	defffd04 	addi	sp,sp,-12
  8055a4:	dfc00215 	stw	ra,8(sp)
  8055a8:	df000115 	stw	fp,4(sp)
  8055ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8055b0:	00802074 	movhi	r2,129
  8055b4:	10a0cc04 	addi	r2,r2,-31952
  8055b8:	10800017 	ldw	r2,0(r2)
  8055bc:	1005003a 	cmpeq	r2,r2,zero
  8055c0:	1000061e 	bne	r2,zero,8055dc <alt_get_errno+0x3c>
  8055c4:	00802074 	movhi	r2,129
  8055c8:	10a0cc04 	addi	r2,r2,-31952
  8055cc:	10800017 	ldw	r2,0(r2)
  8055d0:	103ee83a 	callr	r2
  8055d4:	e0bfff15 	stw	r2,-4(fp)
  8055d8:	00000306 	br	8055e8 <alt_get_errno+0x48>
  8055dc:	00802074 	movhi	r2,129
  8055e0:	10a79704 	addi	r2,r2,-24996
  8055e4:	e0bfff15 	stw	r2,-4(fp)
  8055e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8055ec:	e037883a 	mov	sp,fp
  8055f0:	dfc00117 	ldw	ra,4(sp)
  8055f4:	df000017 	ldw	fp,0(sp)
  8055f8:	dec00204 	addi	sp,sp,8
  8055fc:	f800283a 	ret

00805600 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  805600:	defffd04 	addi	sp,sp,-12
  805604:	dfc00215 	stw	ra,8(sp)
  805608:	df000115 	stw	fp,4(sp)
  80560c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805610:	00bfff04 	movi	r2,-4
  805614:	00c02034 	movhi	r3,128
  805618:	18d9f704 	addi	r3,r3,26588
  80561c:	1885883a 	add	r2,r3,r2
  805620:	e0bfff15 	stw	r2,-4(fp)
  805624:	00000606 	br	805640 <_do_ctors+0x40>
        (*ctor) (); 
  805628:	e0bfff17 	ldw	r2,-4(fp)
  80562c:	10800017 	ldw	r2,0(r2)
  805630:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10bfff04 	addi	r2,r2,-4
  80563c:	e0bfff15 	stw	r2,-4(fp)
  805640:	e0ffff17 	ldw	r3,-4(fp)
  805644:	00802034 	movhi	r2,128
  805648:	1099f604 	addi	r2,r2,26584
  80564c:	18bff62e 	bgeu	r3,r2,805628 <_do_ctors+0x28>
        (*ctor) (); 
}
  805650:	e037883a 	mov	sp,fp
  805654:	dfc00117 	ldw	ra,4(sp)
  805658:	df000017 	ldw	fp,0(sp)
  80565c:	dec00204 	addi	sp,sp,8
  805660:	f800283a 	ret

00805664 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  805664:	defffd04 	addi	sp,sp,-12
  805668:	dfc00215 	stw	ra,8(sp)
  80566c:	df000115 	stw	fp,4(sp)
  805670:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805674:	00bfff04 	movi	r2,-4
  805678:	00c02034 	movhi	r3,128
  80567c:	18d9f704 	addi	r3,r3,26588
  805680:	1885883a 	add	r2,r3,r2
  805684:	e0bfff15 	stw	r2,-4(fp)
  805688:	00000606 	br	8056a4 <_do_dtors+0x40>
        (*dtor) (); 
  80568c:	e0bfff17 	ldw	r2,-4(fp)
  805690:	10800017 	ldw	r2,0(r2)
  805694:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	10bfff04 	addi	r2,r2,-4
  8056a0:	e0bfff15 	stw	r2,-4(fp)
  8056a4:	e0ffff17 	ldw	r3,-4(fp)
  8056a8:	00802034 	movhi	r2,128
  8056ac:	1099f704 	addi	r2,r2,26588
  8056b0:	18bff62e 	bgeu	r3,r2,80568c <_do_dtors+0x28>
        (*dtor) (); 
}
  8056b4:	e037883a 	mov	sp,fp
  8056b8:	dfc00117 	ldw	ra,4(sp)
  8056bc:	df000017 	ldw	fp,0(sp)
  8056c0:	dec00204 	addi	sp,sp,8
  8056c4:	f800283a 	ret

008056c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8056c8:	defffe04 	addi	sp,sp,-8
  8056cc:	dfc00115 	stw	ra,4(sp)
  8056d0:	df000015 	stw	fp,0(sp)
  8056d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8056d8:	0009883a 	mov	r4,zero
  8056dc:	01440004 	movi	r5,4096
  8056e0:	08061f40 	call	8061f4 <alt_icache_flush>
#endif
}
  8056e4:	e037883a 	mov	sp,fp
  8056e8:	dfc00117 	ldw	ra,4(sp)
  8056ec:	df000017 	ldw	fp,0(sp)
  8056f0:	dec00204 	addi	sp,sp,8
  8056f4:	f800283a 	ret

008056f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8056f8:	defff904 	addi	sp,sp,-28
  8056fc:	dfc00615 	stw	ra,24(sp)
  805700:	df000515 	stw	fp,20(sp)
  805704:	df000504 	addi	fp,sp,20
  805708:	e13ffc15 	stw	r4,-16(fp)
  80570c:	e17ffd15 	stw	r5,-12(fp)
  805710:	e1bffe15 	stw	r6,-8(fp)
  805714:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  805718:	e0800217 	ldw	r2,8(fp)
  80571c:	d8800015 	stw	r2,0(sp)
  805720:	e13ffc17 	ldw	r4,-16(fp)
  805724:	e17ffd17 	ldw	r5,-12(fp)
  805728:	e1bffe17 	ldw	r6,-8(fp)
  80572c:	e1ffff17 	ldw	r7,-4(fp)
  805730:	08058cc0 	call	8058cc <alt_iic_isr_register>
}  
  805734:	e037883a 	mov	sp,fp
  805738:	dfc00117 	ldw	ra,4(sp)
  80573c:	df000017 	ldw	fp,0(sp)
  805740:	dec00204 	addi	sp,sp,8
  805744:	f800283a 	ret

00805748 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805748:	defff904 	addi	sp,sp,-28
  80574c:	df000615 	stw	fp,24(sp)
  805750:	df000604 	addi	fp,sp,24
  805754:	e13ffe15 	stw	r4,-8(fp)
  805758:	e17fff15 	stw	r5,-4(fp)
  80575c:	e0bfff17 	ldw	r2,-4(fp)
  805760:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805764:	0005303a 	rdctl	r2,status
  805768:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80576c:	e0fffb17 	ldw	r3,-20(fp)
  805770:	00bfff84 	movi	r2,-2
  805774:	1884703a 	and	r2,r3,r2
  805778:	1001703a 	wrctl	status,r2
  
  return context;
  80577c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805780:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  805784:	e0fffc17 	ldw	r3,-16(fp)
  805788:	00800044 	movi	r2,1
  80578c:	10c4983a 	sll	r2,r2,r3
  805790:	1007883a 	mov	r3,r2
  805794:	00802074 	movhi	r2,129
  805798:	10a79804 	addi	r2,r2,-24992
  80579c:	10800017 	ldw	r2,0(r2)
  8057a0:	1886b03a 	or	r3,r3,r2
  8057a4:	00802074 	movhi	r2,129
  8057a8:	10a79804 	addi	r2,r2,-24992
  8057ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8057b0:	00802074 	movhi	r2,129
  8057b4:	10a79804 	addi	r2,r2,-24992
  8057b8:	10800017 	ldw	r2,0(r2)
  8057bc:	100170fa 	wrctl	ienable,r2
  8057c0:	e0bffd17 	ldw	r2,-12(fp)
  8057c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8057c8:	e0bffa17 	ldw	r2,-24(fp)
  8057cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8057d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8057d4:	e037883a 	mov	sp,fp
  8057d8:	df000017 	ldw	fp,0(sp)
  8057dc:	dec00104 	addi	sp,sp,4
  8057e0:	f800283a 	ret

008057e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8057e4:	defff904 	addi	sp,sp,-28
  8057e8:	df000615 	stw	fp,24(sp)
  8057ec:	df000604 	addi	fp,sp,24
  8057f0:	e13ffe15 	stw	r4,-8(fp)
  8057f4:	e17fff15 	stw	r5,-4(fp)
  8057f8:	e0bfff17 	ldw	r2,-4(fp)
  8057fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805800:	0005303a 	rdctl	r2,status
  805804:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805808:	e0fffb17 	ldw	r3,-20(fp)
  80580c:	00bfff84 	movi	r2,-2
  805810:	1884703a 	and	r2,r3,r2
  805814:	1001703a 	wrctl	status,r2
  
  return context;
  805818:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80581c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  805820:	e0fffc17 	ldw	r3,-16(fp)
  805824:	00800044 	movi	r2,1
  805828:	10c4983a 	sll	r2,r2,r3
  80582c:	0084303a 	nor	r2,zero,r2
  805830:	1007883a 	mov	r3,r2
  805834:	00802074 	movhi	r2,129
  805838:	10a79804 	addi	r2,r2,-24992
  80583c:	10800017 	ldw	r2,0(r2)
  805840:	1886703a 	and	r3,r3,r2
  805844:	00802074 	movhi	r2,129
  805848:	10a79804 	addi	r2,r2,-24992
  80584c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805850:	00802074 	movhi	r2,129
  805854:	10a79804 	addi	r2,r2,-24992
  805858:	10800017 	ldw	r2,0(r2)
  80585c:	100170fa 	wrctl	ienable,r2
  805860:	e0bffd17 	ldw	r2,-12(fp)
  805864:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805868:	e0bffa17 	ldw	r2,-24(fp)
  80586c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805870:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  805874:	e037883a 	mov	sp,fp
  805878:	df000017 	ldw	fp,0(sp)
  80587c:	dec00104 	addi	sp,sp,4
  805880:	f800283a 	ret

00805884 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805884:	defffc04 	addi	sp,sp,-16
  805888:	df000315 	stw	fp,12(sp)
  80588c:	df000304 	addi	fp,sp,12
  805890:	e13ffe15 	stw	r4,-8(fp)
  805894:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805898:	000530fa 	rdctl	r2,ienable
  80589c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8058a0:	e0ffff17 	ldw	r3,-4(fp)
  8058a4:	00800044 	movi	r2,1
  8058a8:	10c4983a 	sll	r2,r2,r3
  8058ac:	1007883a 	mov	r3,r2
  8058b0:	e0bffd17 	ldw	r2,-12(fp)
  8058b4:	1884703a 	and	r2,r3,r2
  8058b8:	1004c03a 	cmpne	r2,r2,zero
}
  8058bc:	e037883a 	mov	sp,fp
  8058c0:	df000017 	ldw	fp,0(sp)
  8058c4:	dec00104 	addi	sp,sp,4
  8058c8:	f800283a 	ret

008058cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8058cc:	defff404 	addi	sp,sp,-48
  8058d0:	dfc00b15 	stw	ra,44(sp)
  8058d4:	df000a15 	stw	fp,40(sp)
  8058d8:	df000a04 	addi	fp,sp,40
  8058dc:	e13ffb15 	stw	r4,-20(fp)
  8058e0:	e17ffc15 	stw	r5,-16(fp)
  8058e4:	e1bffd15 	stw	r6,-12(fp)
  8058e8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8058ec:	00bffa84 	movi	r2,-22
  8058f0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8058f4:	e0bffc17 	ldw	r2,-16(fp)
  8058f8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8058fc:	e0bff917 	ldw	r2,-28(fp)
  805900:	10800808 	cmpgei	r2,r2,32
  805904:	1000291e 	bne	r2,zero,8059ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805908:	0005303a 	rdctl	r2,status
  80590c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805910:	e0fff717 	ldw	r3,-36(fp)
  805914:	00bfff84 	movi	r2,-2
  805918:	1884703a 	and	r2,r3,r2
  80591c:	1001703a 	wrctl	status,r2
  
  return context;
  805920:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805924:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  805928:	e0bff917 	ldw	r2,-28(fp)
  80592c:	00c02074 	movhi	r3,129
  805930:	18e7a804 	addi	r3,r3,-24928
  805934:	100490fa 	slli	r2,r2,3
  805938:	10c7883a 	add	r3,r2,r3
  80593c:	e0bffd17 	ldw	r2,-12(fp)
  805940:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  805944:	e0bff917 	ldw	r2,-28(fp)
  805948:	00c02074 	movhi	r3,129
  80594c:	18e7a804 	addi	r3,r3,-24928
  805950:	100490fa 	slli	r2,r2,3
  805954:	10c5883a 	add	r2,r2,r3
  805958:	10c00104 	addi	r3,r2,4
  80595c:	e0bffe17 	ldw	r2,-8(fp)
  805960:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805964:	e0bffd17 	ldw	r2,-12(fp)
  805968:	1005003a 	cmpeq	r2,r2,zero
  80596c:	1000051e 	bne	r2,zero,805984 <alt_iic_isr_register+0xb8>
  805970:	e17ff917 	ldw	r5,-28(fp)
  805974:	e13ffb17 	ldw	r4,-20(fp)
  805978:	08057480 	call	805748 <alt_ic_irq_enable>
  80597c:	e0bfff15 	stw	r2,-4(fp)
  805980:	00000406 	br	805994 <alt_iic_isr_register+0xc8>
  805984:	e17ff917 	ldw	r5,-28(fp)
  805988:	e13ffb17 	ldw	r4,-20(fp)
  80598c:	08057e40 	call	8057e4 <alt_ic_irq_disable>
  805990:	e0bfff15 	stw	r2,-4(fp)
  805994:	e0bfff17 	ldw	r2,-4(fp)
  805998:	e0bffa15 	stw	r2,-24(fp)
  80599c:	e0bff817 	ldw	r2,-32(fp)
  8059a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8059a4:	e0bff617 	ldw	r2,-40(fp)
  8059a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8059ac:	e0bffa17 	ldw	r2,-24(fp)
}
  8059b0:	e037883a 	mov	sp,fp
  8059b4:	dfc00117 	ldw	ra,4(sp)
  8059b8:	df000017 	ldw	fp,0(sp)
  8059bc:	dec00204 	addi	sp,sp,8
  8059c0:	f800283a 	ret

008059c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8059c4:	defff904 	addi	sp,sp,-28
  8059c8:	dfc00615 	stw	ra,24(sp)
  8059cc:	df000515 	stw	fp,20(sp)
  8059d0:	df000504 	addi	fp,sp,20
  8059d4:	e13ffc15 	stw	r4,-16(fp)
  8059d8:	e17ffd15 	stw	r5,-12(fp)
  8059dc:	e1bffe15 	stw	r6,-8(fp)
  8059e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8059e4:	e13ffd17 	ldw	r4,-12(fp)
  8059e8:	e17ffe17 	ldw	r5,-8(fp)
  8059ec:	e1bfff17 	ldw	r6,-4(fp)
  8059f0:	0805bdc0 	call	805bdc <open>
  8059f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8059f8:	e0bffb17 	ldw	r2,-20(fp)
  8059fc:	1004803a 	cmplt	r2,r2,zero
  805a00:	10001c1e 	bne	r2,zero,805a74 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  805a04:	e0bffb17 	ldw	r2,-20(fp)
  805a08:	00c02034 	movhi	r3,128
  805a0c:	18dc1a04 	addi	r3,r3,28776
  805a10:	10800324 	muli	r2,r2,12
  805a14:	10c5883a 	add	r2,r2,r3
  805a18:	10c00017 	ldw	r3,0(r2)
  805a1c:	e0bffc17 	ldw	r2,-16(fp)
  805a20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805a24:	e0bffb17 	ldw	r2,-20(fp)
  805a28:	00c02034 	movhi	r3,128
  805a2c:	18dc1a04 	addi	r3,r3,28776
  805a30:	10800324 	muli	r2,r2,12
  805a34:	10c5883a 	add	r2,r2,r3
  805a38:	10800104 	addi	r2,r2,4
  805a3c:	10c00017 	ldw	r3,0(r2)
  805a40:	e0bffc17 	ldw	r2,-16(fp)
  805a44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805a48:	e0bffb17 	ldw	r2,-20(fp)
  805a4c:	00c02034 	movhi	r3,128
  805a50:	18dc1a04 	addi	r3,r3,28776
  805a54:	10800324 	muli	r2,r2,12
  805a58:	10c5883a 	add	r2,r2,r3
  805a5c:	10800204 	addi	r2,r2,8
  805a60:	10c00017 	ldw	r3,0(r2)
  805a64:	e0bffc17 	ldw	r2,-16(fp)
  805a68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805a6c:	e13ffb17 	ldw	r4,-20(fp)
  805a70:	0803a100 	call	803a10 <alt_release_fd>
  }
} 
  805a74:	e037883a 	mov	sp,fp
  805a78:	dfc00117 	ldw	ra,4(sp)
  805a7c:	df000017 	ldw	fp,0(sp)
  805a80:	dec00204 	addi	sp,sp,8
  805a84:	f800283a 	ret

00805a88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805a88:	defffb04 	addi	sp,sp,-20
  805a8c:	dfc00415 	stw	ra,16(sp)
  805a90:	df000315 	stw	fp,12(sp)
  805a94:	df000304 	addi	fp,sp,12
  805a98:	e13ffd15 	stw	r4,-12(fp)
  805a9c:	e17ffe15 	stw	r5,-8(fp)
  805aa0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805aa4:	01002034 	movhi	r4,128
  805aa8:	211c1d04 	addi	r4,r4,28788
  805aac:	e17ffd17 	ldw	r5,-12(fp)
  805ab0:	01800044 	movi	r6,1
  805ab4:	01c07fc4 	movi	r7,511
  805ab8:	08059c40 	call	8059c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805abc:	01002034 	movhi	r4,128
  805ac0:	211c1a04 	addi	r4,r4,28776
  805ac4:	e17ffe17 	ldw	r5,-8(fp)
  805ac8:	000d883a 	mov	r6,zero
  805acc:	01c07fc4 	movi	r7,511
  805ad0:	08059c40 	call	8059c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805ad4:	01002034 	movhi	r4,128
  805ad8:	211c2004 	addi	r4,r4,28800
  805adc:	e17fff17 	ldw	r5,-4(fp)
  805ae0:	01800044 	movi	r6,1
  805ae4:	01c07fc4 	movi	r7,511
  805ae8:	08059c40 	call	8059c4 <alt_open_fd>
}  
  805aec:	e037883a 	mov	sp,fp
  805af0:	dfc00117 	ldw	ra,4(sp)
  805af4:	df000017 	ldw	fp,0(sp)
  805af8:	dec00204 	addi	sp,sp,8
  805afc:	f800283a 	ret

00805b00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805b00:	defffc04 	addi	sp,sp,-16
  805b04:	df000315 	stw	fp,12(sp)
  805b08:	df000304 	addi	fp,sp,12
  805b0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805b10:	e0bffe17 	ldw	r2,-8(fp)
  805b14:	10800217 	ldw	r2,8(r2)
  805b18:	10d00034 	orhi	r3,r2,16384
  805b1c:	e0bffe17 	ldw	r2,-8(fp)
  805b20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805b24:	e03ffd15 	stw	zero,-12(fp)
  805b28:	00002006 	br	805bac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805b2c:	e0bffd17 	ldw	r2,-12(fp)
  805b30:	00c02034 	movhi	r3,128
  805b34:	18dc1a04 	addi	r3,r3,28776
  805b38:	10800324 	muli	r2,r2,12
  805b3c:	10c5883a 	add	r2,r2,r3
  805b40:	10c00017 	ldw	r3,0(r2)
  805b44:	e0bffe17 	ldw	r2,-8(fp)
  805b48:	10800017 	ldw	r2,0(r2)
  805b4c:	1880141e 	bne	r3,r2,805ba0 <alt_file_locked+0xa0>
  805b50:	e0bffd17 	ldw	r2,-12(fp)
  805b54:	00c02034 	movhi	r3,128
  805b58:	18dc1a04 	addi	r3,r3,28776
  805b5c:	10800324 	muli	r2,r2,12
  805b60:	10c5883a 	add	r2,r2,r3
  805b64:	10800204 	addi	r2,r2,8
  805b68:	10800017 	ldw	r2,0(r2)
  805b6c:	1004403a 	cmpge	r2,r2,zero
  805b70:	10000b1e 	bne	r2,zero,805ba0 <alt_file_locked+0xa0>
  805b74:	e0bffd17 	ldw	r2,-12(fp)
  805b78:	10800324 	muli	r2,r2,12
  805b7c:	1007883a 	mov	r3,r2
  805b80:	00802034 	movhi	r2,128
  805b84:	109c1a04 	addi	r2,r2,28776
  805b88:	1887883a 	add	r3,r3,r2
  805b8c:	e0bffe17 	ldw	r2,-8(fp)
  805b90:	18800326 	beq	r3,r2,805ba0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  805b94:	00bffcc4 	movi	r2,-13
  805b98:	e0bfff15 	stw	r2,-4(fp)
  805b9c:	00000a06 	br	805bc8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805ba0:	e0bffd17 	ldw	r2,-12(fp)
  805ba4:	10800044 	addi	r2,r2,1
  805ba8:	e0bffd15 	stw	r2,-12(fp)
  805bac:	00802074 	movhi	r2,129
  805bb0:	10a0cb04 	addi	r2,r2,-31956
  805bb4:	10800017 	ldw	r2,0(r2)
  805bb8:	1007883a 	mov	r3,r2
  805bbc:	e0bffd17 	ldw	r2,-12(fp)
  805bc0:	18bfda2e 	bgeu	r3,r2,805b2c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  805bc4:	e03fff15 	stw	zero,-4(fp)
  805bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  805bcc:	e037883a 	mov	sp,fp
  805bd0:	df000017 	ldw	fp,0(sp)
  805bd4:	dec00104 	addi	sp,sp,4
  805bd8:	f800283a 	ret

00805bdc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  805bdc:	defff404 	addi	sp,sp,-48
  805be0:	dfc00b15 	stw	ra,44(sp)
  805be4:	df000a15 	stw	fp,40(sp)
  805be8:	df000a04 	addi	fp,sp,40
  805bec:	e13ffb15 	stw	r4,-20(fp)
  805bf0:	e17ffc15 	stw	r5,-16(fp)
  805bf4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805bf8:	00bfffc4 	movi	r2,-1
  805bfc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  805c00:	00bffb44 	movi	r2,-19
  805c04:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  805c08:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805c0c:	e13ffb17 	ldw	r4,-20(fp)
  805c10:	01402074 	movhi	r5,129
  805c14:	2960c904 	addi	r5,r5,-31964
  805c18:	0805f880 	call	805f88 <alt_find_dev>
  805c1c:	e0bffa15 	stw	r2,-24(fp)
  805c20:	e0bffa17 	ldw	r2,-24(fp)
  805c24:	1004c03a 	cmpne	r2,r2,zero
  805c28:	1000051e 	bne	r2,zero,805c40 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805c2c:	e13ffb17 	ldw	r4,-20(fp)
  805c30:	080601c0 	call	80601c <alt_find_file>
  805c34:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  805c38:	00800044 	movi	r2,1
  805c3c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805c40:	e0bffa17 	ldw	r2,-24(fp)
  805c44:	1005003a 	cmpeq	r2,r2,zero
  805c48:	1000301e 	bne	r2,zero,805d0c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  805c4c:	e13ffa17 	ldw	r4,-24(fp)
  805c50:	080613c0 	call	80613c <alt_get_fd>
  805c54:	e0bff815 	stw	r2,-32(fp)
  805c58:	e0bff817 	ldw	r2,-32(fp)
  805c5c:	1004403a 	cmpge	r2,r2,zero
  805c60:	1000031e 	bne	r2,zero,805c70 <open+0x94>
    {
      status = index;
  805c64:	e0bff817 	ldw	r2,-32(fp)
  805c68:	e0bff715 	stw	r2,-36(fp)
  805c6c:	00002906 	br	805d14 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  805c70:	e0bff817 	ldw	r2,-32(fp)
  805c74:	10800324 	muli	r2,r2,12
  805c78:	1007883a 	mov	r3,r2
  805c7c:	00802034 	movhi	r2,128
  805c80:	109c1a04 	addi	r2,r2,28776
  805c84:	1885883a 	add	r2,r3,r2
  805c88:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805c8c:	e0fffc17 	ldw	r3,-16(fp)
  805c90:	00900034 	movhi	r2,16384
  805c94:	10bfffc4 	addi	r2,r2,-1
  805c98:	1886703a 	and	r3,r3,r2
  805c9c:	e0bff917 	ldw	r2,-28(fp)
  805ca0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  805ca4:	e0bff617 	ldw	r2,-40(fp)
  805ca8:	1004c03a 	cmpne	r2,r2,zero
  805cac:	1000061e 	bne	r2,zero,805cc8 <open+0xec>
  805cb0:	e13ff917 	ldw	r4,-28(fp)
  805cb4:	0805b000 	call	805b00 <alt_file_locked>
  805cb8:	e0bff715 	stw	r2,-36(fp)
  805cbc:	e0bff717 	ldw	r2,-36(fp)
  805cc0:	1004803a 	cmplt	r2,r2,zero
  805cc4:	1000131e 	bne	r2,zero,805d14 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  805cc8:	e0bffa17 	ldw	r2,-24(fp)
  805ccc:	10800317 	ldw	r2,12(r2)
  805cd0:	1005003a 	cmpeq	r2,r2,zero
  805cd4:	1000091e 	bne	r2,zero,805cfc <open+0x120>
  805cd8:	e0bffa17 	ldw	r2,-24(fp)
  805cdc:	10800317 	ldw	r2,12(r2)
  805ce0:	e13ff917 	ldw	r4,-28(fp)
  805ce4:	e17ffb17 	ldw	r5,-20(fp)
  805ce8:	e1bffc17 	ldw	r6,-16(fp)
  805cec:	e1fffd17 	ldw	r7,-12(fp)
  805cf0:	103ee83a 	callr	r2
  805cf4:	e0bfff15 	stw	r2,-4(fp)
  805cf8:	00000106 	br	805d00 <open+0x124>
  805cfc:	e03fff15 	stw	zero,-4(fp)
  805d00:	e0bfff17 	ldw	r2,-4(fp)
  805d04:	e0bff715 	stw	r2,-36(fp)
  805d08:	00000206 	br	805d14 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  805d0c:	00bffb44 	movi	r2,-19
  805d10:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  805d14:	e0bff717 	ldw	r2,-36(fp)
  805d18:	1004403a 	cmpge	r2,r2,zero
  805d1c:	1000091e 	bne	r2,zero,805d44 <open+0x168>
  {
    alt_release_fd (index);  
  805d20:	e13ff817 	ldw	r4,-32(fp)
  805d24:	0803a100 	call	803a10 <alt_release_fd>
    ALT_ERRNO = -status;
  805d28:	0805d640 	call	805d64 <alt_get_errno>
  805d2c:	e0fff717 	ldw	r3,-36(fp)
  805d30:	00c7c83a 	sub	r3,zero,r3
  805d34:	10c00015 	stw	r3,0(r2)
    return -1;
  805d38:	00bfffc4 	movi	r2,-1
  805d3c:	e0bffe15 	stw	r2,-8(fp)
  805d40:	00000206 	br	805d4c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  805d44:	e0bff817 	ldw	r2,-32(fp)
  805d48:	e0bffe15 	stw	r2,-8(fp)
  805d4c:	e0bffe17 	ldw	r2,-8(fp)
}
  805d50:	e037883a 	mov	sp,fp
  805d54:	dfc00117 	ldw	ra,4(sp)
  805d58:	df000017 	ldw	fp,0(sp)
  805d5c:	dec00204 	addi	sp,sp,8
  805d60:	f800283a 	ret

00805d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805d64:	defffd04 	addi	sp,sp,-12
  805d68:	dfc00215 	stw	ra,8(sp)
  805d6c:	df000115 	stw	fp,4(sp)
  805d70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805d74:	00802074 	movhi	r2,129
  805d78:	10a0cc04 	addi	r2,r2,-31952
  805d7c:	10800017 	ldw	r2,0(r2)
  805d80:	1005003a 	cmpeq	r2,r2,zero
  805d84:	1000061e 	bne	r2,zero,805da0 <alt_get_errno+0x3c>
  805d88:	00802074 	movhi	r2,129
  805d8c:	10a0cc04 	addi	r2,r2,-31952
  805d90:	10800017 	ldw	r2,0(r2)
  805d94:	103ee83a 	callr	r2
  805d98:	e0bfff15 	stw	r2,-4(fp)
  805d9c:	00000306 	br	805dac <alt_get_errno+0x48>
  805da0:	00802074 	movhi	r2,129
  805da4:	10a79704 	addi	r2,r2,-24996
  805da8:	e0bfff15 	stw	r2,-4(fp)
  805dac:	e0bfff17 	ldw	r2,-4(fp)
}
  805db0:	e037883a 	mov	sp,fp
  805db4:	dfc00117 	ldw	ra,4(sp)
  805db8:	df000017 	ldw	fp,0(sp)
  805dbc:	dec00204 	addi	sp,sp,8
  805dc0:	f800283a 	ret

00805dc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  805dc4:	defffa04 	addi	sp,sp,-24
  805dc8:	df000515 	stw	fp,20(sp)
  805dcc:	df000504 	addi	fp,sp,20
  805dd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dd4:	0005303a 	rdctl	r2,status
  805dd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ddc:	e0fffd17 	ldw	r3,-12(fp)
  805de0:	00bfff84 	movi	r2,-2
  805de4:	1884703a 	and	r2,r3,r2
  805de8:	1001703a 	wrctl	status,r2
  
  return context;
  805dec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805df0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  805df4:	e0bfff17 	ldw	r2,-4(fp)
  805df8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805dfc:	e0bffc17 	ldw	r2,-16(fp)
  805e00:	10c00017 	ldw	r3,0(r2)
  805e04:	e0bffc17 	ldw	r2,-16(fp)
  805e08:	10800117 	ldw	r2,4(r2)
  805e0c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  805e10:	e0bffc17 	ldw	r2,-16(fp)
  805e14:	10c00117 	ldw	r3,4(r2)
  805e18:	e0bffc17 	ldw	r2,-16(fp)
  805e1c:	10800017 	ldw	r2,0(r2)
  805e20:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805e24:	e0fffc17 	ldw	r3,-16(fp)
  805e28:	e0bffc17 	ldw	r2,-16(fp)
  805e2c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  805e30:	e0fffc17 	ldw	r3,-16(fp)
  805e34:	e0bffc17 	ldw	r2,-16(fp)
  805e38:	18800015 	stw	r2,0(r3)
  805e3c:	e0bffe17 	ldw	r2,-8(fp)
  805e40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e44:	e0bffb17 	ldw	r2,-20(fp)
  805e48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805e4c:	e037883a 	mov	sp,fp
  805e50:	df000017 	ldw	fp,0(sp)
  805e54:	dec00104 	addi	sp,sp,4
  805e58:	f800283a 	ret

00805e5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805e5c:	defffb04 	addi	sp,sp,-20
  805e60:	dfc00415 	stw	ra,16(sp)
  805e64:	df000315 	stw	fp,12(sp)
  805e68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805e6c:	d0a00c17 	ldw	r2,-32720(gp)
  805e70:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805e74:	d0a6da17 	ldw	r2,-25752(gp)
  805e78:	10800044 	addi	r2,r2,1
  805e7c:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805e80:	00003106 	br	805f48 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  805e84:	e0bffe17 	ldw	r2,-8(fp)
  805e88:	10800017 	ldw	r2,0(r2)
  805e8c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805e90:	e0bffe17 	ldw	r2,-8(fp)
  805e94:	10800403 	ldbu	r2,16(r2)
  805e98:	10803fcc 	andi	r2,r2,255
  805e9c:	1005003a 	cmpeq	r2,r2,zero
  805ea0:	1000051e 	bne	r2,zero,805eb8 <alt_tick+0x5c>
  805ea4:	d0a6da17 	ldw	r2,-25752(gp)
  805ea8:	1004c03a 	cmpne	r2,r2,zero
  805eac:	1000021e 	bne	r2,zero,805eb8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  805eb0:	e0bffe17 	ldw	r2,-8(fp)
  805eb4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805eb8:	e0bffe17 	ldw	r2,-8(fp)
  805ebc:	10c00217 	ldw	r3,8(r2)
  805ec0:	d0a6da17 	ldw	r2,-25752(gp)
  805ec4:	10c01e36 	bltu	r2,r3,805f40 <alt_tick+0xe4>
  805ec8:	e0bffe17 	ldw	r2,-8(fp)
  805ecc:	10800403 	ldbu	r2,16(r2)
  805ed0:	10803fcc 	andi	r2,r2,255
  805ed4:	1004c03a 	cmpne	r2,r2,zero
  805ed8:	1000191e 	bne	r2,zero,805f40 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  805edc:	e0bffe17 	ldw	r2,-8(fp)
  805ee0:	10c00317 	ldw	r3,12(r2)
  805ee4:	e0bffe17 	ldw	r2,-8(fp)
  805ee8:	11000517 	ldw	r4,20(r2)
  805eec:	183ee83a 	callr	r3
  805ef0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805ef4:	e0bffd17 	ldw	r2,-12(fp)
  805ef8:	1004c03a 	cmpne	r2,r2,zero
  805efc:	1000031e 	bne	r2,zero,805f0c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  805f00:	e13ffe17 	ldw	r4,-8(fp)
  805f04:	0805dc40 	call	805dc4 <alt_alarm_stop>
  805f08:	00000d06 	br	805f40 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  805f0c:	e0bffe17 	ldw	r2,-8(fp)
  805f10:	10c00217 	ldw	r3,8(r2)
  805f14:	e0bffd17 	ldw	r2,-12(fp)
  805f18:	1887883a 	add	r3,r3,r2
  805f1c:	e0bffe17 	ldw	r2,-8(fp)
  805f20:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  805f24:	e0bffe17 	ldw	r2,-8(fp)
  805f28:	10c00217 	ldw	r3,8(r2)
  805f2c:	d0a6da17 	ldw	r2,-25752(gp)
  805f30:	1880032e 	bgeu	r3,r2,805f40 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  805f34:	e0fffe17 	ldw	r3,-8(fp)
  805f38:	00800044 	movi	r2,1
  805f3c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  805f40:	e0bfff17 	ldw	r2,-4(fp)
  805f44:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805f48:	d0e00c04 	addi	r3,gp,-32720
  805f4c:	e0bffe17 	ldw	r2,-8(fp)
  805f50:	10ffcc1e 	bne	r2,r3,805e84 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  805f54:	e037883a 	mov	sp,fp
  805f58:	dfc00117 	ldw	ra,4(sp)
  805f5c:	df000017 	ldw	fp,0(sp)
  805f60:	dec00204 	addi	sp,sp,8
  805f64:	f800283a 	ret

00805f68 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  805f68:	deffff04 	addi	sp,sp,-4
  805f6c:	df000015 	stw	fp,0(sp)
  805f70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805f74:	000170fa 	wrctl	ienable,zero
}
  805f78:	e037883a 	mov	sp,fp
  805f7c:	df000017 	ldw	fp,0(sp)
  805f80:	dec00104 	addi	sp,sp,4
  805f84:	f800283a 	ret

00805f88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805f88:	defff904 	addi	sp,sp,-28
  805f8c:	dfc00615 	stw	ra,24(sp)
  805f90:	df000515 	stw	fp,20(sp)
  805f94:	df000504 	addi	fp,sp,20
  805f98:	e13ffd15 	stw	r4,-12(fp)
  805f9c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  805fa0:	e0bffe17 	ldw	r2,-8(fp)
  805fa4:	10800017 	ldw	r2,0(r2)
  805fa8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  805fac:	e13ffd17 	ldw	r4,-12(fp)
  805fb0:	08004780 	call	800478 <strlen>
  805fb4:	10800044 	addi	r2,r2,1
  805fb8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805fbc:	00000d06 	br	805ff4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  805fc0:	e0bffc17 	ldw	r2,-16(fp)
  805fc4:	11000217 	ldw	r4,8(r2)
  805fc8:	e1bffb17 	ldw	r6,-20(fp)
  805fcc:	e17ffd17 	ldw	r5,-12(fp)
  805fd0:	08062d00 	call	8062d0 <memcmp>
  805fd4:	1004c03a 	cmpne	r2,r2,zero
  805fd8:	1000031e 	bne	r2,zero,805fe8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805fdc:	e0bffc17 	ldw	r2,-16(fp)
  805fe0:	e0bfff15 	stw	r2,-4(fp)
  805fe4:	00000706 	br	806004 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  805fe8:	e0bffc17 	ldw	r2,-16(fp)
  805fec:	10800017 	ldw	r2,0(r2)
  805ff0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805ff4:	e0fffe17 	ldw	r3,-8(fp)
  805ff8:	e0bffc17 	ldw	r2,-16(fp)
  805ffc:	10fff01e 	bne	r2,r3,805fc0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  806000:	e03fff15 	stw	zero,-4(fp)
  806004:	e0bfff17 	ldw	r2,-4(fp)
}
  806008:	e037883a 	mov	sp,fp
  80600c:	dfc00117 	ldw	ra,4(sp)
  806010:	df000017 	ldw	fp,0(sp)
  806014:	dec00204 	addi	sp,sp,8
  806018:	f800283a 	ret

0080601c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80601c:	defffa04 	addi	sp,sp,-24
  806020:	dfc00515 	stw	ra,20(sp)
  806024:	df000415 	stw	fp,16(sp)
  806028:	df000404 	addi	fp,sp,16
  80602c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806030:	00802074 	movhi	r2,129
  806034:	10a0c704 	addi	r2,r2,-31972
  806038:	10800017 	ldw	r2,0(r2)
  80603c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806040:	00003306 	br	806110 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  806044:	e0bffd17 	ldw	r2,-12(fp)
  806048:	11000217 	ldw	r4,8(r2)
  80604c:	08004780 	call	800478 <strlen>
  806050:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  806054:	e0bffd17 	ldw	r2,-12(fp)
  806058:	10c00217 	ldw	r3,8(r2)
  80605c:	e0bffc17 	ldw	r2,-16(fp)
  806060:	1885883a 	add	r2,r3,r2
  806064:	10bfffc4 	addi	r2,r2,-1
  806068:	10800003 	ldbu	r2,0(r2)
  80606c:	10803fcc 	andi	r2,r2,255
  806070:	1080201c 	xori	r2,r2,128
  806074:	10bfe004 	addi	r2,r2,-128
  806078:	10800bd8 	cmpnei	r2,r2,47
  80607c:	1000031e 	bne	r2,zero,80608c <alt_find_file+0x70>
    {
      len -= 1;
  806080:	e0bffc17 	ldw	r2,-16(fp)
  806084:	10bfffc4 	addi	r2,r2,-1
  806088:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80608c:	e0bffc17 	ldw	r2,-16(fp)
  806090:	1007883a 	mov	r3,r2
  806094:	e0bffe17 	ldw	r2,-8(fp)
  806098:	1885883a 	add	r2,r3,r2
  80609c:	10800003 	ldbu	r2,0(r2)
  8060a0:	10803fcc 	andi	r2,r2,255
  8060a4:	1080201c 	xori	r2,r2,128
  8060a8:	10bfe004 	addi	r2,r2,-128
  8060ac:	10800be0 	cmpeqi	r2,r2,47
  8060b0:	10000a1e 	bne	r2,zero,8060dc <alt_find_file+0xc0>
  8060b4:	e0bffc17 	ldw	r2,-16(fp)
  8060b8:	1007883a 	mov	r3,r2
  8060bc:	e0bffe17 	ldw	r2,-8(fp)
  8060c0:	1885883a 	add	r2,r3,r2
  8060c4:	10800003 	ldbu	r2,0(r2)
  8060c8:	10803fcc 	andi	r2,r2,255
  8060cc:	1080201c 	xori	r2,r2,128
  8060d0:	10bfe004 	addi	r2,r2,-128
  8060d4:	1004c03a 	cmpne	r2,r2,zero
  8060d8:	10000a1e 	bne	r2,zero,806104 <alt_find_file+0xe8>
  8060dc:	e0bffd17 	ldw	r2,-12(fp)
  8060e0:	11000217 	ldw	r4,8(r2)
  8060e4:	e1bffc17 	ldw	r6,-16(fp)
  8060e8:	e17ffe17 	ldw	r5,-8(fp)
  8060ec:	08062d00 	call	8062d0 <memcmp>
  8060f0:	1004c03a 	cmpne	r2,r2,zero
  8060f4:	1000031e 	bne	r2,zero,806104 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8060f8:	e0bffd17 	ldw	r2,-12(fp)
  8060fc:	e0bfff15 	stw	r2,-4(fp)
  806100:	00000806 	br	806124 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  806104:	e0bffd17 	ldw	r2,-12(fp)
  806108:	10800017 	ldw	r2,0(r2)
  80610c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806110:	00c02074 	movhi	r3,129
  806114:	18e0c704 	addi	r3,r3,-31972
  806118:	e0bffd17 	ldw	r2,-12(fp)
  80611c:	10ffc91e 	bne	r2,r3,806044 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806120:	e03fff15 	stw	zero,-4(fp)
  806124:	e0bfff17 	ldw	r2,-4(fp)
}
  806128:	e037883a 	mov	sp,fp
  80612c:	dfc00117 	ldw	ra,4(sp)
  806130:	df000017 	ldw	fp,0(sp)
  806134:	dec00204 	addi	sp,sp,8
  806138:	f800283a 	ret

0080613c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80613c:	defffc04 	addi	sp,sp,-16
  806140:	df000315 	stw	fp,12(sp)
  806144:	df000304 	addi	fp,sp,12
  806148:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80614c:	00bffa04 	movi	r2,-24
  806150:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806154:	e03ffe15 	stw	zero,-8(fp)
  806158:	00001e06 	br	8061d4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80615c:	e0bffe17 	ldw	r2,-8(fp)
  806160:	00c02034 	movhi	r3,128
  806164:	18dc1a04 	addi	r3,r3,28776
  806168:	10800324 	muli	r2,r2,12
  80616c:	10c5883a 	add	r2,r2,r3
  806170:	10800017 	ldw	r2,0(r2)
  806174:	1004c03a 	cmpne	r2,r2,zero
  806178:	1000131e 	bne	r2,zero,8061c8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80617c:	e0bffe17 	ldw	r2,-8(fp)
  806180:	00c02034 	movhi	r3,128
  806184:	18dc1a04 	addi	r3,r3,28776
  806188:	10800324 	muli	r2,r2,12
  80618c:	10c7883a 	add	r3,r2,r3
  806190:	e0bfff17 	ldw	r2,-4(fp)
  806194:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  806198:	00802074 	movhi	r2,129
  80619c:	10a0cb04 	addi	r2,r2,-31956
  8061a0:	10c00017 	ldw	r3,0(r2)
  8061a4:	e0bffe17 	ldw	r2,-8(fp)
  8061a8:	1880040e 	bge	r3,r2,8061bc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8061ac:	00c02074 	movhi	r3,129
  8061b0:	18e0cb04 	addi	r3,r3,-31956
  8061b4:	e0bffe17 	ldw	r2,-8(fp)
  8061b8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8061bc:	e0bffe17 	ldw	r2,-8(fp)
  8061c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8061c4:	00000606 	br	8061e0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8061c8:	e0bffe17 	ldw	r2,-8(fp)
  8061cc:	10800044 	addi	r2,r2,1
  8061d0:	e0bffe15 	stw	r2,-8(fp)
  8061d4:	e0bffe17 	ldw	r2,-8(fp)
  8061d8:	10800810 	cmplti	r2,r2,32
  8061dc:	103fdf1e 	bne	r2,zero,80615c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8061e0:	e0bffd17 	ldw	r2,-12(fp)
}
  8061e4:	e037883a 	mov	sp,fp
  8061e8:	df000017 	ldw	fp,0(sp)
  8061ec:	dec00104 	addi	sp,sp,4
  8061f0:	f800283a 	ret

008061f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8061f4:	defffb04 	addi	sp,sp,-20
  8061f8:	df000415 	stw	fp,16(sp)
  8061fc:	df000404 	addi	fp,sp,16
  806200:	e13ffe15 	stw	r4,-8(fp)
  806204:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  806208:	e0bfff17 	ldw	r2,-4(fp)
  80620c:	10840070 	cmpltui	r2,r2,4097
  806210:	1000021e 	bne	r2,zero,80621c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  806214:	00840004 	movi	r2,4096
  806218:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80621c:	e0fffe17 	ldw	r3,-8(fp)
  806220:	e0bfff17 	ldw	r2,-4(fp)
  806224:	1885883a 	add	r2,r3,r2
  806228:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80622c:	e0bffe17 	ldw	r2,-8(fp)
  806230:	e0bffd15 	stw	r2,-12(fp)
  806234:	00000506 	br	80624c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  806238:	e0bffd17 	ldw	r2,-12(fp)
  80623c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806240:	e0bffd17 	ldw	r2,-12(fp)
  806244:	10800804 	addi	r2,r2,32
  806248:	e0bffd15 	stw	r2,-12(fp)
  80624c:	e0fffd17 	ldw	r3,-12(fp)
  806250:	e0bffc17 	ldw	r2,-16(fp)
  806254:	18bff836 	bltu	r3,r2,806238 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  806258:	e0bffe17 	ldw	r2,-8(fp)
  80625c:	108007cc 	andi	r2,r2,31
  806260:	1005003a 	cmpeq	r2,r2,zero
  806264:	1000021e 	bne	r2,zero,806270 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  806268:	e0bffd17 	ldw	r2,-12(fp)
  80626c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  806270:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  806274:	e037883a 	mov	sp,fp
  806278:	df000017 	ldw	fp,0(sp)
  80627c:	dec00104 	addi	sp,sp,4
  806280:	f800283a 	ret

00806284 <atexit>:
  806284:	200b883a 	mov	r5,r4
  806288:	000d883a 	mov	r6,zero
  80628c:	0009883a 	mov	r4,zero
  806290:	000f883a 	mov	r7,zero
  806294:	08063441 	jmpi	806344 <__register_exitproc>

00806298 <exit>:
  806298:	defffe04 	addi	sp,sp,-8
  80629c:	000b883a 	mov	r5,zero
  8062a0:	dc000015 	stw	r16,0(sp)
  8062a4:	dfc00115 	stw	ra,4(sp)
  8062a8:	2021883a 	mov	r16,r4
  8062ac:	080647c0 	call	80647c <__call_exitprocs>
  8062b0:	00802074 	movhi	r2,129
  8062b4:	10a0c404 	addi	r2,r2,-31984
  8062b8:	11000017 	ldw	r4,0(r2)
  8062bc:	20800f17 	ldw	r2,60(r4)
  8062c0:	10000126 	beq	r2,zero,8062c8 <exit+0x30>
  8062c4:	103ee83a 	callr	r2
  8062c8:	8009883a 	mov	r4,r16
  8062cc:	08067b80 	call	8067b8 <_exit>

008062d0 <memcmp>:
  8062d0:	00c000c4 	movi	r3,3
  8062d4:	1980032e 	bgeu	r3,r6,8062e4 <memcmp+0x14>
  8062d8:	2144b03a 	or	r2,r4,r5
  8062dc:	10c4703a 	and	r2,r2,r3
  8062e0:	10000f26 	beq	r2,zero,806320 <memcmp+0x50>
  8062e4:	31ffffc4 	addi	r7,r6,-1
  8062e8:	3000061e 	bne	r6,zero,806304 <memcmp+0x34>
  8062ec:	00000a06 	br	806318 <memcmp+0x48>
  8062f0:	39ffffc4 	addi	r7,r7,-1
  8062f4:	00bfffc4 	movi	r2,-1
  8062f8:	21000044 	addi	r4,r4,1
  8062fc:	29400044 	addi	r5,r5,1
  806300:	38800526 	beq	r7,r2,806318 <memcmp+0x48>
  806304:	20c00003 	ldbu	r3,0(r4)
  806308:	28800003 	ldbu	r2,0(r5)
  80630c:	18bff826 	beq	r3,r2,8062f0 <memcmp+0x20>
  806310:	1885c83a 	sub	r2,r3,r2
  806314:	f800283a 	ret
  806318:	0005883a 	mov	r2,zero
  80631c:	f800283a 	ret
  806320:	180f883a 	mov	r7,r3
  806324:	20c00017 	ldw	r3,0(r4)
  806328:	28800017 	ldw	r2,0(r5)
  80632c:	18bfed1e 	bne	r3,r2,8062e4 <memcmp+0x14>
  806330:	31bfff04 	addi	r6,r6,-4
  806334:	21000104 	addi	r4,r4,4
  806338:	29400104 	addi	r5,r5,4
  80633c:	39bff936 	bltu	r7,r6,806324 <memcmp+0x54>
  806340:	003fe806 	br	8062e4 <memcmp+0x14>

00806344 <__register_exitproc>:
  806344:	defffa04 	addi	sp,sp,-24
  806348:	00802074 	movhi	r2,129
  80634c:	10a0c404 	addi	r2,r2,-31984
  806350:	dc000015 	stw	r16,0(sp)
  806354:	14000017 	ldw	r16,0(r2)
  806358:	dd000415 	stw	r20,16(sp)
  80635c:	2829883a 	mov	r20,r5
  806360:	81405217 	ldw	r5,328(r16)
  806364:	dcc00315 	stw	r19,12(sp)
  806368:	dc800215 	stw	r18,8(sp)
  80636c:	dc400115 	stw	r17,4(sp)
  806370:	dfc00515 	stw	ra,20(sp)
  806374:	2023883a 	mov	r17,r4
  806378:	3027883a 	mov	r19,r6
  80637c:	3825883a 	mov	r18,r7
  806380:	28002526 	beq	r5,zero,806418 <__register_exitproc+0xd4>
  806384:	29000117 	ldw	r4,4(r5)
  806388:	008007c4 	movi	r2,31
  80638c:	11002716 	blt	r2,r4,80642c <__register_exitproc+0xe8>
  806390:	8800101e 	bne	r17,zero,8063d4 <__register_exitproc+0x90>
  806394:	2105883a 	add	r2,r4,r4
  806398:	1085883a 	add	r2,r2,r2
  80639c:	20c00044 	addi	r3,r4,1
  8063a0:	1145883a 	add	r2,r2,r5
  8063a4:	0009883a 	mov	r4,zero
  8063a8:	15000215 	stw	r20,8(r2)
  8063ac:	28c00115 	stw	r3,4(r5)
  8063b0:	2005883a 	mov	r2,r4
  8063b4:	dfc00517 	ldw	ra,20(sp)
  8063b8:	dd000417 	ldw	r20,16(sp)
  8063bc:	dcc00317 	ldw	r19,12(sp)
  8063c0:	dc800217 	ldw	r18,8(sp)
  8063c4:	dc400117 	ldw	r17,4(sp)
  8063c8:	dc000017 	ldw	r16,0(sp)
  8063cc:	dec00604 	addi	sp,sp,24
  8063d0:	f800283a 	ret
  8063d4:	29802204 	addi	r6,r5,136
  8063d8:	00800044 	movi	r2,1
  8063dc:	110e983a 	sll	r7,r2,r4
  8063e0:	30c04017 	ldw	r3,256(r6)
  8063e4:	2105883a 	add	r2,r4,r4
  8063e8:	1085883a 	add	r2,r2,r2
  8063ec:	1185883a 	add	r2,r2,r6
  8063f0:	19c6b03a 	or	r3,r3,r7
  8063f4:	14802015 	stw	r18,128(r2)
  8063f8:	14c00015 	stw	r19,0(r2)
  8063fc:	00800084 	movi	r2,2
  806400:	30c04015 	stw	r3,256(r6)
  806404:	88bfe31e 	bne	r17,r2,806394 <__register_exitproc+0x50>
  806408:	30804117 	ldw	r2,260(r6)
  80640c:	11c4b03a 	or	r2,r2,r7
  806410:	30804115 	stw	r2,260(r6)
  806414:	003fdf06 	br	806394 <__register_exitproc+0x50>
  806418:	00802074 	movhi	r2,129
  80641c:	10a7e804 	addi	r2,r2,-24672
  806420:	100b883a 	mov	r5,r2
  806424:	80805215 	stw	r2,328(r16)
  806428:	003fd606 	br	806384 <__register_exitproc+0x40>
  80642c:	00800034 	movhi	r2,0
  806430:	10800004 	addi	r2,r2,0
  806434:	1000021e 	bne	r2,zero,806440 <__register_exitproc+0xfc>
  806438:	013fffc4 	movi	r4,-1
  80643c:	003fdc06 	br	8063b0 <__register_exitproc+0x6c>
  806440:	01006404 	movi	r4,400
  806444:	103ee83a 	callr	r2
  806448:	1007883a 	mov	r3,r2
  80644c:	103ffa26 	beq	r2,zero,806438 <__register_exitproc+0xf4>
  806450:	80805217 	ldw	r2,328(r16)
  806454:	180b883a 	mov	r5,r3
  806458:	18000115 	stw	zero,4(r3)
  80645c:	18800015 	stw	r2,0(r3)
  806460:	80c05215 	stw	r3,328(r16)
  806464:	18006215 	stw	zero,392(r3)
  806468:	18006315 	stw	zero,396(r3)
  80646c:	0009883a 	mov	r4,zero
  806470:	883fc826 	beq	r17,zero,806394 <__register_exitproc+0x50>
  806474:	003fd706 	br	8063d4 <__register_exitproc+0x90>

00806478 <register_fini>:
  806478:	f800283a 	ret

0080647c <__call_exitprocs>:
  80647c:	00802074 	movhi	r2,129
  806480:	10a0c404 	addi	r2,r2,-31984
  806484:	10800017 	ldw	r2,0(r2)
  806488:	defff304 	addi	sp,sp,-52
  80648c:	df000b15 	stw	fp,44(sp)
  806490:	d8800115 	stw	r2,4(sp)
  806494:	00800034 	movhi	r2,0
  806498:	10800004 	addi	r2,r2,0
  80649c:	1005003a 	cmpeq	r2,r2,zero
  8064a0:	d8800215 	stw	r2,8(sp)
  8064a4:	d8800117 	ldw	r2,4(sp)
  8064a8:	dd400815 	stw	r21,32(sp)
  8064ac:	dd000715 	stw	r20,28(sp)
  8064b0:	10805204 	addi	r2,r2,328
  8064b4:	dfc00c15 	stw	ra,48(sp)
  8064b8:	ddc00a15 	stw	r23,40(sp)
  8064bc:	dd800915 	stw	r22,36(sp)
  8064c0:	dcc00615 	stw	r19,24(sp)
  8064c4:	dc800515 	stw	r18,20(sp)
  8064c8:	dc400415 	stw	r17,16(sp)
  8064cc:	dc000315 	stw	r16,12(sp)
  8064d0:	282b883a 	mov	r21,r5
  8064d4:	2039883a 	mov	fp,r4
  8064d8:	d8800015 	stw	r2,0(sp)
  8064dc:	2829003a 	cmpeq	r20,r5,zero
  8064e0:	d8800117 	ldw	r2,4(sp)
  8064e4:	14405217 	ldw	r17,328(r2)
  8064e8:	88001026 	beq	r17,zero,80652c <__call_exitprocs+0xb0>
  8064ec:	ddc00017 	ldw	r23,0(sp)
  8064f0:	88800117 	ldw	r2,4(r17)
  8064f4:	8c802204 	addi	r18,r17,136
  8064f8:	143fffc4 	addi	r16,r2,-1
  8064fc:	80000916 	blt	r16,zero,806524 <__call_exitprocs+0xa8>
  806500:	05bfffc4 	movi	r22,-1
  806504:	a000151e 	bne	r20,zero,80655c <__call_exitprocs+0xe0>
  806508:	8409883a 	add	r4,r16,r16
  80650c:	2105883a 	add	r2,r4,r4
  806510:	1485883a 	add	r2,r2,r18
  806514:	10c02017 	ldw	r3,128(r2)
  806518:	a8c01126 	beq	r21,r3,806560 <__call_exitprocs+0xe4>
  80651c:	843fffc4 	addi	r16,r16,-1
  806520:	85bff81e 	bne	r16,r22,806504 <__call_exitprocs+0x88>
  806524:	d8800217 	ldw	r2,8(sp)
  806528:	10003126 	beq	r2,zero,8065f0 <__call_exitprocs+0x174>
  80652c:	dfc00c17 	ldw	ra,48(sp)
  806530:	df000b17 	ldw	fp,44(sp)
  806534:	ddc00a17 	ldw	r23,40(sp)
  806538:	dd800917 	ldw	r22,36(sp)
  80653c:	dd400817 	ldw	r21,32(sp)
  806540:	dd000717 	ldw	r20,28(sp)
  806544:	dcc00617 	ldw	r19,24(sp)
  806548:	dc800517 	ldw	r18,20(sp)
  80654c:	dc400417 	ldw	r17,16(sp)
  806550:	dc000317 	ldw	r16,12(sp)
  806554:	dec00d04 	addi	sp,sp,52
  806558:	f800283a 	ret
  80655c:	8409883a 	add	r4,r16,r16
  806560:	88c00117 	ldw	r3,4(r17)
  806564:	2105883a 	add	r2,r4,r4
  806568:	1445883a 	add	r2,r2,r17
  80656c:	18ffffc4 	addi	r3,r3,-1
  806570:	11800217 	ldw	r6,8(r2)
  806574:	1c001526 	beq	r3,r16,8065cc <__call_exitprocs+0x150>
  806578:	10000215 	stw	zero,8(r2)
  80657c:	303fe726 	beq	r6,zero,80651c <__call_exitprocs+0xa0>
  806580:	00c00044 	movi	r3,1
  806584:	1c06983a 	sll	r3,r3,r16
  806588:	90804017 	ldw	r2,256(r18)
  80658c:	8cc00117 	ldw	r19,4(r17)
  806590:	1884703a 	and	r2,r3,r2
  806594:	10001426 	beq	r2,zero,8065e8 <__call_exitprocs+0x16c>
  806598:	90804117 	ldw	r2,260(r18)
  80659c:	1884703a 	and	r2,r3,r2
  8065a0:	10000c1e 	bne	r2,zero,8065d4 <__call_exitprocs+0x158>
  8065a4:	2105883a 	add	r2,r4,r4
  8065a8:	1485883a 	add	r2,r2,r18
  8065ac:	11400017 	ldw	r5,0(r2)
  8065b0:	e009883a 	mov	r4,fp
  8065b4:	303ee83a 	callr	r6
  8065b8:	88800117 	ldw	r2,4(r17)
  8065bc:	98bfc81e 	bne	r19,r2,8064e0 <__call_exitprocs+0x64>
  8065c0:	b8800017 	ldw	r2,0(r23)
  8065c4:	147fd526 	beq	r2,r17,80651c <__call_exitprocs+0xa0>
  8065c8:	003fc506 	br	8064e0 <__call_exitprocs+0x64>
  8065cc:	8c000115 	stw	r16,4(r17)
  8065d0:	003fea06 	br	80657c <__call_exitprocs+0x100>
  8065d4:	2105883a 	add	r2,r4,r4
  8065d8:	1485883a 	add	r2,r2,r18
  8065dc:	11000017 	ldw	r4,0(r2)
  8065e0:	303ee83a 	callr	r6
  8065e4:	003ff406 	br	8065b8 <__call_exitprocs+0x13c>
  8065e8:	303ee83a 	callr	r6
  8065ec:	003ff206 	br	8065b8 <__call_exitprocs+0x13c>
  8065f0:	88800117 	ldw	r2,4(r17)
  8065f4:	1000081e 	bne	r2,zero,806618 <__call_exitprocs+0x19c>
  8065f8:	89000017 	ldw	r4,0(r17)
  8065fc:	20000726 	beq	r4,zero,80661c <__call_exitprocs+0x1a0>
  806600:	b9000015 	stw	r4,0(r23)
  806604:	8809883a 	mov	r4,r17
  806608:	00000000 	call	0 <__reset-0x800000>
  80660c:	bc400017 	ldw	r17,0(r23)
  806610:	883fb71e 	bne	r17,zero,8064f0 <__call_exitprocs+0x74>
  806614:	003fc506 	br	80652c <__call_exitprocs+0xb0>
  806618:	89000017 	ldw	r4,0(r17)
  80661c:	882f883a 	mov	r23,r17
  806620:	2023883a 	mov	r17,r4
  806624:	883fb21e 	bne	r17,zero,8064f0 <__call_exitprocs+0x74>
  806628:	003fc006 	br	80652c <__call_exitprocs+0xb0>

0080662c <udivmodsi4>:
  80662c:	29001b2e 	bgeu	r5,r4,80669c <udivmodsi4+0x70>
  806630:	28001a16 	blt	r5,zero,80669c <udivmodsi4+0x70>
  806634:	00800044 	movi	r2,1
  806638:	0007883a 	mov	r3,zero
  80663c:	01c007c4 	movi	r7,31
  806640:	00000306 	br	806650 <udivmodsi4+0x24>
  806644:	19c01326 	beq	r3,r7,806694 <udivmodsi4+0x68>
  806648:	18c00044 	addi	r3,r3,1
  80664c:	28000416 	blt	r5,zero,806660 <udivmodsi4+0x34>
  806650:	294b883a 	add	r5,r5,r5
  806654:	1085883a 	add	r2,r2,r2
  806658:	293ffa36 	bltu	r5,r4,806644 <udivmodsi4+0x18>
  80665c:	10000d26 	beq	r2,zero,806694 <udivmodsi4+0x68>
  806660:	0007883a 	mov	r3,zero
  806664:	21400236 	bltu	r4,r5,806670 <udivmodsi4+0x44>
  806668:	2149c83a 	sub	r4,r4,r5
  80666c:	1886b03a 	or	r3,r3,r2
  806670:	1004d07a 	srli	r2,r2,1
  806674:	280ad07a 	srli	r5,r5,1
  806678:	103ffa1e 	bne	r2,zero,806664 <udivmodsi4+0x38>
  80667c:	30000226 	beq	r6,zero,806688 <udivmodsi4+0x5c>
  806680:	2005883a 	mov	r2,r4
  806684:	f800283a 	ret
  806688:	1809883a 	mov	r4,r3
  80668c:	2005883a 	mov	r2,r4
  806690:	f800283a 	ret
  806694:	0007883a 	mov	r3,zero
  806698:	003ff806 	br	80667c <udivmodsi4+0x50>
  80669c:	00800044 	movi	r2,1
  8066a0:	0007883a 	mov	r3,zero
  8066a4:	003fef06 	br	806664 <udivmodsi4+0x38>

008066a8 <__divsi3>:
  8066a8:	defffe04 	addi	sp,sp,-8
  8066ac:	dc000015 	stw	r16,0(sp)
  8066b0:	dfc00115 	stw	ra,4(sp)
  8066b4:	0021883a 	mov	r16,zero
  8066b8:	20000c16 	blt	r4,zero,8066ec <__divsi3+0x44>
  8066bc:	000d883a 	mov	r6,zero
  8066c0:	28000e16 	blt	r5,zero,8066fc <__divsi3+0x54>
  8066c4:	080662c0 	call	80662c <udivmodsi4>
  8066c8:	1007883a 	mov	r3,r2
  8066cc:	8005003a 	cmpeq	r2,r16,zero
  8066d0:	1000011e 	bne	r2,zero,8066d8 <__divsi3+0x30>
  8066d4:	00c7c83a 	sub	r3,zero,r3
  8066d8:	1805883a 	mov	r2,r3
  8066dc:	dfc00117 	ldw	ra,4(sp)
  8066e0:	dc000017 	ldw	r16,0(sp)
  8066e4:	dec00204 	addi	sp,sp,8
  8066e8:	f800283a 	ret
  8066ec:	0109c83a 	sub	r4,zero,r4
  8066f0:	04000044 	movi	r16,1
  8066f4:	000d883a 	mov	r6,zero
  8066f8:	283ff20e 	bge	r5,zero,8066c4 <__divsi3+0x1c>
  8066fc:	014bc83a 	sub	r5,zero,r5
  806700:	8021003a 	cmpeq	r16,r16,zero
  806704:	003fef06 	br	8066c4 <__divsi3+0x1c>

00806708 <__modsi3>:
  806708:	deffff04 	addi	sp,sp,-4
  80670c:	dfc00015 	stw	ra,0(sp)
  806710:	01800044 	movi	r6,1
  806714:	2807883a 	mov	r3,r5
  806718:	20000416 	blt	r4,zero,80672c <__modsi3+0x24>
  80671c:	28000c16 	blt	r5,zero,806750 <__modsi3+0x48>
  806720:	dfc00017 	ldw	ra,0(sp)
  806724:	dec00104 	addi	sp,sp,4
  806728:	080662c1 	jmpi	80662c <udivmodsi4>
  80672c:	0109c83a 	sub	r4,zero,r4
  806730:	28000b16 	blt	r5,zero,806760 <__modsi3+0x58>
  806734:	180b883a 	mov	r5,r3
  806738:	01800044 	movi	r6,1
  80673c:	080662c0 	call	80662c <udivmodsi4>
  806740:	0085c83a 	sub	r2,zero,r2
  806744:	dfc00017 	ldw	ra,0(sp)
  806748:	dec00104 	addi	sp,sp,4
  80674c:	f800283a 	ret
  806750:	014bc83a 	sub	r5,zero,r5
  806754:	dfc00017 	ldw	ra,0(sp)
  806758:	dec00104 	addi	sp,sp,4
  80675c:	080662c1 	jmpi	80662c <udivmodsi4>
  806760:	0147c83a 	sub	r3,zero,r5
  806764:	003ff306 	br	806734 <__modsi3+0x2c>

00806768 <__udivsi3>:
  806768:	000d883a 	mov	r6,zero
  80676c:	080662c1 	jmpi	80662c <udivmodsi4>

00806770 <__umodsi3>:
  806770:	01800044 	movi	r6,1
  806774:	080662c1 	jmpi	80662c <udivmodsi4>

00806778 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  806778:	defffd04 	addi	sp,sp,-12
  80677c:	df000215 	stw	fp,8(sp)
  806780:	df000204 	addi	fp,sp,8
  806784:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  806788:	e0bfff17 	ldw	r2,-4(fp)
  80678c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806790:	e0bffe17 	ldw	r2,-8(fp)
  806794:	1005003a 	cmpeq	r2,r2,zero
  806798:	1000021e 	bne	r2,zero,8067a4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80679c:	002af070 	cmpltui	zero,zero,43969
  8067a0:	00000106 	br	8067a8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8067a4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8067a8:	e037883a 	mov	sp,fp
  8067ac:	df000017 	ldw	fp,0(sp)
  8067b0:	dec00104 	addi	sp,sp,4
  8067b4:	f800283a 	ret

008067b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8067b8:	defffd04 	addi	sp,sp,-12
  8067bc:	dfc00215 	stw	ra,8(sp)
  8067c0:	df000115 	stw	fp,4(sp)
  8067c4:	df000104 	addi	fp,sp,4
  8067c8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8067cc:	e13fff17 	ldw	r4,-4(fp)
  8067d0:	08067780 	call	806778 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8067d4:	003fff06 	br	8067d4 <_exit+0x1c>
  8067d8:	00806478 	rdprs	r2,zero,401
